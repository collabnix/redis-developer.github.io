---
id: index-heroku
title: Create Redis database on Heroku 
sidebar_label: Redis on Heroku
slug: /create/heroku
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import useBaseUrl from '@docusaurus/useBaseUrl';
import RedisCard from '@site/src/theme/RedisCard';



Heroku is a cloud Platform as a Service (PaaS) supporting multiple programming languages that is used as a web application deployment model.Heroku lets the developer build, run and scale applications in a similar manner across all the languages(Java, Node.js, Scala, Clojure, Python, PHP, Ruby and Go). 


<Tabs
  defaultValue="direct"
  values={[
    {label: 'Direct via Redis Enterprise Cloud', value: 'direct'},
    {label: 'Addons using Heroku CLI', value: 'CLI'},
    {label: 'Addons using Heroku Dashboard', value: 'dashboardui'},
  ]}>
  <TabItem value="direct">



## Using Redis Enterprise Cloud

![heroku](heroku_rediscloud.png)

You can quickly and easily get your apps up and running with Redis Enterprise Cloud directly. Follow the below steps:


### Step 1. Create Redis Enterprise Cloud

Create your free Redis Enterprise Cloud account. Follow this link to know how to create Redis Enterprise Cloud subscription and database as shown below:

![heroku](rediscloud.png)


Save the database endpoint URL and password for future reference.

### Step 2. Connect your application to Redis Enterprise Cloud 

Here’s a sample rate limiting application that you can connect to Redis Enterprise Cloud:

#### Cloning the repository

   ```bash
    $ git clone https://github.com/redis-developer/basic-rate-limiting-demo-python
   ```

#### Install the below software:

-  Python 
-  Docker
-  Docker Compose


#### Run docker compose or install redis manually

   ```bash
    $ docker network create global
    $ docker-compose up -d --build
   ```

The above command will run Redis container


   ```
    $ docker-compose ps
             Name                           Command               State             Ports          
    ---------------------------------------------------------------------------------------------------
    redis.redisratelimiting.docker   docker-entrypoint.sh redis ...   Up      127.0.0.1:55561->6379/tcp
   ```

Open directory server (cd server/configuration): copy .env.example to create .env (copy .env.example .env or cp .env.example .env). And provide the values for environment variables (if needed)

   ```
    $ tree -a
    .
    ├── .env.example
    ├── __init__.py
    ├── asgi.py
    ├── settings.py
    ├──urls.py
    └── wsgi.py
   ```

- REDIS_HOST: Redis server host
- REDIS_PORT: Redis server port
- REDIS_DB: Redis server db index
- REDIS_PASSWORD: Redis server password

Replace:

- REDIS_HOST: redis-18104.c56.east-us.azure.cloud.redislabs.com
- REDIS_PORT: 18104
- REDIS_PASSWORD: password



#### Install python, pip and venv (on mac: https://installpython3.com/mac/)



   ```bash
    $ python3 -m venv venv
    $ source ./venv/bin/activate
    $ pip3 install -r requirements.txt
    $ python3 manage.py collectstatic
    $ python3 manage.py runserver
   ```

### Step 3. Create Heroku account

![heroku](create_heroku.png)

### Step 4. Create a Heroku app 

Login to Heroku

   ```bash
    $ heroku login
    heroku: Press any key to open up the browser to login or q to exit:
    Opening browser to https://cli-auth.heroku.com/auth/cli/browser/XXXXXXXXXXA
    Logging in... done
    Logged in as your_email_address
   ```

### Step 5. Cloning the Rate Limiting app


   ```bash
    $ git clone https://github.com/redis-developer/basic-rate-limiting-demo-python
    $cd basic-rate-limiting-demo-python
   ```

You now have a functioning Git repository that contains a simple application as well as a package.json file, which is used by Node’s dependency manager.


   ```bash
    $ heroku create
    Creating app... done, ⬢ salty-harbor-93142
    https://salty-harbor-93142.herokuapp.com/ | https://git.heroku.com/salty-harbor-93142.git
   ```


   ```bash
    $git push heroku
    Enumerating objects: 512, done.
    Counting objects: 100% (512/512), done.
    Delta compression using up to 12 threads
    Compressing objects: 100% (256/256), done.
    Writing objects: 100% (512/512), 1.52 MiB | 511.00   Downloading h11-0.12.0-py3-none-any.whl (54 kB)
    remote:        Collecting immutables>=0.9
    7.4.3 urllib3-1.26.2 uvicorn-0.13.2 uvloop-0.14.0
    remote: -----> $ python server/manage.py collectstatic --noinput
    remote:        137 static files copied to '/tmp/build_3e723f51/server/static_root'.
    remote: 
    remote: -----> Discovering process types
    remote:        Procfile declares types -> web
    remote: 
    remote: -----> Compressing...
    remote:        Done: 59.4M
    remote: -----> Launching...
    remote:        Released v5
    remote:        https://salty-harbor-93142.herokuapp.com/ deployed to Heroku
    remote: 
    remote: Verifying deploy... done.
    To https://git.heroku.com/salty-harbor-93142.git
    * [new branch]      master -> master
   ```

<TabItem>

<TabItem value="CLI">

## Addons using Heroku CLI


You can use Heroku CLI to login and add Redis Enterprise Cloud as an add-on.

### Step 1: Install Heroku 


```
$ brew tap heroku/brew && brew install heroku
```

Assuming that you already have Heroku account created, run the below command to login into Heroku via command prompt:


   ```
    $ heroku login
    heroku: Press any key to open up the browser to login or q to exit 
    Opening browser to https://cli-auth.heroku.com/auth/cli/browser/XXXXXXXXXXA
    Logging in... done
    Logged in as youremailaddress
   ```


### Step 2. Installing Redis Enterprise Cloud Add-on


Create a Heroku app

   ```
    heroku apps:create kickstartredis
    Creating ⬢ kickstartredis... done
    https://kickstartredis.herokuapp.com/ | https://git.heroku.com/kickstartredis.git
   ```



Ensure that you don’t have existing add-ons added in your account.


    ```
     $ heroku addons:create rediscloud -a kickstartredis
     Creating rediscloud on ⬢ kickstartredis... free
     Created rediscloud-cylindrical-24439 as REDISCLOUD_URL
     Use heroku addons:docs rediscloud to view documentation
    ```


Once Redis Cloud has been added, you will notice a REDISCLOUD_URL config vars in your heroku config containing the username, password, hostname and port of your first Redis Cloud database.


   ```
    $ heroku config:get REDISCLOUD_URL -a kickstartredis
    redis://default:Ro8eXXXX@redis-XXXXX.cXX.us-east-X-X.ecX.cloud.redislabs.com:1X324
   ```

```
$ heroku addons:info rediscloud
=== rediscloud-cylindrical-24439
Attachments:  kickstartredis::REDISCLOUD
Installed at: Fri Mar 19 2021 17:16:18 GMT+0530 (India Standard Time)
Owning app:   kickstartredis
Plan:         rediscloud:30
Price:        free
State:        created
```


```
$ heroku config -a kickstartredis
=== kickstartredis Config Vars
REDISCLOUD_URL: redis://default:XXXX@redis-XXXX.cXXX.us-east-X-X.ecX.cloud.redislabs.com:1X951
```




### Step 3: Accessing the database


```
$ redis-cli -h redis-11324.c82.us-east-1-2.ec2.cloud.redislabs.com -p 11324
redis-11324.c82.us-east-1-2.ec2.cloud.redislabs.com:11324> auth default XXXXX
OK
redis-11324.c82.us-east-1-2.ec2.cloud.redislabs.com:11324>
```

You can even browse it through Heroku Dashboard:


![heroku](heroku_selectrecloud.png)

Click on “Redis Enterprise Cloud” and it will be redirected over Redis Enterprise Cloud Dashboard

![heroku](heroku_recloud.png)

As shown above, a database called "redis-kickstartredis-XXX" gets created over Redis Enterprise Cloud dashboard. 


 </TabItem>


</TabItem>

<TabItem value="dashboardui">


### Step 1: Sign-in to Heroku 


Open  https://dashboard.heroku.com/apps and create a new sample application. For this demo, I have deployed an application with the name “kickstartredis”. 

### Step 2: Install Redis Enterprise Cloud 

Open https://elements.heroku.com/addons/rediscloud and click on “Install Redis Enterprise Cloud” to sign up with Heroku.

![heroku](heroku2.png)

### Step 3: Select Free Plan

For this demonstration, we will select a 30MB Free plan(see Plans and Pricing below).

![heroku](pricing.png)

### Step 4: Fill up Online Order Form

Once you sign in, you will see “Online Order Form” as shown below:

![heroku](orderform.png)

### Step 5. Provision Redis Enterprise Cloud database

Provision Redis Enterprise Cloud on your personal application(which in the above case is “kickstartredis”.

![heroku](heroku_selectrecloud.png)

Click on “Redis Enterprise Cloud” and it will be redirected over Redis Enterprise Cloud Dashboard

![heroku](heroku_recloud.png)

As shown above, a database called "redis-kickstartredis-XXX" gets created over Redis Enterprise Cloud dashboard. 

### Step 6. Accessing the database

You can use ```redis-cli``` to connect to the database by using the database endpoint, port and credential as shown below:

```
$ redis-cli -h redis-11324.c82.us-east-1-2.ec2.cloud.redislabs.com -p 11324
redis-11324.c82.us-east-1-2.ec2.cloud.redislabs.com:11324> auth default XXXXX
OK
redis-11324.c82.us-east-1-2.ec2.cloud.redislabs.com:11324>
```



 </TabItem>
<Tabs>



