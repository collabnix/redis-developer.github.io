{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{237:function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return d})),r.d(t,\"b\",(function(){return b}));var o=r(0),n=r.n(o);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=n.a.createContext({}),l=function(e){var t=n.a.useContext(i),r=t;return e&&(r=\"function\"==typeof e?e(t):c(c({},t),e)),r},d=function(e){var t=l(e.components);return n.a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:\"code\",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},h=n.a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,i=s(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),d=l(r),h=o,b=d[\"\".concat(p,\".\").concat(h)]||d[h]||u[h]||a;return r?n.a.createElement(b,c(c({ref:t},i),{},{components:r})):n.a.createElement(b,c({ref:t},i))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if(\"string\"==typeof e||o){var a=r.length,p=new Array(a);p[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType=\"string\"==typeof e?e:o,p[1]=c;for(var i=2;i<a;i++)p[i]=r[i];return n.a.createElement.apply(null,p)}return n.a.createElement.apply(null,r)}h.displayName=\"MDXCreateElement\"},345:function(e,t,r){\"use strict\";r.r(t),t.default=r.p+\"assets/images/pycograph1-c613b539a1b9593e890ac48f8327d037.png\"},346:function(e,t,r){\"use strict\";r.r(t),t.default=r.p+\"assets/images/pycograph2-4d39ddb177262c70e6ed5b457d6c0b92.png\"},347:function(e,t,r){\"use strict\";r.r(t),t.default=r.p+\"assets/images/pycograph3-82079be3e40ebd99ce870a81dc628071.png\"},348:function(e,t,r){\"use strict\";r.r(t),t.default=r.p+\"assets/images/pycograph4-f7fe963e1425562926ecff93c68c76e0.png\"},349:function(e,t,r){\"use strict\";r.r(t),t.default=r.p+\"assets/images/pycograph5-77bc3dc108918d7a4ca8a9e45f83e929.png\"},76:function(e,t,r){\"use strict\";r.r(t),r.d(t,\"frontMatter\",(function(){return c})),r.d(t,\"metadata\",(function(){return s})),r.d(t,\"toc\",(function(){return i})),r.d(t,\"default\",(function(){return d}));var o=r(3),n=r(7),a=(r(0),r(237)),p=[\"components\"],c={id:\"index-explorepythoncode\",title:\"Explore Python Codebase using RedisGraph\",sidebar_label:\"Explore Python Codebase using RedisGraph\",slug:\"/howtos/redisgraph/explore-python-code\"},s={unversionedId:\"howtos/redisgraph/explore-python-code/index-explorepythoncode\",id:\"howtos/redisgraph/explore-python-code/index-explorepythoncode\",isDocsHomePage:!1,title:\"Explore Python Codebase using RedisGraph\",description:\"Pycograph is an open source tool that creates a RedisGraph model of your Python code. The tool lets you to explore your Python codebase with graph queries. With Pycograph, you can query the python code with Cypher. Additionally, it is possible to visualize the graph model using RedisInsight.\",source:\"@site/docs/howtos/redisgraph/explore-python-code/index-explorepythoncode.mdx\",slug:\"/howtos/redisgraph/explore-python-code\",permalink:\"/howtos/redisgraph/explore-python-code\",editUrl:\"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/redisgraph/explore-python-code/index-explorepythoncode.mdx\",version:\"current\",sidebar_label:\"Explore Python Codebase using RedisGraph\",sidebar:\"docs\",previous:{title:\"Getting Started with RedisGraph\",permalink:\"/howtos/redisgraph/getting-started\"},next:{title:\"RedisBloom Tutorial\",permalink:\"/howtos/redisbloom\"}},i=[{value:\"Step 1. Install Docker\",id:\"step-1-install-docker\",children:[]},{value:\"Step 2. Install Pycograph from PyPI\",id:\"step-2-install-pycograph-from-pypi\",children:[]},{value:\"Step 3. Start RedisGraph Module\",id:\"step-3-start-redisgraph-module\",children:[]},{value:\"Step 4. Run RedisInsight\",id:\"step-4-run-redisinsight\",children:[]},{value:\"Step 5. Load a sample Python code\",id:\"step-5-load-a-sample-python-code\",children:[]},{value:\"Step 6. Load Python Code\",id:\"step-6-load-python-code\",children:[]},{value:\"Step 7. Visualize the project\",id:\"step-7-visualize-the-project\",children:[]},{value:\"References:\",id:\"references\",children:[]}],l={toc:i};function d(e){var t=e.components,c=Object(n.a)(e,p);return Object(a.b)(\"wrapper\",Object(o.a)({},l,c,{components:t,mdxType:\"MDXLayout\"}),Object(a.b)(\"p\",null,\"Pycograph is an open source tool that creates a RedisGraph model of your Python code. The tool lets you to explore your Python codebase with graph queries. With Pycograph, you can query the python code with Cypher. Additionally, it is possible to visualize the graph model using RedisInsight.\"),Object(a.b)(\"p\",null,\"The project is hosted over \",Object(a.b)(\"a\",{parentName:\"p\",href:\"https://pycograph.com/\"},\"https://pycograph.com/\"),\" and package is available in \",Object(a.b)(\"a\",{parentName:\"p\",href:\"https://pypi.org/project/pycograph/\"},\"PyPI repository\"),\". It was introduced for the first time by \",Object(a.b)(\"a\",{parentName:\"p\",href:\"https://pypi.org/user/reka/\"},\"Reka Horvath\"),\" during RedisConf 2021.\"),Object(a.b)(\"div\",{class:\"text--center\"},Object(a.b)(\"iframe\",{width:\"560\",height:\"315\",src:\"https://www.youtube.com/embed/pE3cg6jK2Zg\",title:\"YouTube video player\",frameborder:\"0\",allow:\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",allowfullscreen:!0})),Object(a.b)(\"p\",null,\"Let us see how to explore Python code using Pycograph and RedisGraph below:\"),Object(a.b)(\"h3\",{id:\"step-1-install-docker\"},\"Step 1. Install Docker\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",{parentName:\"pre\",className:\"language-bash\"},\" curl -sSL https://get.docker.com/ | sh\\n\")),Object(a.b)(\"h3\",{id:\"step-2-install-pycograph-from-pypi\"},\"Step 2. Install Pycograph from PyPI\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",{parentName:\"pre\",className:\"language-bash\"},\" pip install pycograph\\n\")),Object(a.b)(\"h3\",{id:\"step-3-start-redisgraph-module\"},\"Step 3. Start RedisGraph Module\"),Object(a.b)(\"p\",null,\"The redislabs/redismod Docker image provides you all the essential Redis modules.\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",{parentName:\"pre\",className:\"language-bash\"},\" docker run -d -p 6379:6379 redislabs/redismod\\n\")),Object(a.b)(\"h3\",{id:\"step-4-run-redisinsight\"},\"Step 4. Run RedisInsight\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",{parentName:\"pre\",className:\"language-bash\"},\" docker run -d -v redisinsight:/db -p 8001:8001 redislabs/redisinsight:latest\\n\")),Object(a.b)(\"h3\",{id:\"step-5-load-a-sample-python-code\"},\"Step 5. Load a sample Python code\"),Object(a.b)(\"p\",null,\"We will be using a popular Docker compose project for our sample python code.\\nClone the Docker Compose project repository\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",{parentName:\"pre\",className:\"language-bash\"},\"  git clone https://github.com/docker/compose\\n\")),Object(a.b)(\"h3\",{id:\"step-6-load-python-code\"},\"Step 6. Load Python Code\"),Object(a.b)(\"p\",null,\"Load your project's code with the pycograph load command:\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",{parentName:\"pre\",className:\"language-bash\"},\" pycograph load --project-dir compose\\n\")),Object(a.b)(\"b\",null,\"Results\"),\":\",Object(a.b)(\"pre\",null,Object(a.b)(\"code\",{parentName:\"pre\",className:\"language-bash\"},\" Graph successfully updated.\\n {'graph name': 'compose', 'nodes added': 2428, 'edges added': 11239}\\n\")),Object(a.b)(\"h3\",{id:\"step-7-visualize-the-project\"},\"Step 7. Visualize the project\"),Object(a.b)(\"p\",null,\"Open RedisInsight, select RedisGraph on the left menu and run the below query:\"),Object(a.b)(\"h4\",{id:\"query-1-return-every-node\"},\"Query #1: Return every node\"),Object(a.b)(\"pre\",null,Object(a.b)(\"code\",{parentName:\"pre\"},\" MATCH (n) RETURN n\\n\")),Object(a.b)(\"p\",null,\"You will see the below output:\"),Object(a.b)(\"p\",null,Object(a.b)(\"img\",{alt:\"My Image\",src:r(345).default})),Object(a.b)(\"h4\",{id:\"query-2-return-every-non-test-object\"},\"Query #2: Return every non-test object\"),Object(a.b)(\"p\",null,Object(a.b)(\"img\",{alt:\"My Image\",src:r(346).default}),\"  \"),Object(a.b)(\"h4\",{id:\"query-3--displaying-the-function-behind-the-docker-compose-up-command\"},\"Query #3.  Displaying the function behind the docker-compose up command\"),Object(a.b)(\"p\",null,\"A query returning exactly one node using the unique full_name property. Double-click on the node to display all its relationships.\"),Object(a.b)(\"p\",null,Object(a.b)(\"img\",{alt:\"My Image\",src:r(347).default})),Object(a.b)(\"h4\",{id:\"query-4-displaying-the-docker-compose-up-and-its-calls-relationships\"},\"Query #4. Displaying the 'docker-compose up' and its calls relationships\"),Object(a.b)(\"p\",null,Object(a.b)(\"img\",{alt:\"My Image\",src:r(348).default}),\" \"),Object(a.b)(\"h4\",{id:\"query-5-displaying-the-docker-compose-up-vs-docker-compose-run\"},\"Query #5. Displaying the 'docker-compose up' vs 'docker-compose run'\"),Object(a.b)(\"p\",null,\"Functions called by the Docker Compose top level commands up and run\"),Object(a.b)(\"p\",null,Object(a.b)(\"img\",{alt:\"My Image\",src:r(349).default})),Object(a.b)(\"h3\",{id:\"references\"},\"References:\"),Object(a.b)(\"ul\",null,Object(a.b)(\"li\",{parentName:\"ul\"},Object(a.b)(\"a\",{parentName:\"li\",href:\"https://pycograph.com/\"},\"Pycograph Project\")),Object(a.b)(\"li\",{parentName:\"ul\"},Object(a.b)(\"a\",{parentName:\"li\",href:\"https://github.com/docker/compose\"},\"Docker Compose Source Code\"))))}d.isMDXComponent=!0}}]);","name":"0b7ca231.875ab699.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[11],{\n\n/***/ 237:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export MDXContext */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MDXProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return createElement; });\n/* unused harmony export useMDXComponents */\n/* unused harmony export withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0___default.a.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, args);\n}\n\n\n\n\n/***/ }),\n\n/***/ 345:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"assets/images/pycograph1-c613b539a1b9593e890ac48f8327d037.png\");\n\n/***/ }),\n\n/***/ 346:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"assets/images/pycograph2-4d39ddb177262c70e6ed5b457d6c0b92.png\");\n\n/***/ }),\n\n/***/ 347:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"assets/images/pycograph3-82079be3e40ebd99ce870a81dc628071.png\");\n\n/***/ }),\n\n/***/ 348:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"assets/images/pycograph4-f7fe963e1425562926ecff93c68c76e0.png\");\n\n/***/ }),\n\n/***/ 349:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"assets/images/pycograph5-77bc3dc108918d7a4ca8a9e45f83e929.png\");\n\n/***/ }),\n\n/***/ 76:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frontMatter\", function() { return frontMatter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"metadata\", function() { return metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toc\", function() { return toc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MDXContent; });\n/* harmony import */ var _Users_ajeetraina_staging_redis_developer_github_io_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_ajeetraina_staging_redis_developer_github_io_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(237);\nvar _excluded=[\"components\"];var frontMatter={id:'index-explorepythoncode',title:'Explore Python Codebase using RedisGraph',sidebar_label:'Explore Python Codebase using RedisGraph',slug:'/howtos/redisgraph/explore-python-code'};var metadata={\"unversionedId\":\"howtos/redisgraph/explore-python-code/index-explorepythoncode\",\"id\":\"howtos/redisgraph/explore-python-code/index-explorepythoncode\",\"isDocsHomePage\":false,\"title\":\"Explore Python Codebase using RedisGraph\",\"description\":\"Pycograph is an open source tool that creates a RedisGraph model of your Python code. The tool lets you to explore your Python codebase with graph queries. With Pycograph, you can query the python code with Cypher. Additionally, it is possible to visualize the graph model using RedisInsight.\",\"source\":\"@site/docs/howtos/redisgraph/explore-python-code/index-explorepythoncode.mdx\",\"slug\":\"/howtos/redisgraph/explore-python-code\",\"permalink\":\"/howtos/redisgraph/explore-python-code\",\"editUrl\":\"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/redisgraph/explore-python-code/index-explorepythoncode.mdx\",\"version\":\"current\",\"sidebar_label\":\"Explore Python Codebase using RedisGraph\",\"sidebar\":\"docs\",\"previous\":{\"title\":\"Getting Started with RedisGraph\",\"permalink\":\"/howtos/redisgraph/getting-started\"},\"next\":{\"title\":\"RedisBloom Tutorial\",\"permalink\":\"/howtos/redisbloom\"}};/* @jsxRuntime classic */ /* @jsx mdx */var toc=[{value:'Step 1. Install Docker',id:'step-1-install-docker',children:[]},{value:'Step 2. Install Pycograph from PyPI',id:'step-2-install-pycograph-from-pypi',children:[]},{value:'Step 3. Start RedisGraph Module',id:'step-3-start-redisgraph-module',children:[]},{value:'Step 4. Run RedisInsight',id:'step-4-run-redisinsight',children:[]},{value:'Step 5. Load a sample Python code',id:'step-5-load-a-sample-python-code',children:[]},{value:'Step 6. Load Python Code',id:'step-6-load-python-code',children:[]},{value:'Step 7. Visualize the project',id:'step-7-visualize-the-project',children:[]},{value:'References:',id:'references',children:[]}];var layoutProps={toc:toc};var MDXLayout=\"wrapper\";function MDXContent(_ref){var components=_ref.components,props=Object(_Users_ajeetraina_staging_redis_developer_github_io_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(_ref,_excluded);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(MDXLayout,Object(_Users_ajeetraina_staging_redis_developer_github_io_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({},layoutProps,props,{components:components,mdxType:\"MDXLayout\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Pycograph is an open source tool that creates a RedisGraph model of your Python code. The tool lets you to explore your Python codebase with graph queries. With Pycograph, you can query the python code with Cypher. Additionally, it is possible to visualize the graph model using RedisInsight.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"The project is hosted over \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",{parentName:\"p\",\"href\":\"https://pycograph.com/\"},\"https://pycograph.com/\"),\" and package is available in \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",{parentName:\"p\",\"href\":\"https://pypi.org/project/pycograph/\"},\"PyPI repository\"),\". It was introduced for the first time by \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",{parentName:\"p\",\"href\":\"https://pypi.org/user/reka/\"},\"Reka Horvath\"),\" during RedisConf 2021.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"div\",{class:\"text--center\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"iframe\",{width:\"560\",height:\"315\",src:\"https://www.youtube.com/embed/pE3cg6jK2Zg\",title:\"YouTube video player\",frameborder:\"0\",allow:\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",allowfullscreen:true})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Let us see how to explore Python code using Pycograph and RedisGraph below:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-1-install-docker\"},\"Step 1. Install Docker\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\",\"className\":\"language-bash\"},\" curl -sSL https://get.docker.com/ | sh\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-2-install-pycograph-from-pypi\"},\"Step 2. Install Pycograph from PyPI\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\",\"className\":\"language-bash\"},\" pip install pycograph\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-3-start-redisgraph-module\"},\"Step 3. Start RedisGraph Module\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"The redislabs/redismod Docker image provides you all the essential Redis modules.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\",\"className\":\"language-bash\"},\" docker run -d -p 6379:6379 redislabs/redismod\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-4-run-redisinsight\"},\"Step 4. Run RedisInsight\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\",\"className\":\"language-bash\"},\" docker run -d -v redisinsight:/db -p 8001:8001 redislabs/redisinsight:latest\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-5-load-a-sample-python-code\"},\"Step 5. Load a sample Python code\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"We will be using a popular Docker compose project for our sample python code.\\nClone the Docker Compose project repository\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\",\"className\":\"language-bash\"},\"  git clone https://github.com/docker/compose\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-6-load-python-code\"},\"Step 6. Load Python Code\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Load your project's code with the pycograph load command:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\",\"className\":\"language-bash\"},\" pycograph load --project-dir compose\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"b\",null,\"Results\"),\":\",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\",\"className\":\"language-bash\"},\" Graph successfully updated.\\n {'graph name': 'compose', 'nodes added': 2428, 'edges added': 11239}\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-7-visualize-the-project\"},\"Step 7. Visualize the project\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Open RedisInsight, select RedisGraph on the left menu and run the below query:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"query-1-return-every-node\"},\"Query #1: Return every node\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\"},\" MATCH (n) RETURN n\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"You will see the below output:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"img\",{alt:\"My Image\",src:__webpack_require__(345).default})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"query-2-return-every-non-test-object\"},\"Query #2: Return every non-test object\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"img\",{alt:\"My Image\",src:__webpack_require__(346).default}),\"  \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"query-3--displaying-the-function-behind-the-docker-compose-up-command\"},\"Query #3.  Displaying the function behind the docker-compose up command\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"A query returning exactly one node using the unique full_name property. Double-click on the node to display all its relationships.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"img\",{alt:\"My Image\",src:__webpack_require__(347).default})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"query-4-displaying-the-docker-compose-up-and-its-calls-relationships\"},\"Query #4. Displaying the 'docker-compose up' and its calls relationships\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"img\",{alt:\"My Image\",src:__webpack_require__(348).default}),\" \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"query-5-displaying-the-docker-compose-up-vs-docker-compose-run\"},\"Query #5. Displaying the 'docker-compose up' vs 'docker-compose run'\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Functions called by the Docker Compose top level commands up and run\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"img\",{alt:\"My Image\",src:__webpack_require__(349).default})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"references\"},\"References:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",{parentName:\"li\",\"href\":\"https://pycograph.com/\"},\"Pycograph Project\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",{parentName:\"li\",\"href\":\"https://github.com/docker/compose\"},\"Docker Compose Source Code\"))));};MDXContent.isMDXComponent=true;\n\n/***/ })\n\n}]);","inputSourceMap":null}