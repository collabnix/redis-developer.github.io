{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{159:function(e,t,o){\"use strict\";o.r(t),o.d(t,\"frontMatter\",(function(){return a})),o.d(t,\"metadata\",(function(){return l})),o.d(t,\"toc\",(function(){return c})),o.d(t,\"default\",(function(){return m}));var r=o(3),i=o(7),n=(o(0),o(237)),s=[\"components\"],a={id:\"index-redisbloom\",title:\"RedisBloom\",sidebar_label:\"RedisBloom\",slug:\"/modules/redisbloom\"},l={unversionedId:\"modules/redisbloom/index-redisbloom\",id:\"modules/redisbloom/index-redisbloom\",isDocsHomePage:!1,title:\"RedisBloom\",description:\"RedisBloom extends Redis core to support additional probabilistic data structures. It allows for solving computer science problems in a constant memory space with extremely fast processing and a low error rate. It supports scalable Bloom and Cuckoo filters to determine (with a specified degree of certainty) whether an item is present or absent from a collection.\",source:\"@site/docs/modules/redisbloom/index-redisbloom.mdx\",slug:\"/modules/redisbloom\",permalink:\"/modules/redisbloom\",editUrl:\"https://github.com/redis-developer/redis-developer/edit/master/docs/modules/redisbloom/index-redisbloom.mdx\",version:\"current\",sidebar_label:\"RedisBloom\"},c=[{value:\"Step 1. Register and subscribe\",id:\"step-1-register-and-subscribe\",children:[]},{value:\"Step 2. Create a database with RedisBloom Module\",id:\"step-2-create-a-database-with-redisbloom-module\",children:[]},{value:\"Step 3. Connect to a database\",id:\"step-3-connect-to-a-database\",children:[]},{value:\"Step 4. Getting Started with RedisBloom\",id:\"step-4-getting-started-with-redisbloom\",children:[]},{value:\"Next Step\",id:\"next-step\",children:[]}],d={toc:c};function m(e){var t=e.components,a=Object(i.a)(e,s);return Object(n.b)(\"wrapper\",Object(r.a)({},d,a,{components:t,mdxType:\"MDXLayout\"}),Object(n.b)(\"p\",null,\"RedisBloom extends Redis core to support additional probabilistic data structures. It allows for solving computer science problems in a constant memory space with extremely fast processing and a low error rate. It supports scalable Bloom and Cuckoo filters to determine (with a specified degree of certainty) whether an item is present or absent from a collection. \"),Object(n.b)(\"p\",null,\"The RedisBloom module provides four data types:\"),Object(n.b)(\"ul\",null,Object(n.b)(\"li\",{parentName:\"ul\"},\"Bloom filter: A probabilistic data structure that can test for presence. A Bloom filter is a data structure designed to tell you, rapidly and memory-efficiently, whether an element is present in a set. Bloom filters typically exhibit better performance and scalability when inserting items (so if you're often adding items to your dataset then Bloom may be ideal). \"),Object(n.b)(\"li\",{parentName:\"ul\"},\"Cuckoo filter: An alternative to Bloom filters, Cuckoo filters comes with additional support for deletion of elements from a set. These filters are quicker on check operations.\"),Object(n.b)(\"li\",{parentName:\"ul\"},\"Count-min sketch: A count-min sketch is generally used to determine the frequency of events in a stream. You can query the count-min sketch to get an estimate of the frequency of any given event.  \"),Object(n.b)(\"li\",{parentName:\"ul\"},\"Top-K: The Top-k probabilistic data structure in RedisBloom is a deterministic algorithm that approximates frequencies for the top k items. With Top-K, you\\u2019ll be notified in real time whenever elements enter into or are expelled from your Top-K list. If an element add-command enters the list, the dropped element will be returned. \")),Object(n.b)(\"h3\",{id:\"step-1-register-and-subscribe\"},\"Step 1. Register and subscribe\"),Object(n.b)(\"p\",null,\"Follow \",Object(n.b)(\"a\",{parentName:\"p\",href:\"/create/cloud/rediscloud\"},\"this link to register\"),\" and subscribe to Redis Enterprise Cloud\"),Object(n.b)(\"p\",null,Object(n.b)(\"img\",{alt:\"Redisbloom\",src:o(573).default})),Object(n.b)(\"h3\",{id:\"step-2-create-a-database-with-redisbloom-module\"},\"Step 2. Create a database with RedisBloom Module\"),Object(n.b)(\"p\",null,Object(n.b)(\"img\",{alt:\"Redisbloom\",src:o(574).default})),Object(n.b)(\"h3\",{id:\"step-3-connect-to-a-database\"},\"Step 3. Connect to a database\"),Object(n.b)(\"p\",null,\"Follow \",Object(n.b)(\"a\",{parentName:\"p\",href:\"explore/redisinsight\"},\"this\"),\" link to know how to connect to a database\"),Object(n.b)(\"h3\",{id:\"step-4-getting-started-with-redisbloom\"},\"Step 4. Getting Started with RedisBloom\"),Object(n.b)(\"p\",null,\"In the next steps you will use some basic RedisBloom commands. You can run them from the Redis command-line interface (redis-cli) or use the CLI available in RedisInsight. (See part 2 of this tutorial to learn more about using the RedisInsight CLI.) To interact with RedisBloom, you use the BF.ADD and BF.EXISTS commands. \"),Object(n.b)(\"p\",null,\"Let\\u2019s go ahead and test drive some RedisBloom-specific operations. We will create a basic dataset based on unique visitors\\u2019 IP addresses, and you will see how to:\"),Object(n.b)(\"ul\",null,Object(n.b)(\"li\",{parentName:\"ul\"},\"Create a Bloom filter\"),Object(n.b)(\"li\",{parentName:\"ul\"},\"Determine whether or not an item exists in the Bloom filter\"),Object(n.b)(\"li\",{parentName:\"ul\"},\"Add one or more items to the Bloom filter\"),Object(n.b)(\"li\",{parentName:\"ul\"},\"Determine whether or not a unique visitor\\u2019s IP address exists\")),Object(n.b)(\"p\",null,\"Let\\u2019s walk through the process step-by-step:\"),Object(n.b)(\"h4\",{id:\"create-a-bloom-filter\"},\"Create a Bloom filter\"),Object(n.b)(\"p\",null,\"Use the BF.ADD command to add a unique visitor IP address to the Bloom filter as shown here:\"),Object(n.b)(\"pre\",null,Object(n.b)(\"code\",{parentName:\"pre\"},\">> BF.ADD unique_visitors 10.94.214.120\\n(integer) 1\\n(1.75s)\\n\")),Object(n.b)(\"h4\",{id:\"determine-whether-or-not-an-item-exists\"},\"Determine whether or not an item exists\"),Object(n.b)(\"p\",null,\"Use the BF.EXISTS command to determine whether or not an item may exist in the Bloom filter:\"),Object(n.b)(\"pre\",null,Object(n.b)(\"code\",{parentName:\"pre\"},\">> BF.EXISTS unique_visitors 10.94.214.120\\n(integer) 1\\n\")),Object(n.b)(\"pre\",null,Object(n.b)(\"code\",{parentName:\"pre\"},\">> BF.EXISTS unique_visitors 10.94.214.121\\n(integer) 0\\n(1.46s)\\n\")),Object(n.b)(\"p\",null,'In the above example, the first command shows the result as \\u201c1\\u201d, indicating that the item may exist, whereas the second command displays \"0\", indicating that the item certainly may not exist.'),Object(n.b)(\"h4\",{id:\"add-one-or-more-items-to-the-bloom-filter\"},\"Add one or more items to the Bloom filter\"),Object(n.b)(\"p\",null,\"Use the BF.MADD command to add one or more items to the Bloom filter, creating the filter if it does not yet exist. This command operates identically to BF.ADD, except it allows multiple inputs and returns multiple values:\"),Object(n.b)(\"pre\",null,Object(n.b)(\"code\",{parentName:\"pre\"},\">> BF.MADD unique_visitors 10.94.214.100 10.94.214.200 10.94.214.210 10.94.214.212\\n1) (integer) 1\\n2) (integer) 1\\n3) (integer) 1\\n4) (integer) 1\\n\")),Object(n.b)(\"p\",null,\"As shown above, the BF.MADD allows you to add one or more visitors\\u2019 IP addresses to the Bloom filter.\"),Object(n.b)(\"h4\",{id:\"determine-whether-or-not-a-unique-visitors-ip-address-exists\"},\"Determine whether or not a unique visitor\\u2019s IP address exists\"),Object(n.b)(\"p\",null,\"Use BF.MEXISTS to determine if one or more items may exist in the filter or not:\"),Object(n.b)(\"pre\",null,Object(n.b)(\"code\",{parentName:\"pre\"},\">> BF.MEXISTS unique_visitors 10.94.214.200 10.94.214.212\\n1) (integer) 1\\n2) (integer) 1\\n\")),Object(n.b)(\"pre\",null,Object(n.b)(\"code\",{parentName:\"pre\"},\" >> BF.MEXISTS unique_visitors 10.94.214.200 10.94.214.213\\n1) (integer) 1\\n2) (integer) 0\\n\")),Object(n.b)(\"p\",null,'In the above example, the first command shows the result as \\u201c1\\u201d for both the visitors\\u2019 IP addresses, indicating that these items do exist. The second command displays \"0\" for one of the visitor\\u2019s IP addresses, indicating that the item certainly does not exist.'),Object(n.b)(\"h3\",{id:\"next-step\"},\"Next Step\"),Object(n.b)(\"ul\",null,Object(n.b)(\"li\",{parentName:\"ul\"},\"Learn more about RedisBloom in the \",Object(n.b)(\"a\",{parentName:\"li\",href:\"https://oss.redislabs.com/redisbloom/Quick_Start/\"},\"Quick Start\"),\" tutorial.\")))}m.isMDXComponent=!0},237:function(e,t,o){\"use strict\";o.d(t,\"a\",(function(){return m})),o.d(t,\"b\",(function(){return p}));var r=o(0),i=o.n(r);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,i=function(e,t){if(null==e)return{};var o,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)o=n[r],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)o=n[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var c=i.a.createContext({}),d=function(e){var t=i.a.useContext(c),o=t;return e&&(o=\"function\"==typeof e?e(t):a(a({},t),e)),o},m=function(e){var t=d(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:\"code\",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var o=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,c=l(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),m=d(o),u=r,p=m[\"\".concat(s,\".\").concat(u)]||m[u]||b[u]||n;return o?i.a.createElement(p,a(a({ref:t},c),{},{components:o})):i.a.createElement(p,a({ref:t},c))}));function p(e,t){var o=arguments,r=t&&t.mdxType;if(\"string\"==typeof e||r){var n=o.length,s=new Array(n);s[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType=\"string\"==typeof e?e:r,s[1]=a;for(var c=2;c<n;c++)s[c]=o[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,o)}u.displayName=\"MDXCreateElement\"},573:function(e,t,o){\"use strict\";o.r(t),t.default=o.p+\"assets/images/redisbloom1-b44744e302a6aaf7c455dbcffee3b325.png\"},574:function(e,t,o){\"use strict\";o.r(t),t.default=o.p+\"assets/images/redisbloom-576e1ed5d6ed83aa38fb92fcd93614c2.png\"}}]);","name":"83a556d4.e7eb0574.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[91],{\n\n/***/ 159:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frontMatter\", function() { return frontMatter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"metadata\", function() { return metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toc\", function() { return toc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MDXContent; });\n/* harmony import */ var _Users_ajeetraina_staging_redis_developer_github_io_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_ajeetraina_staging_redis_developer_github_io_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(237);\nvar _excluded=[\"components\"];var frontMatter={id:'index-redisbloom',title:'RedisBloom',sidebar_label:'RedisBloom',slug:'/modules/redisbloom'};var metadata={\"unversionedId\":\"modules/redisbloom/index-redisbloom\",\"id\":\"modules/redisbloom/index-redisbloom\",\"isDocsHomePage\":false,\"title\":\"RedisBloom\",\"description\":\"RedisBloom extends Redis core to support additional probabilistic data structures. It allows for solving computer science problems in a constant memory space with extremely fast processing and a low error rate. It supports scalable Bloom and Cuckoo filters to determine (with a specified degree of certainty) whether an item is present or absent from a collection.\",\"source\":\"@site/docs/modules/redisbloom/index-redisbloom.mdx\",\"slug\":\"/modules/redisbloom\",\"permalink\":\"/modules/redisbloom\",\"editUrl\":\"https://github.com/redis-developer/redis-developer/edit/master/docs/modules/redisbloom/index-redisbloom.mdx\",\"version\":\"current\",\"sidebar_label\":\"RedisBloom\"};/* @jsxRuntime classic */ /* @jsx mdx */var toc=[{value:'Step 1. Register and subscribe',id:'step-1-register-and-subscribe',children:[]},{value:'Step 2. Create a database with RedisBloom Module',id:'step-2-create-a-database-with-redisbloom-module',children:[]},{value:'Step 3. Connect to a database',id:'step-3-connect-to-a-database',children:[]},{value:'Step 4. Getting Started with RedisBloom',id:'step-4-getting-started-with-redisbloom',children:[]},{value:'Next Step',id:'next-step',children:[]}];var layoutProps={toc:toc};var MDXLayout=\"wrapper\";function MDXContent(_ref){var components=_ref.components,props=Object(_Users_ajeetraina_staging_redis_developer_github_io_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(_ref,_excluded);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(MDXLayout,Object(_Users_ajeetraina_staging_redis_developer_github_io_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({},layoutProps,props,{components:components,mdxType:\"MDXLayout\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"RedisBloom extends Redis core to support additional probabilistic data structures. It allows for solving computer science problems in a constant memory space with extremely fast processing and a low error rate. It supports scalable Bloom and Cuckoo filters to determine (with a specified degree of certainty) whether an item is present or absent from a collection. \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"The RedisBloom module provides four data types:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Bloom filter: A probabilistic data structure that can test for presence. A Bloom filter is a data structure designed to tell you, rapidly and memory-efficiently, whether an element is present in a set. Bloom filters typically exhibit better performance and scalability when inserting items (so if you're often adding items to your dataset then Bloom may be ideal). \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Cuckoo filter: An alternative to Bloom filters, Cuckoo filters comes with additional support for deletion of elements from a set. These filters are quicker on check operations.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Count-min sketch: A count-min sketch is generally used to determine the frequency of events in a stream. You can query the count-min sketch to get an estimate of the frequency of any given event.  \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Top-K: The Top-k probabilistic data structure in RedisBloom is a deterministic algorithm that approximates frequencies for the top k items. With Top-K, you\\u2019ll be notified in real time whenever elements enter into or are expelled from your Top-K list. If an element add-command enters the list, the dropped element will be returned. \")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-1-register-and-subscribe\"},\"Step 1. Register and subscribe\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Follow \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",{parentName:\"p\",\"href\":\"/create/cloud/rediscloud\"},\"this link to register\"),\" and subscribe to Redis Enterprise Cloud\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"img\",{alt:\"Redisbloom\",src:__webpack_require__(573).default})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-2-create-a-database-with-redisbloom-module\"},\"Step 2. Create a database with RedisBloom Module\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"img\",{alt:\"Redisbloom\",src:__webpack_require__(574).default})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-3-connect-to-a-database\"},\"Step 3. Connect to a database\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Follow \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",{parentName:\"p\",\"href\":\"explore/redisinsight\"},\"this\"),\" link to know how to connect to a database\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"step-4-getting-started-with-redisbloom\"},\"Step 4. Getting Started with RedisBloom\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"In the next steps you will use some basic RedisBloom commands. You can run them from the Redis command-line interface (redis-cli) or use the CLI available in RedisInsight. (See part 2 of this tutorial to learn more about using the RedisInsight CLI.) To interact with RedisBloom, you use the BF.ADD and BF.EXISTS commands. \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Let\\u2019s go ahead and test drive some RedisBloom-specific operations. We will create a basic dataset based on unique visitors\\u2019 IP addresses, and you will see how to:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Create a Bloom filter\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Determine whether or not an item exists in the Bloom filter\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Add one or more items to the Bloom filter\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Determine whether or not a unique visitor\\u2019s IP address exists\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Let\\u2019s walk through the process step-by-step:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"create-a-bloom-filter\"},\"Create a Bloom filter\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Use the BF.ADD command to add a unique visitor IP address to the Bloom filter as shown here:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\"},\">> BF.ADD unique_visitors 10.94.214.120\\n(integer) 1\\n(1.75s)\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"determine-whether-or-not-an-item-exists\"},\"Determine whether or not an item exists\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Use the BF.EXISTS command to determine whether or not an item may exist in the Bloom filter:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\"},\">> BF.EXISTS unique_visitors 10.94.214.120\\n(integer) 1\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\"},\">> BF.EXISTS unique_visitors 10.94.214.121\\n(integer) 0\\n(1.46s)\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"In the above example, the first command shows the result as \\u201C1\\u201D, indicating that the item may exist, whereas the second command displays \\\"0\\\", indicating that the item certainly may not exist.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"add-one-or-more-items-to-the-bloom-filter\"},\"Add one or more items to the Bloom filter\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Use the BF.MADD command to add one or more items to the Bloom filter, creating the filter if it does not yet exist. This command operates identically to BF.ADD, except it allows multiple inputs and returns multiple values:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\"},\">> BF.MADD unique_visitors 10.94.214.100 10.94.214.200 10.94.214.210 10.94.214.212\\n1) (integer) 1\\n2) (integer) 1\\n3) (integer) 1\\n4) (integer) 1\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"As shown above, the BF.MADD allows you to add one or more visitors\\u2019 IP addresses to the Bloom filter.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"determine-whether-or-not-a-unique-visitors-ip-address-exists\"},\"Determine whether or not a unique visitor\\u2019s IP address exists\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Use BF.MEXISTS to determine if one or more items may exist in the filter or not:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\"},\">> BF.MEXISTS unique_visitors 10.94.214.200 10.94.214.212\\n1) (integer) 1\\n2) (integer) 1\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",{parentName:\"pre\"},\" >> BF.MEXISTS unique_visitors 10.94.214.200 10.94.214.213\\n1) (integer) 1\\n2) (integer) 0\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"In the above example, the first command shows the result as \\u201C1\\u201D for both the visitors\\u2019 IP addresses, indicating that these items do exist. The second command displays \\\"0\\\" for one of the visitor\\u2019s IP addresses, indicating that the item certainly does not exist.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"next-step\"},\"Next Step\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Learn more about RedisBloom in the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",{parentName:\"li\",\"href\":\"https://oss.redislabs.com/redisbloom/Quick_Start/\"},\"Quick Start\"),\" tutorial.\")));};MDXContent.isMDXComponent=true;\n\n/***/ }),\n\n/***/ 237:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export MDXContext */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MDXProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return createElement; });\n/* unused harmony export useMDXComponents */\n/* unused harmony export withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0___default.a.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, args);\n}\n\n\n\n\n/***/ }),\n\n/***/ 573:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"assets/images/redisbloom1-b44744e302a6aaf7c455dbcffee3b325.png\");\n\n/***/ }),\n\n/***/ 574:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"assets/images/redisbloom-576e1ed5d6ed83aa38fb92fcd93614c2.png\");\n\n/***/ })\n\n}]);","inputSourceMap":null}