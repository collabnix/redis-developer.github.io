{"remainingRequest":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/ajeetraina/staging/redis-developer.github.io/docs/create/cloud/rediscloud/index-recloud.mdx","dependencies":[{"path":"/Users/ajeetraina/staging/redis-developer.github.io/docs/create/cloud/rediscloud/index-recloud.mdx","mtime":1631078111195},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-create-cloud-rediscloud-index-recloud-mdx-fba.json","mtime":1631078548059},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1604063546682},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js","mtime":1611637097949},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1611637102291},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1611637100994}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FqZWV0cmFpbmEvc3RhZ2luZy9yZWRpcy1kZXZlbG9wZXIuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2luZGV4LXJlZGlzY2xvdWQnLHRpdGxlOidDcmVhdGUgRGF0YWJhc2UgdXNpbmcgUmVkaXMgRW50ZXJwcmlzZSBDbG91ZCcsc2lkZWJhcl9sYWJlbDonUmVkaXMgRW50ZXJwcmlzZSBDbG91ZCcsc2x1ZzonL2NyZWF0ZS9jbG91ZC9yZWRpc2Nsb3VkJ307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6ImNyZWF0ZS9jbG91ZC9yZWRpc2Nsb3VkL2luZGV4LXJlZGlzY2xvdWQiLCJpZCI6ImNyZWF0ZS9jbG91ZC9yZWRpc2Nsb3VkL2luZGV4LXJlZGlzY2xvdWQiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiQ3JlYXRlIERhdGFiYXNlIHVzaW5nIFJlZGlzIEVudGVycHJpc2UgQ2xvdWQiLCJkZXNjcmlwdGlvbiI6IlJlZGlzIEVudGVycHJpc2UgQ2xvdWQgaXMgYSBmdWxseSBtYW5hZ2VkIGNsb3VkIHNlcnZpY2UgYnkgUmVkaXMgTGFicy5CdWlsdCBmb3IgbW9kZXJuIGRpc3RyaWJ1dGVkIGFwcGxpY2F0aW9ucywgUmVkaXMgRW50ZXJwcmlzZSBDbG91ZCBlbmFibGVzIHlvdSB0byBydW4gYW55IHF1ZXJ5LCBzaW1wbGUgb3IgY29tcGxleCwgYXQgc3ViLW1pbGxpc2Vjb25kIHBlcmZvcm1hbmNlIGF0IHZpcnR1YWxseSBpbmZpbml0ZSBzY2FsZSB3aXRob3V0IHdvcnJ5aW5nIGFib3V0IG9wZXJhdGlvbmFsIGNvbXBsZXhpdHkgb3Igc2VydmljZSBhdmFpbGFiaWxpdHkuIFdpdGggbW9kZXJuIHByb2JhYmlsaXN0aWMgZGF0YSBzdHJ1Y3R1cmVzIGFuZCBleHRlbnNpYmxlIGRhdGEgbW9kZWxzLCBpbmNsdWRpbmcgU2VhcmNoLCBKU09OLCBHcmFwaCwgYW5kIFRpbWUgU2VyaWVzLCB5b3UgY2FuIHJlbHkgb24gUmVkaXMgYXMgeW91ciBkYXRhLXBsYXRmb3JtIGZvciBhbGwgeW91ciByZWFsLXRpbWUgbmVlZHMuIiwic291cmNlIjoiQHNpdGUvZG9jcy9jcmVhdGUvY2xvdWQvcmVkaXNjbG91ZC9pbmRleC1yZWNsb3VkLm1keCIsInNsdWciOiIvY3JlYXRlL2Nsb3VkL3JlZGlzY2xvdWQiLCJwZXJtYWxpbmsiOiIvY3JlYXRlL2Nsb3VkL3JlZGlzY2xvdWQiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL3JlZGlzLWRldmVsb3Blci9yZWRpcy1kZXZlbG9wZXIvZWRpdC9tYXN0ZXIvZG9jcy9jcmVhdGUvY2xvdWQvcmVkaXNjbG91ZC9pbmRleC1yZWNsb3VkLm1keCIsInZlcnNpb24iOiJjdXJyZW50Iiwic2lkZWJhcl9sYWJlbCI6IlJlZGlzIEVudGVycHJpc2UgQ2xvdWQifTsvKiBAanN4UnVudGltZSBjbGFzc2ljICovIC8qIEBqc3ggbWR4ICovZXhwb3J0IGNvbnN0IHRvYz1be3ZhbHVlOidTdGVwIDEuIENyZWF0ZSBmcmVlIGNsb3VkIGFjY291bnQnLGlkOidzdGVwLTEtY3JlYXRlLWZyZWUtY2xvdWQtYWNjb3VudCcsY2hpbGRyZW46W119LHt2YWx1ZTonU3RlcCAyLiBBZGQgc3Vic2NyaXB0aW9uJyxpZDonc3RlcC0yLWFkZC1zdWJzY3JpcHRpb24nLGNoaWxkcmVuOltdfSx7dmFsdWU6J1N0ZXAgMy4gIFNlbGVjdCBjbG91ZCBwcm92aWRlcicsaWQ6J3N0ZXAtMy0tc2VsZWN0LWNsb3VkLXByb3ZpZGVyJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidTdGVwIDQuIENyZWF0ZSBkYXRhYmFzZScsaWQ6J3N0ZXAtNC1jcmVhdGUtZGF0YWJhc2UnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1N0ZXAgNS4gTGF1bmNoIGRhdGFiYXNlJyxpZDonc3RlcC01LWxhdW5jaC1kYXRhYmFzZScsY2hpbGRyZW46W119LHt2YWx1ZTonTmV4dCBTdGVwJyxpZDonbmV4dC1zdGVwJyxjaGlsZHJlbjpbXX1dO2NvbnN0IGxheW91dFByb3BzPXt0b2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgicCIsbnVsbCxgUmVkaXMgRW50ZXJwcmlzZSBDbG91ZCBpcyBhIGZ1bGx5IG1hbmFnZWQgY2xvdWQgc2VydmljZSBieSBSZWRpcyBMYWJzLkJ1aWx0IGZvciBtb2Rlcm4gZGlzdHJpYnV0ZWQgYXBwbGljYXRpb25zLCBSZWRpcyBFbnRlcnByaXNlIENsb3VkIGVuYWJsZXMgeW91IHRvIHJ1biBhbnkgcXVlcnksIHNpbXBsZSBvciBjb21wbGV4LCBhdCBzdWItbWlsbGlzZWNvbmQgcGVyZm9ybWFuY2UgYXQgdmlydHVhbGx5IGluZmluaXRlIHNjYWxlIHdpdGhvdXQgd29ycnlpbmcgYWJvdXQgb3BlcmF0aW9uYWwgY29tcGxleGl0eSBvciBzZXJ2aWNlIGF2YWlsYWJpbGl0eS4gV2l0aCBtb2Rlcm4gcHJvYmFiaWxpc3RpYyBkYXRhIHN0cnVjdHVyZXMgYW5kIGV4dGVuc2libGUgZGF0YSBtb2RlbHMsIGluY2x1ZGluZyBTZWFyY2gsIEpTT04sIEdyYXBoLCBhbmQgVGltZSBTZXJpZXMsIHlvdSBjYW4gcmVseSBvbiBSZWRpcyBhcyB5b3VyIGRhdGEtcGxhdGZvcm0gZm9yIGFsbCB5b3VyIHJlYWwtdGltZSBuZWVkcy5gKSxtZHgoImgzIix7ImlkIjoic3RlcC0xLWNyZWF0ZS1mcmVlLWNsb3VkLWFjY291bnQifSxgU3RlcCAxLiBDcmVhdGUgZnJlZSBjbG91ZCBhY2NvdW50YCksbWR4KCJwIixudWxsLGBDcmVhdGUgeW91ciBmcmVlIGAsbWR4KCJhIix7aHJlZjoiaHR0cHM6Ly9yZWRpc2xhYnMuY29tL3RyeS1mcmVlLyIsdGFyZ2V0OiJfYmxhbmsiLHJlbDoibm9vcGVuZXIifSxgUmVkaXMgRW50ZXJwcmlzZSBDbG91ZCBhY2NvdW50YCksYC4gT25jZSB5b3UgY2xpY2sgb24g4oCcR2V0IFN0YXJ0ZWTigJ0sIHlvdSB3aWxsIHJlY2VpdmUgYW4gZW1haWwgd2l0aCBhIGxpbmsgdG8gYWN0aXZhdGUgeW91ciBhY2NvdW50IGFuZCBjb21wbGV0ZSB5b3VyIHNpZ251cCBwcm9jZXNzLmApLG1keCgiaDMiLHsiaWQiOiJzdGVwLTItYWRkLXN1YnNjcmlwdGlvbiJ9LGBTdGVwIDIuIEFkZCBzdWJzY3JpcHRpb25gKSxtZHgoInAiLG51bGwsYE5leHQsIHlvdSB3aWxsIGhhdmUgdG8gYWRkICBSZWRpcyBFbnRlcnByaXNlIENsb3VkIHN1YnNjcmlwdGlvbi4gSW4gdGhlIFJlZGlzIEVudGVycHJpc2UgQ2xvdWQgbWVudSwgY2xpY2sgU3Vic2NyaXB0aW9ucy4gQXQgdGhlIGJvdHRvbSBvZiB0aGUgcGFnZSwgY2xpY2sgdGhlIOKAnCvigJ0gc2lnbi5gKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6Ik15IEltYWdlIixzcmM6cmVxdWlyZSgiIXVybC1sb2FkZXI/bGltaXQ9MTAwMDAmbmFtZT1hc3NldHMvaW1hZ2VzL1tuYW1lXS1baGFzaF0uW2V4dF0mZmFsbGJhY2s9ZmlsZS1sb2FkZXIhLi9pbWFnZXMvc3Vic2NyaXB0aW9uLnBuZyIpLmRlZmF1bHR9KSksbWR4KCJoMyIseyJpZCI6InN0ZXAtMy0tc2VsZWN0LWNsb3VkLXByb3ZpZGVyIn0sYFN0ZXAgMy4gIFNlbGVjdCBjbG91ZCBwcm92aWRlcmApLG1keCgicCIsbnVsbCxgRm9yIHRoZSBjbG91ZCBwcm92aWRlciwgc2VsZWN0IE1pY3Jvc29mdCBBenVyZSBhbmQgRml4ZWQgU2l6ZSBQbGFuKGZvciBkZW1vIHB1cnBvc2UpYCksbWR4KCJwIixudWxsLG1keCgiaW1nIix7YWx0OiJNeSBJbWFnZSIsc3JjOnJlcXVpcmUoIiF1cmwtbG9hZGVyP2xpbWl0PTEwMDAwJm5hbWU9YXNzZXRzL2ltYWdlcy9bbmFtZV0tW2hhc2hdLltleHRdJmZhbGxiYWNrPWZpbGUtbG9hZGVyIS4vaW1hZ2VzL3JlY2xvdWQxLnBuZyIpLmRlZmF1bHR9KSksbWR4KCJoMyIseyJpZCI6InN0ZXAtNC1jcmVhdGUtZGF0YWJhc2UifSxgU3RlcCA0LiBDcmVhdGUgZGF0YWJhc2VgKSxtZHgoInAiLG51bGwsYENsaWNrIENyZWF0ZS4gQWZ0ZXIgeW91IGNyZWF0ZSBhIHN1YnNjcmlwdGlvbiwgeW91IGNhbiBjcmVhdGUgYSBkYXRhYmFzZTpgKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6Ik15IEltYWdlIixzcmM6cmVxdWlyZSgiIXVybC1sb2FkZXI/bGltaXQ9MTAwMDAmbmFtZT1hc3NldHMvaW1hZ2VzL1tuYW1lXS1baGFzaF0uW2V4dF0mZmFsbGJhY2s9ZmlsZS1sb2FkZXIhLi9pbWFnZXMvcmVjbG91ZDIucG5nIikuZGVmYXVsdH0pKSxtZHgoImgzIix7ImlkIjoic3RlcC01LWxhdW5jaC1kYXRhYmFzZSJ9LGBTdGVwIDUuIExhdW5jaCBkYXRhYmFzZWApLG1keCgicCIsbnVsbCxgQ2xpY2sgIkFjdGl2YXRlIiBhbmQgd2FpdCBmb3IgZmV3IHNlY29uZHMgdGlsbCBpdCBnZXRzIGFjdGl2YXRlZC4gT25jZSBmdWxseSBhY3RpdmF0ZWQsIHlvdSB3aWxsIHNlZSB0aGUgZGF0YWJhc2UgZW5kcG9pbnRzIGFzIHNob3duIGJlbG93OmApLG1keCgicCIsbnVsbCxtZHgoImltZyIse2FsdDoiTXkgSW1hZ2UiLHNyYzpyZXF1aXJlKCIhdXJsLWxvYWRlcj9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtoYXNoXS5bZXh0XSZmYWxsYmFjaz1maWxlLWxvYWRlciEuL2ltYWdlcy9yZWNsb3VkMy5wbmciKS5kZWZhdWx0fSkpLG1keCgiaDMiLHsiaWQiOiJuZXh0LXN0ZXAifSxgTmV4dCBTdGVwYCksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLHtwYXJlbnROYW1lOiJsaSIsImhyZWYiOiIvZXhwbG9yZS9yZWRpc2luc2lnaHQvIn0sYENvbm5lY3RpbmcgdG8gdGhlIGRhdGFiYXNlIHVzaW5nIFJlZGlzSW5zaWdodGApKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLHtwYXJlbnROYW1lOiJsaSIsImhyZWYiOiIvaG93dG9zL21vdmllc2RhdGFiYXNlL2dldHRpbmctc3RhcnRlZC8ifSxgSG93IHRvIGxpc3QgJiBzZWFyY2ggTW92aWVzIGRhdGFiYXNlIHVzaW5nIFJlZGlzZWFyY2hgKSkpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}