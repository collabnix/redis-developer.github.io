{"remainingRequest":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/ajeetraina/staging/redis-developer.github.io/docs/develop/java/spring/redis-and-spring-course/lesson_1/index-lesson_1.mdx","dependencies":[{"path":"/Users/ajeetraina/staging/redis-developer.github.io/docs/develop/java/spring/redis-and-spring-course/lesson_1/index-lesson_1.mdx","mtime":1631078110759},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-develop-java-spring-redis-and-spring-course-lesson-1-index-lesson-1-mdx-ad0.json","mtime":1631078548059},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1604063546682},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js","mtime":1611637097949},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1611637102291},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1611637100994}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FqZWV0cmFpbmEvc3RhZ2luZy9yZWRpcy1kZXZlbG9wZXIuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2luZGV4LWxlc3Nvbl8xJyx0aXRsZTonU3ByaW5nIGFuZCBSZWRpczogVXAgYW5kIFJ1bm5pbmcnLHNpZGViYXJfbGFiZWw6J1VwIGFuZCBSdW5uaW5nJyxzbHVnOicvZGV2ZWxvcC9qYXZhL3JlZGlzLWFuZC1zcHJpbmctY291cnNlL2xlc3Nvbl8xJ307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6ImRldmVsb3AvamF2YS9zcHJpbmcvcmVkaXMtYW5kLXNwcmluZy1jb3Vyc2UvbGVzc29uXzEvaW5kZXgtbGVzc29uXzEiLCJpZCI6ImRldmVsb3AvamF2YS9zcHJpbmcvcmVkaXMtYW5kLXNwcmluZy1jb3Vyc2UvbGVzc29uXzEvaW5kZXgtbGVzc29uXzEiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiU3ByaW5nIGFuZCBSZWRpczogVXAgYW5kIFJ1bm5pbmciLCJkZXNjcmlwdGlvbiI6Ik9iamVjdGl2ZXMiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL2RldmVsb3AvamF2YS9zcHJpbmcvcmVkaXMtYW5kLXNwcmluZy1jb3Vyc2UvbGVzc29uXzEvaW5kZXgtbGVzc29uXzEubWR4Iiwic2x1ZyI6Ii9kZXZlbG9wL2phdmEvcmVkaXMtYW5kLXNwcmluZy1jb3Vyc2UvbGVzc29uXzEiLCJwZXJtYWxpbmsiOiIvZGV2ZWxvcC9qYXZhL3JlZGlzLWFuZC1zcHJpbmctY291cnNlL2xlc3Nvbl8xIiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9yZWRpcy1kZXZlbG9wZXIvcmVkaXMtZGV2ZWxvcGVyL2VkaXQvbWFzdGVyL2RvY3MvZGV2ZWxvcC9qYXZhL3NwcmluZy9yZWRpcy1hbmQtc3ByaW5nLWNvdXJzZS9sZXNzb25fMS9pbmRleC1sZXNzb25fMS5tZHgiLCJ2ZXJzaW9uIjoiY3VycmVudCIsInNpZGViYXJfbGFiZWwiOiJVcCBhbmQgUnVubmluZyIsInNpZGViYXIiOiJkb2NzIiwicHJldmlvdXMiOnsidGl0bGUiOiJSZWRpcyBhbmQgU3ByaW5nIENvdXJzZSIsInBlcm1hbGluayI6Ii9kZXZlbG9wL2phdmEvcmVkaXMtYW5kLXNwcmluZy1jb3Vyc2UifSwibmV4dCI6eyJ0aXRsZSI6IkludHJvZHVjaW5nIFNwcmluZyBEYXRhIFJlZGlzIiwicGVybWFsaW5rIjoiL2RldmVsb3AvamF2YS9yZWRpcy1hbmQtc3ByaW5nLWNvdXJzZS9sZXNzb25fMiJ9fTsvKiBAanN4UnVudGltZSBjbGFzc2ljICovIC8qIEBqc3ggbWR4ICovaW1wb3J0IHVzZUJhc2VVcmwgZnJvbSdAZG9jdXNhdXJ1cy91c2VCYXNlVXJsJztleHBvcnQgY29uc3QgdG9jPVt7dmFsdWU6J09iamVjdGl2ZXMnLGlkOidvYmplY3RpdmVzJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidBZ2VuZGEnLGlkOidhZ2VuZGEnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0NyZWF0aW5nIGEgc2tlbGV0b24gc3ByaW5nIGJvb3QgYXBwbGljYXRpb24gZnJvbSBzY3JhdGNoIScsaWQ6J2NyZWF0aW5nLWEtc2tlbGV0b24tc3ByaW5nLWJvb3QtYXBwbGljYXRpb24tZnJvbS1zY3JhdGNoJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidBZGRpbmcgcmVkaXNtb2QgZG9ja2VyIGNvbXBvc2UgR2l0IHN1Ym1vZHVsZScsaWQ6J2FkZGluZy1yZWRpc21vZC1kb2NrZXItY29tcG9zZS1naXQtc3VibW9kdWxlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidBZGRpbmcgcmVkaTJyZWFkLWRhdGEgZ2l0IHN1Ym1vZHVsZScsaWQ6J2FkZGluZy1yZWRpMnJlYWQtZGF0YS1naXQtc3VibW9kdWxlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidRdWljayBzdGFydCBmb3IgdGhvc2UgaW4gYSBodXJyeScsaWQ6J3F1aWNrLXN0YXJ0LWZvci10aG9zZS1pbi1hLWh1cnJ5JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidTdGFydGluZyBhbmQgdGVzdGluZyBSZWRpcycsaWQ6J3N0YXJ0aW5nLWFuZC10ZXN0aW5nLXJlZGlzJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidVc2luZyB0aGUgUmVkaXMgQ0xJJyxpZDondXNpbmctdGhlLXJlZGlzLWNsaScsY2hpbGRyZW46W119LHt2YWx1ZTonVGVzdGluZyBvdXIgUmVkaXMgaW5zdGFuY2UnLGlkOid0ZXN0aW5nLW91ci1yZWRpcy1pbnN0YW5jZScsY2hpbGRyZW46W119LHt2YWx1ZTonR2V0dGluZyBmYW1pbGlhciB3aXRoIFJlZGlzIENvbW1hbmRzJyxpZDonZ2V0dGluZy1mYW1pbGlhci13aXRoLXJlZGlzLWNvbW1hbmRzJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidFeHRlcm5hbCBSZXNvdXJjZXMnLGlkOidleHRlcm5hbC1yZXNvdXJjZXMnLGNoaWxkcmVuOltdfV07Y29uc3QgbGF5b3V0UHJvcHM9e3RvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJoMyIseyJpZCI6Im9iamVjdGl2ZXMifSxgT2JqZWN0aXZlc2ApLG1keCgicCIsbnVsbCxgQ3JlYXRlIHRoZSBza2VsZXRvbiBmb3IgdGhlIGNvdXJzZeKAmXMgU3ByaW5nIEJvb3QgYXBwbGljYXRpb24sIGNvbmZpZ3VyaW5nIGFsbCBkZXBlbmRlbmNpZXMgYW5kIGxhdW5jaGluZyBhIHN1aXRhYmx5IGNvbmZpZ3VyZWQgUmVkaXMgaW5zdGFuY2UgZm9yIHRoZSBjb3Vyc2UuYCksbWR4KCJoMyIseyJpZCI6ImFnZW5kYSJ9LGBBZ2VuZGFgKSxtZHgoInAiLG51bGwsYEluIHRoaXMgbGVzc29uLCB5b3Ugd2lsbCBsZWFybjpgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBIb3cgdG8gY3JlYXRlIGFuZCBjb25maWd1cmUgeW91ciBTcHJpbmcgQm9vdCBhcHBsaWNhdGlvbiB0byB1c2UgUmVkaXNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgSG93IHRvIGFkZCBhIGRvY2tlci1jb21wb3NlIGZpbGUgYXMgYSBHaXQgc3VibW9kdWxlIHRvIHlvdXIgYXBwbGljYXRpb24gdG8gY29uZmlndXJlIGFuZCBydW4gUmVkaXNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgSG93IHRvIGFkZCBhIEdpdCBzdWJtb2R1bGUgd2l0aCB0aGUgYXBwbGljYXRpb27igJlzIHNhbXBsZSByYXcgZGF0YWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBIb3cgdG8gbGF1bmNoIGEgUmVkaXMgaW5zdGFuY2Ugc3VpdGFibGUgZm9yIHRoZSBjb3Vyc2VgKSksbWR4KCJwIixudWxsLGBJZiB5b3UgZ2V0IHN0dWNrOmApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYFRoZSBwcm9ncmVzcyBtYWRlIGluIHRoaXMgbGVzc29uIGlzIGF2YWlsYWJsZSBvbiB0aGUgcmVkaTJyZWFkIGdpdGh1YiByZXBvc2l0b3J5IGF0IGAsbWR4KCJhIix7cGFyZW50TmFtZToibGkiLCJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL3JlZGlzLWRldmVsb3Blci9yZWRpMnJlYWQvdHJlZS9jb3Vyc2UvbWlsZXN0b25lLTEifSxgaHR0cHM6Ly9naXRodWIuY29tL3JlZGlzLWRldmVsb3Blci9yZWRpMnJlYWQvdHJlZS9jb3Vyc2UvbWlsZXN0b25lLTFgKSkpLG1keCgiaDMiLHsiaWQiOiJjcmVhdGluZy1hLXNrZWxldG9uLXNwcmluZy1ib290LWFwcGxpY2F0aW9uLWZyb20tc2NyYXRjaCJ9LGBDcmVhdGluZyBhIHNrZWxldG9uIHNwcmluZyBib290IGFwcGxpY2F0aW9uIGZyb20gc2NyYXRjaCFgKSxtZHgoInAiLG51bGwsYElmIHlvdSB3YW50IHRvIHN0YXJ0IHdpdGggYSBmdWxseSBjb25maWd1cmVkIFNwcmluZyBCb290IGFwcGxpY2F0aW9uIGFuZCB3aXNoIHRvIHNraXAgdGhlIOKAnGZyb20gc2NyYXRjaOKAnSBwYXJ0LApza2lwIHRvIHRoZSBzZWN0aW9uIOKAnFF1aWNrIFN0YXJ0IEZvciBUaG9zZSBJbiBhIEh1cnJ5LuKAnWApLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sYEluIHlvdXIgYnJvd3NlciwgbGF1bmNoIHRoZSBgLG1keCgiYSIse3BhcmVudE5hbWU6ImxpIiwiaHJlZiI6Imh0dHBzOi8vc3RhcnQuc3ByaW5nLmlvIn0sYFNwcmluZyBJbml0aWxpenJgKSksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sYEZpbGwgb3V0IHRoZSBmb3JtIHVzaW5nIHRoZSBmb2xsb3dpbmcgc2V0dGluZ3M6YCkpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYFByb2plY3Q6IE1hdmVuIFByb2plY3RgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgTGFuZ3VhZ2U6IEphdmFgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgU3ByaW5nIEJvb3Q6IDIuNC40YCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYFByb2plY3QgTWV0YWRhdGE6YCxtZHgoInVsIix7cGFyZW50TmFtZToibGkifSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgR3JvdXA6IGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSxgY29tLnJlZGlzbGFicy5lZHVgKSksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEFydGlmYWN0OiBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYHJlZGkycmVhZGApKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgTmFtZTogYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LGByZWRpMnJlYWRgKSksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYERlc2NyaXB0aW9uOiBCb29rc3RvcmUgV2ViIFNlcnZpY2VzIFBvd2VyZWQgYnkgUmVkaXNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgUGFja2FnZSBOYW1lOiBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYGNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZGApKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgUGFja2FnaW5nOiBKQVJgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgSmF2YTogMTFgKSkpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBEZXBlbmRlbmNpZXM6YCxtZHgoInVsIix7cGFyZW50TmFtZToibGkifSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgU3ByaW5nIFdlYmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBTdHJpbmcgRGF0YSBSZWRpcyAoQWNjZXNzICsgRHJpdmVyKWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBTcHJpbmcgU2VjdXJpdHlgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgTG9tYm9rYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYFNwcmluZyBCb290IERldlRvb2xzYCkpKSksbWR4KCJwIixudWxsLGBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUgZm9sbG93aW5nIFVSTDogYCxtZHgoImEiLHtwYXJlbnROYW1lOiJwIiwiaHJlZiI6Imh0dHA6Ly9iaXQubHkvc3ByaW5nLWluaXRsei1yZWRpMnJlYWQifSxgaHR0cDovL2JpdC5seS9zcHJpbmctaW5pdGx6LXJlZGkycmVhZGApLGAgdG8gbGF1bmNoIHRoZSBTcHJpbmcgSW5pdGlsaXpyIGZ1bGx5IGNvbmZpZ3VyZWQgZm9yIHRoZSBwcm9qZWN0LgpDbGljayBvbiBHRU5FUkFURSBhbmQgSW5pdGlhbGl6ciB3aWxsIGdlbmVyYXRlIHRoZSB6aXAgZmlsZSBmb3IgdGhlIHByb2plY3QgYW5kIHByb21wdCB5b3UgdG8gZG93bmxvYWQgaXQgdG8geW91ciBsb2NhbCBtYWNoaW5lLgpVbnppcCB0aGUgZG93bmxvYWRlZCBmaWxlIChuYW1lZCBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgcmVkaTJyZWFkLnppcGApLGApIGluIGEgc3VpdGFibGUgZGlyZWN0b3J5LiBGb3IgZXhhbXBsZSBvbiBhIE1hYzpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0sYGNkIH4vbXktZGlyZWN0b3J5CnVuemlwIH4vRG93bmxvYWRzL3JlZGkycmVhZC56aXAKYCkpLG1keCgiaDMiLHsiaWQiOiJhZGRpbmctcmVkaXNtb2QtZG9ja2VyLWNvbXBvc2UtZ2l0LXN1Ym1vZHVsZSJ9LGBBZGRpbmcgcmVkaXNtb2QgZG9ja2VyIGNvbXBvc2UgR2l0IHN1Ym1vZHVsZWApLG1keCgicCIsbnVsbCxgTm93IHRoYXQgeW91IGhhdmUgZG93bmxvYWRlZCBhbmQgdW56aXBwZWQgdGhlIGdlbmVyYXRlZCBTcHJpbmcgSW5pdGlhbGl6ciBhcHBsaWNhdGlvbiwgY2hhbmdlIGRpcmVjdG9yaWVzIHRvIHRoZSBhcHAgZGlyZWN0b3J5ICguL3JlZGkycmVhZCkgYW5kIGluc3BlY3QgdGhlIGNvbnRlbnRzLmApLG1keCgicCIsbnVsbCxgWW91IHNob3VsZCBoYXZlIGEgZnVsbCBNYXZlbi1iYXNlZCBTcHJpbmcgQm9vdCBhcHBsaWNhdGlvbi4gU2luY2Ugd2UgYXJlIGdvaW5nIHRvIGJlIGFkZGluZyBzdWJtb2R1bGVzLCBsZXTigJlzIHB1dCB0aGUgYXBwbGljYXRpb24gaW4gZ2l0OmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgZWNobyAiIyByZWRpMnJlYWQiID4+IFJFQURNRS5tZApnaXQgaW5pdApnaXQgY29tbWl0IC0tYWxsb3ctZW1wdHkgLW0gImdpdDogaW5pdGlhbCBlbXB0eSBjb21taXQiCmdpdCBhZGQgUkVBRE1FLm1kCmdpdCBjb21taXQgLW0gImZlYXQ6IHNwcmluZyBib290ICsgcmVkaXMgaW5pdGlhbGl6ciBhcHAiCmdpdCBicmFuY2ggLU0gbWFpbgpgKSksbWR4KCJwIixudWxsLGBJbiB0aGUgcHJldmlvdXMgY29kZSBibG9jayB3ZSBpbml0aWFsaXplZCBhIGdpdCByZXBvIGluIG91ciByZWRpMnJlYWQgYXBwbGljYXRpb24gZGlyZWN0b3J5LgpBZGRpbmcgYW4gZW1wdHkgZ2l0IGNvbW1pdCBmYWNpbGl0YXRlcyBmdXR1cmUgR2l0IHJlYmFzZSBvcGVyYXRpb25zLmApLG1keCgicCIsbnVsbCxgTm93IHRoYXQgd2UgaGF2ZSBhIGJhc2ljIFNwcmluZyBhcHBsaWNhdGlvbiwgd2UgbmVlZCB0byBjb25maWd1cmUgYSBSZWRpcyBpbnN0YW5jZSBmb3Igb3VyIGFwcGxpY2F0aW9uLgpXZSd2ZSBjcmVhdGVkIGEgZG9ja2VyLWNvbXBvc2UgZmlsZSBpbiBhIGdpdCByZXBvc2l0b3J5IHRoYXQgeW91IGNhbiBhZGQgYXMgYSBzdWJtb2R1bGUgdG8geW91ciBhcHBsaWNhdGlvbi5gKSxtZHgoInAiLG51bGwsYEdpdCBzdWJtb2R1bGVzLCBpZiB5b3UgaGF2ZW4ndCBlbmNvdW50ZXJlZCB0aGVtLCBhcmUgYSB3YXkgdG8gbmVzdCBhIGdpdCByZXBvIHdpdGhpbiBhbm90aGVyIGdpdCByZXBvLgpSZWFkIHRoZSBgLG1keCgiYSIse3BhcmVudE5hbWU6InAiLCJocmVmIjoiaHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1Ub29scy1TdWJtb2R1bGVzIn0sYEdpdCBkb2N1bWVudGF0aW9uIG9uIHN1Ym1vZHVsZXNgKSxgIHRvIGxlYXJuIG1vcmUuYCksbWR4KCJwIixudWxsLGBZb3XigJlsbCBmaW5kIHRoaXMgZmlsZSBpbiB0aGUgYCxtZHgoImEiLHtwYXJlbnROYW1lOiJwIiwiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS9yZWRpcy1kZXZlbG9wZXIvcmVkaXNtb2QtZG9ja2VyLWNvbXBvc2UifSxgcmVkaXNtb2QtZG9ja2VyLWNvbXBvc2UgcmVwb2ApLGAsCmhvc3RlZCB1bmRlciB0aGUgYCxtZHgoImEiLHtwYXJlbnROYW1lOiJwIiwiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS9yZWRpcy1kZXZlbG9wZXIvIn0sYHJlZGlzLWRldmVsb3BlcmApLGAgb3JnYW5pemF0aW9uIGluIEdpdGh1Yi4KVGhlIFJlcG8gY29udGFpbnMgYSBgLG1keCgiYSIse3BhcmVudE5hbWU6InAiLCJocmVmIjoiaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZSJ9LGBEb2NrZXIgQ29tcG9zZWApLGAgZmlsZSBjb25maWd1cmVkIHRvIHVzZSB0aGUgUmVkaXMgTGFicyDigJxyZWRpc21vZOKAnSBpbWFnZSwgd2hpY2ggaXMgYSBEb2NrZXIgaW1hZ2UKdGhhdCBpbmNsdWRlcyBSZWRpcyBidWlsdCB3aXRoICBzZWxlY3QgUmVkaXMgTGFicyBtb2R1bGVzLiBJbiBwYXJ0aWN1bGFyLCB3ZSB3aWxsIHVzZSB0aGUgYCxtZHgoImEiLHtwYXJlbnROYW1lOiJwIiwiaHJlZiI6Imh0dHBzOi8vcmVkaXNqc29uLmlvIn0sYFJlZGlzSlNPTmApLGAsIGAsbWR4KCJhIix7cGFyZW50TmFtZToicCIsImhyZWYiOiJodHRwczovL3JlZGlzZWFyY2guaW8ifSxgUmVkaVNlYXJjaGApLGAsCmFuZCBgLG1keCgiYSIse3BhcmVudE5hbWU6InAiLCJocmVmIjoiaHR0cHM6Ly9yZWRpc2dyYXBoLmlvIn0sYFJlZGlzR3JhcGhgKSxgIG1vZHVsZXMgd2hpbGUgYnVpbGRpbmcgdGhpcyBhcHBsaWNhdGlvbi5gKSxtZHgoInAiLG51bGwsYE1vZHVsZXMgaW5jbHVkZWQgaW4gdGhlIGNvbnRhaW5lcjpgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSxgUmVkaVNlYXJjaGApLGA6IGEgZnVsbC1mZWF0dXJlZCBzZWFyY2ggZW5naW5lYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LGBSZWRpc0dyYXBoYCksYDogYSBncmFwaCBkYXRhYmFzZWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSxgUmVkaXNUaW1lU2VyaWVzYCksYDogYSB0aW1lLXNlcmllcyBkYXRhYmFzZWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSxgUmVkaXNBSWApLGA6IGEgdGVuc29yIGFuZCBkZWVwIGxlYXJuaW5nIG1vZGVsIHNlcnZlcmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSxgUmVkaXNKU09OYCksYDogYSBuYXRpdmUgSlNPTiBkYXRhIHR5cGVgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sYFJlZGlzQmxvb21gKSxgOiBuYXRpdmUgQmxvb20gYW5kIEN1Y2tvbyBGaWx0ZXIgZGF0YSB0eXBlc2ApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSxgUmVkaXNHZWFyc2ApLGA6IGEgZHluYW1pYyBleGVjdXRpb24gZnJhbWV3b3JrYCkpLG1keCgicCIsbnVsbCxgVG8gYWRkIHRoZSBzdWJtb2R1bGUsIHdlIHVzZSB0aGUgZ2l0IHN1Ym1vZHVsZSBjb21tYW5kIGF0IHRoZSByb290IG9mIHRoZSBwcm9qZWN0OmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgZ2l0IHN1Ym1vZHVsZSBhZGQgZ2l0QGdpdGh1Yi5jb206cmVkaXMtZGV2ZWxvcGVyL3JlZGlzbW9kLWRvY2tlci1jb21wb3NlLmdpdCBkb2NrZXIKYCkpLG1keCgicCIsbnVsbCxgVGhlIGNvbW1hbmQgYWRkcyB0aGUgY29udGVudHMgb2YgdGhlIHBhc3NlZCByZXBvc2l0b3J5IHVuZGVyIHRoZSBmb2xkZXIgbmFtZWQg4oCcZG9ja2VyLOKAnSB3aGljaCB0aGUgY29tbWFuZCB3aWxsIGNyZWF0ZS4KQXQgdGhpcyBwb2ludCB5b3UgY2FuIGNvbW1pdCB0aGUgY2hhbmdlcyBtYWRlIHRvIHRoZSByZXBvc2l0b3J5LmApLG1keCgiaDMiLHsiaWQiOiJhZGRpbmctcmVkaTJyZWFkLWRhdGEtZ2l0LXN1Ym1vZHVsZSJ9LGBBZGRpbmcgcmVkaTJyZWFkLWRhdGEgZ2l0IHN1Ym1vZHVsZWApLG1keCgicCIsbnVsbCxgVGhlIHNhbXBsZSBkYXRhIGZvciB0aGUgYXBwbGljYXRpb24gaXMgYWxzbyBwcm92aWRlZCBhcyBhIHNlcGFyYXRlIEdpdCByZXBvIHRoYXQgd2Ugd2lsbCBhZGQgdG8gb3VyIG1haW4gcmVwb3NpdG9yeTogYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYHJlZGkycmVhZC1kYXRhYCksYC4KVGhlIHJhdyBkYXRhIGZvciBvdXIgYXBwbGljYXRpb24gY29uc2lzdHMgb2YgYSBjb2xsZWN0aW9uIG9mIEpTT04gZG9jdW1lbnRzLCByZXByZXNlbnRpbmcgYm9va3MgYW5kIHVzZXJzLmApLG1keCgiaDQiLHsiaWQiOiJib29rcyJ9LGBCb29rc2ApLG1keCgicCIsbnVsbCxgVGhlIGNvbGxlY3Rpb24gb2YgSlNPTiBkb2N1bWVudHMgZm9yIGJvb2sgZGF0YSBjb21lcyBmcm9tIGAsbWR4KCJhIix7cGFyZW50TmFtZToicCIsImhyZWYiOiJodHRwczovL2Jvb2tzLmdvb2dsZWFwaXMuY29tLiJ9LGBodHRwczovL2Jvb2tzLmdvb2dsZWFwaXMuY29tLmApLGAKRWFjaCBmaWxlIGlzIGxhYmVsbGVkIHdpdGggdGhlIGtleXdvcmQvY2F0ZWdvcnkgdXNlZCB0byBjb25zdHJ1Y3QgaXQKYW5kIGFuIGluY3JlbWVudGluZyBpbnRlZ2VyIChzb21lIGNhdGVnb3JpZXMgaGF2ZSBtb3JlIGJvb2tzIHRoYW4gb3RoZXJzKSByZXN1bHRpbmcgaW4gSlNPTiBzdWNoIGFzOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmFzY3JpcHQifSxgewogICJwYWdlQ291bnQiOjMwNCwKICAidGh1bWJuYWlsIjoiaHR0cDpcXC9cXC9ib29rcy5nb29nbGUuY29tXFwvYm9va3NcXC9jb250ZW50P2lkPXBydFNEd0FBUUJBSiZwcmludHNlYz1mcm9udGNvdmVyJmltZz0xJnpvb209MSZlZGdlPWN1cmwmc291cmNlPWdic19hcGkiLAogICJwcmljZSI6NDIuOTksCiAgInN1YnRpdGxlIjpudWxsLAogICJkZXNjcmlwdGlvbiI6IkRyb3duaW5nIGluIHVubmVjZXNzYXJ5IGNvbXBsZXhpdHksIHVubWFuYWdlZCBzdGF0ZSwgYW5kIHRhbmdsZXMgb2Ygc3BhZ2hldHRpIGNvZGU/IEluIHRoZSBiZXN0IHRyYWRpdGlvbiBvZiBMaXNwLCBDbG9qdXJlIGdldHMgb3V0IG9mIHlvdXIgd2F5IHNvIHlvdSBjYW4gZm9jdXMgb24gZXhwcmVzc2luZyBzaW1wbGUgc29sdXRpb25zIHRvIGhhcmQgcHJvYmxlbXMuIiwKICAibGFuZ3VhZ2UiOiJlbiIsCiAgImN1cnJlbmN5IjoiVVNEIiwKICAiaWQiOiIxNjgwNTA1NzI2IiwKICAidGl0bGUiOiJQcm9ncmFtbWluZyBDbG9qdXJlIiwKICAiaW5mb0xpbmsiOiJodHRwczpcXC9cXC9wbGF5Lmdvb2dsZS5jb21cXC9zdG9yZVxcL2Jvb2tzXFwvZGV0YWlscz9pZD1wcnRTRHdBQVFCQUomc291cmNlPWdic19hcGkiLAogICJhdXRob3JzIjpbCiAgICAiQWxleCBNaWxsZXIiLAogICAgIlN0dWFydCBIYWxsb3dheSIsCiAgICAiQWFyb24gQmVkcmEiCiAgXQp9CmApKSxtZHgoInAiLG51bGwsYFdlIGhhdmUgYW4gSUQgKHRoZSBib29rIElTQk4pLCB0aXRsZSwgc3VidGl0bGUsIGRlc2NyaXB0aW9uLCBwYWdlIGNvdW50LCBwcmljZSwgY3VycmVuY3ksIGxhbmd1YWdlLCB0aHVtYm5haWwgVVJMLCBhIGxpbmsgdG8gbW9yZSBpbmZvcm1hdGlvbiAodGhlIOKAnGluZm9MaW5r4oCdIGZpZWxkKSwgYW5kIGFuIGFycmF5IG9mIGF1dGhvcnMuYCksbWR4KCJoNCIseyJpZCI6InVzZXJzIn0sYFVzZXJzYCksbWR4KCJwIixudWxsLGBUaGUgdXNlciBkYXRhIHdhcyByYW5kb21seSBjcmVhdGVkIHVzaW5nIGAsbWR4KCJhIix7cGFyZW50TmFtZToicCIsImhyZWYiOiJodHRwczovL3JhbmRvbXVzZXIubWUifSxgaHR0cHM6Ly9yYW5kb211c2VyLm1lYCksYCwgd2hpY2ggZ2VuZXJhdGVkIEpTT04gbGlrZTpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1qc29uIn0sYHsKICAicGFzc3dvcmQiOiAiOXlOdklPNEdMQmRib0kiLAogICJuYW1lIjogIkdlb3JnaWEgU3BlbmNlciIsCiAgImlkIjogLTUwMzUwMTkwMDc3MTgzNTc1OTgsCiAgImVtYWlsIjogImdlb3JnaWEuc3BlbmNlckBleGFtcGxlLmNvbSIKfQpgKSksbWR4KCJwIixudWxsLGBUbyBhZGQgdGhlIHN1Ym1vZHVsZSB1c2UgdGhlIGZvbGxvd2luZyBjb21tYW5kOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgZ2l0IHN1Ym1vZHVsZSBhZGQgZ2l0QGdpdGh1Yi5jb206cmVkaXMtZGV2ZWxvcGVyL3JlZGkycmVhZC1kYXRhLmdpdCBzcmMvbWFpbi9yZXNvdXJjZXMvZGF0YQpgKSksbWR4KCJwIixudWxsLGBUaGlzIHN1Ym1vZHVsZSB3aWxsIGxvYWQgdW5kZXIgdGhlIGZvbGRlciBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgc3JjL21haW4vcmVzb3VyY2UvZGF0YWApLGAgd2l0aGluIHRoZSBhcHBsaWNhdGlvbiBmb2xkZXIgdG8gZmFjaWxpdGF0ZSB0aGUgbG9hZGluZyBvZiB0aGUgZGF0YSBmcm9tIHRoZSBjbGFzc3BhdGguIEF0IHRoaXMgcG9pbnQgeW91IGNhbiBjb21taXQgeW91ciB3b3JrIHNvIGZhciB0byB0aGUgZ2l0IHJlcG8uYCksbWR4KCJoMyIseyJpZCI6InF1aWNrLXN0YXJ0LWZvci10aG9zZS1pbi1hLWh1cnJ5In0sYFF1aWNrIHN0YXJ0IGZvciB0aG9zZSBpbiBhIGh1cnJ5YCksbWR4KCJwIixudWxsLGBUbyBza2lwIHBhc3QgYWxsIHRoZSBzdGVwcyBvdXRsaW5lZCBhYm92ZSAoZS5nLiwgaW5pdGlhbGl6aW5nIGEgU3ByaW5nIGFwcCwgYWRkaW5nIHN1Ym1vZHVsZXMgZm9yIGRhdGEsIGV0Yy4pLCBzaW1wbHkgY2xvbmUgdGhlIGFwcGxpY2F0aW9uIHdpdGggdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGAtLXJlY3Vyc2Utc3VibW9kdWxlc2ApLGAgb3B0aW9uLCBhbmQgY2hlY2sgb3V0IHRoZSBicmFuY2ggbmFtZWQgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGNvdXJzZS9taWxlc3RvbmUtMWApKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0sYGdpdCBjbG9uZSAtLWJyYW5jaCBjb3Vyc2UvbWlsZXN0b25lLTEgZ2l0QGdpdGh1Yi5jb206cmVkaXMtZGV2ZWxvcGVyL3JlZGkycmVhZC5naXQgLS1yZWN1cnNlLXN1Ym1vZHVsZQpgKSksbWR4KCJoMyIseyJpZCI6InN0YXJ0aW5nLWFuZC10ZXN0aW5nLXJlZGlzIn0sYFN0YXJ0aW5nIGFuZCB0ZXN0aW5nIFJlZGlzYCksbWR4KCJwIixudWxsLGBMZXQncyBvcGVuIGEgdGVybWluYWwgd2luZG93IGFuZCBjaGFuZ2UgZGlyZWN0b3JpZXMgdG8gdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGAvZG9ja2VyYCksYCBkaXJlY3RvcnkgdW5kZXIgb3VyIHByb2plY3TigJlzIHJlcG9zaXRvcnkuClRvIHN0YXJ0IG91ciBEb2NrZXIgUmVkaXMgaW1hZ2UsIHdl4oCZbGwgdXNlIHRoZSBkb2NrZXItY29tcG9zZSBjb21tYW5kIGFzIGZvbGxvd3M6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9LGBkb2NrZXItY29tcG9zZSB1cApgKSksbWR4KCJwIixudWxsLGBZb3Ugc2hvdWxkIHNlZSBvdXRwdXQgc2ltaWxhciB0byB0aGlzOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgQ3JlYXRpbmcgbmV0d29yayAicmVkaTJyZWFkX2RlZmF1bHQiIHdpdGggdGhlIGRlZmF1bHQgZHJpdmVyCkNyZWF0aW5nIHJlZGkycmVhZF9yZWRpc18xIC4uLiBkb25lCkF0dGFjaGluZyB0byByZWRpMnJlYWRfcmVkaXNfMQpyZWRpc18xICB8IDE6QyAwMSBBcHIgMjAyMSAwNToxOToyNy41OTMgIyBvTzBPb08wT29PME9vIFJlZGlzIGlzIHN0YXJ0aW5nIG9PME9vTzBPb08wT28KcmVkaXNfMSAgfCAxOkMgMDEgQXByIDIwMjEgMDU6MTk6MjcuNTkzICMgUmVkaXMgdmVyc2lvbj02LjAuMSwgYml0cz02NCwgY29tbWl0PTAwMDAwMDAwLCBtb2RpZmllZD0wLCBwaWQ9MSwganVzdCBzdGFydGVkCnJlZGlzXzEgIHwgMTpDIDAxIEFwciAyMDIxIDA1OjE5OjI3LjU5MyAjIENvbmZpZ3VyYXRpb24gbG9hZGVkCnJlZGlzXzEgIHwgMTpNIDAxIEFwciAyMDIxIDA1OjE5OjI3LjYwMCAqIFJ1bm5pbmcgbW9kZT1zdGFuZGFsb25lLCBwb3J0PTYzNzkuCi4uLgpgKSksbWR4KCJoMyIseyJpZCI6InVzaW5nLXRoZS1yZWRpcy1jbGkifSxgVXNpbmcgdGhlIFJlZGlzIENMSWApLG1keCgicCIsbnVsbCxgVGhlIGAsbWR4KCJhIix7cGFyZW50TmFtZToicCIsImhyZWYiOiJodHRwczovL3JlZGlzLmlvL3RvcGljcy9yZWRpc2NsaSJ9LGByZWRpcy1jbGlgKSxgIGlzIHRoZSBSZWRpcyBjb21tYW5kIGxpbmUgaW50ZXJmYWNlLCBhIHNpbXBsZSBwcm9ncmFtIHRoYXQgYWxsb3dzIHlvdSB0byBzZW5kIGNvbW1hbmRzIHRvIFJlZGlzLCBhbmQgcmVhZCB0aGUgcmVwbGllcyBzZW50IGJ5IHRoZSBzZXJ2ZXIsIGRpcmVjdGx5IGZyb20gdGhlIHRlcm1pbmFsLmApLG1keCgiaDQiLHsiaWQiOiJsYXVuY2hpbmctcmVkaXMtY2xpLWluLXRoZS1jb250YWluZXIifSxgTGF1bmNoaW5nIFJlZGlzIENMSSBpbiB0aGUgY29udGFpbmVyYCksbWR4KCJwIixudWxsLGBGaW5kIHRoZSBjb250YWluZXIgbmFtZSB1c2luZyBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgZG9ja2VyIGNvbnRhaW5lciBsc2ApLGA6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9LGAkIGRvY2tlciBjb250YWluZXIgbHMKQ09OVEFJTkVSIElEICAgSU1BR0UgICAgICAgICAgICAgICAgQ09NTUFORCAgICAgICAgICAgICAgICAgIENSRUFURUQgICAgICAgICAgU1RBVFVTICAgICAgICAgUE9SVFMgICAgICAgICAgICAgICAgICAgIE5BTUVTCjBmOTllYTM1YjljMSAgIHJlZGlzbGFicy9yZWRpc21vZCAgICJyZWRpcy1zZXJ2ZXIgLS1sb2Fk4oCmIiAgIDU3IG1pbnV0ZXMgYWdvICAgVXAgNyBtaW51dGVzICAgMC4wLjAuMDo2Mzc5LT42Mzc5L3RjcCAgIGRvY2tlcl9yZWRpc18xCmApKSxtZHgoInAiLG51bGwsYFdpdGggdGhlIG5hbWUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGRvY2tlcl9yZWRpc18xYCksYCB3ZSBjYW4gcnVuIGJhc2ggaW4gdGhlIGNvbnRhaW5lciBhbmQgdGhlbiBzdGFydCB0aGUgcmVkaXMtY2xpOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgJCBkb2NrZXIgZXhlYyAtaXQgZG9ja2VyX3JlZGlzXzEgYmFzaApyb290QDBmOTllYTM1YjljMTovZGF0YSMgcmVkaXMtY2xpCjEyNy4wLjAuMTo2Mzc5PgpgKSksbWR4KCJoNCIseyJpZCI6ImxhdW5jaGluZy1yZWRpcy1jbGktbG9jYWxseSJ9LGBMYXVuY2hpbmcgUmVkaXMgQ0xJIExvY2FsbHlgKSxtZHgoInAiLG51bGwsYElmIHlvdSBhbHJlYWR5IGhhdmUgdGhlIFJlZGlzIENMSSBpbnN0YWxsZWQgbG9jYWxseSwgeW91IGNhbiBsYXVuY2ggaXQgYnkgc2ltcGx5IGVudGVyaW5nOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgJCByZWRpcy1jbGkKMTI3LjAuMC4xOjYzNzk+CmApKSxtZHgoImgzIix7ImlkIjoidGVzdGluZy1vdXItcmVkaXMtaW5zdGFuY2UifSxgVGVzdGluZyBvdXIgUmVkaXMgaW5zdGFuY2VgKSxtZHgoInAiLG51bGwsYFRoZSBtb3N0IGJhc2ljIG9mIGNvbW1hbmRzLCBQSU5HIGlzIHVzZWQgdG8g4oCccGluZ+KAnSB0aGUgc2VydmVyLiBJZiB3ZSBnZXQgYSByZXNwb25zZSBiYWNrLCB3ZSBrbm93IHRoYXQgdGhlIFJlZGlzIHNlcnZlciBpcyBhbGl2ZSBhbmQga2lja2luZzpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0sYDEyNy4wLjAuMTo2Mzc5PiBQSU5HClBPTkcKMTI3LjAuMC4xOjYzNzk+IFBJTkcgTWFyY28hCiJNYXJjbyEiCjEyNy4wLjAuMTo2Mzc5PgpgKSksbWR4KCJoNCIseyJpZCI6ImNoZWNraW5nLWZvci10aGUtaW5zdGFsbGVkLXJlZGlzLW1vZHVsZXMifSxgQ2hlY2tpbmcgZm9yIHRoZSBpbnN0YWxsZWQgUmVkaXMgbW9kdWxlc2ApLG1keCgicCIsbnVsbCxgU2luY2Ugd2UgaGF2ZSBhIGN1c3RvbWl6ZWQgUmVkaXMgaW5zdGFuY2Ugd2hpY2ggaW5jbHVkZXMgc2V2ZXJhbCBSZWRpcyBtb2R1bGVzLCB3ZSBjYW4gY2hlY2sgZm9yIHdoaWNoIG1vZHVsZXMgaGF2ZSBiZWVuIGluc3RhbGxlZDpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0sYDEyNy4wLjAuMTo2Mzc5PiBNT0RVTEUgTElTVAoxKSAxKSAibmFtZSIKICAgMikgInNlYXJjaCIKICAgMykgInZlciIKICAgNCkgKGludGVnZXIpIDIwMDA2CjIpIDEpICJuYW1lIgogICAyKSAiZ3JhcGgiCiAgIDMpICJ2ZXIiCiAgIDQpIChpbnRlZ2VyKSAyMDIxNQozKSAxKSAibmFtZSIKICAgMikgIlJlSlNPTiIKICAgMykgInZlciIKICAgNCkgKGludGVnZXIpIDEwMDA3CjQpIDEpICJuYW1lIgogICAyKSAiYmYiCiAgIDMpICJ2ZXIiCiAgIDQpIChpbnRlZ2VyKSAyMDIwNQo1KSAxKSAibmFtZSIKICAgMikgInRpbWVzZXJpZXMiCiAgIDMpICJ2ZXIiCiAgIDQpIChpbnRlZ2VyKSAxMDQwOAo2KSAxKSAibmFtZSIKICAgMikgImFpIgogICAzKSAidmVyIgogICA0KSAoaW50ZWdlcikgMTAwMDIKNykgMSkgIm5hbWUiCiAgIDIpICJyZyIKICAgMykgInZlciIKICAgNCkgKGludGVnZXIpIDEwMDA2CmApKSxtZHgoImgzIix7ImlkIjoiZ2V0dGluZy1mYW1pbGlhci13aXRoLXJlZGlzLWNvbW1hbmRzIn0sYEdldHRpbmcgZmFtaWxpYXIgd2l0aCBSZWRpcyBDb21tYW5kc2ApLG1keCgicCIsbnVsbCxgS2V5cyBhcmUgdW5pcXVlIGlkZW50aWZpZXJzLCB3aG9zZSB2YWx1ZSBjYW4gYmUgYW55IG9uZSBvZiB0aGUgZGF0YSB0eXBlcyB0aGF0IFJlZGlzIHN1cHBvcnRzLiAgVGhlc2UgZGF0YSB0eXBlcyByYW5nZSBmcm9tIHNpbXBsZSBTdHJpbmdzLCB0byBMaXN0cywgU2V0cywgYW5kIGV2ZW4gU3RyZWFtcy4gIEVhY2ggZGF0YSB0eXBlIGhhcyBpdHMgb3duIHNldCBvZiBiZWhhdmlvcnMgYW5kIGNvbW1hbmRzIGFzc29jaWF0ZWQgd2l0aCBpdC5gKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0sYDEyNy4wLjAuMTo2Mzc5PiBTRVQgbXluYW1lICJCcmlhbiIKT0sKMTI3LjAuMC4xOjYzNzk+IEdFVCBteW5hbWUKIkJyaWFuIgoxMjcuMC4wLjE6NjM3OT4gVFlQRSBteW5hbWUKc3RyaW5nCmApKSxtZHgoInAiLG51bGwsYEtleXMgaW4gYSBSZWRpcyBkYXRhYmFzZSBhcmUgZGlzdHJpYnV0ZWQgaW4gYSBmbGF0IGtleXNwYWNlLiBSZWRpcyBkb2VzIG5vdCBlbmZvcmNlIGEgc2NoZW1hIG9yIG5hbWluZyBwb2xpY3kgZm9yIGtleXMuClRoaXMgcHJvdmlkZXMgZ3JlYXQgZmxleGliaWxpdHksIHdpdGggdGhlIG9yZ2FuaXphdGlvbiBvZiB0aGUga2V5c3BhY2UgYmVpbmcgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBkZXZlbG9wZXIuCldlJ2xsIGxvb2sgYXQgd2F5cyBvZiBtYW5hZ2luZyB0aGlzIGxhdGVyIGluIHRoZSBjb3Vyc2UuClJlZGlzIGlzIGZhbW91cyBmb3IgYmVpbmcgYW4gZXh0cmVtZWx5IGZhc3QgZGF0YWJhc2UuClRoaXMgc3BlZWQgY29tZXMgZnJvbSB0aGUgZmFjdCB0aGF0IGl0IHN0b3JlcyBhbmQgc2VydmVzIGFsbCBkYXRhIGZyb20gUkFNIHJhdGhlciB0aGFuIGRpc2suClJlZGlzIGlzIGR1cmFibGUsIHNvIHlvdXIgZGF0YSB3aWxsIGJlIHBlcnNpc3RlZCBidXQgYWxsIHJlYWRzIHdpbGwgYmUgZnJvbSBhIGNvcHkgb2YgdGhlIGRhdGEgaGVsZCBpbiBSQU0uClRoaXMgbWFrZXMgUmVkaXMgYW4gZXhjZWxsZW50IGNob2ljZSBmb3IgYXBwbGljYXRpb25zIHRoYXQgcmVxdWlyZSByZWFsIHRpbWUgZGF0YSBhY2Nlc3MuYCksbWR4KCJoMyIseyJpZCI6ImV4dGVybmFsLXJlc291cmNlcyJ9LGBFeHRlcm5hbCBSZXNvdXJjZXNgKSxtZHgoInAiLG51bGwsYEhlcmUncyBzb21lIHJlc291cmNlcyB0aGF0IHdlIHRoaW5rIHdpbGwgYmUgdXNlZnVsIHRvIHlvdSBhcyB5b3UgZGlzY292ZXIgUmVkaXM6YCksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLHtwYXJlbnROYW1lOiJsaSIsImhyZWYiOiJodHRwczovL3JlZGlzLmlvLyJ9LGByZWRpcy5pb2ApLGAgLSB0aGUgb2ZmaWNpYWwgd2Vic2l0ZSBvZiBvcGVuIHNvdXJjZSBSZWRpcy5gKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImEiLHtwYXJlbnROYW1lOiJsaSIsImhyZWYiOiJodHRwczovL3JlZGlzbGFicy5jb20vcmVkaXMtZW50ZXJwcmlzZS1jbG91ZC9vdmVydmlldy8ifSxgUmVkaXMgRW50ZXJwcmlzZSBDbG91ZGApLGAgLSBhIGZ1bGx5IG1hbmFnZWQgY2xvdWQgc2VydmljZSBmcm9tIFJlZGlzIExhYnMgd2l0aCBhIGZyZWUgcGxhbiBmb3IgZ2V0dGluZyBzdGFydGVkLmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBUaGUgb2ZmaWNpYWwgYCxtZHgoImEiLHtwYXJlbnROYW1lOiJsaSIsImhyZWYiOiJodHRwczovL2h1Yi5kb2NrZXIuY29tL18vcmVkaXMvIn0sYFJlZGlzIERvY2tlciBpbWFnZWApLGAuYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEZvciBhIGNvbXByZWhlbnNpdmUgaW50cm9kdWN0aW9uIHRvIFJlZGlzLCB3ZSByZWNvbW1lbmQgdGFraW5nIGEgbG9vayBhdCB0aGUgYCxtZHgoImEiLHtwYXJlbnROYW1lOiJsaSIsImhyZWYiOiJodHRwczovL3VuaXZlcnNpdHkucmVkaXNsYWJzLmNvbS9jb3Vyc2VzL3J1MTAxLyJ9LGBSVTEwMTogSW50cm9kdWN0aW9uIHRvIFJlZGlzIERhdGEgU3RydWN0dXJlc2ApLGAgY291cnNlIGF0IFJlZGlzIFVuaXZlcnNpdHkuIEluIHRoaXMgZnJlZSBvbmxpbmUgY291cnNlLCB5b3XigJlsbCBsZWFybiBhYm91dCB0aGUgZGF0YSBzdHJ1Y3R1cmVzIGluIFJlZGlzLCBhbmQgeW914oCZbGwgc2VlIGhvdyB0byBwcmFjdGljYWxseSBhcHBseSB0aGVtIGluIHRoZSByZWFsIHdvcmxkLmApKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}