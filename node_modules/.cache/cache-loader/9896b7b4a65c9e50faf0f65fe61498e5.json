{"remainingRequest":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/ajeetraina/staging/redis-developer.github.io/docs/howtos/redisgraphmovies/index-redisgraphmovies.mdx","dependencies":[{"path":"/Users/ajeetraina/staging/redis-developer.github.io/docs/howtos/redisgraphmovies/index-redisgraphmovies.mdx","mtime":1631078111007},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-howtos-redisgraphmovies-index-redisgraphmovies-mdx-ab3.json","mtime":1631078548062},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1604063546682},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js","mtime":1611637097949},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1611637102291},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1611637100994}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}