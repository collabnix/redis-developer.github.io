{"remainingRequest":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/ajeetraina/staging/redis-developer.github.io/docs/develop/node/node-crash-course/sampleapplicationoverview/index-sampleapplicationoverview.mdx","dependencies":[{"path":"/Users/ajeetraina/staging/redis-developer.github.io/docs/develop/node/node-crash-course/sampleapplicationoverview/index-sampleapplicationoverview.mdx","mtime":1631078110789},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-develop-node-node-crash-course-sampleapplicationoverview-index-sampleapplicationoverview-mdx-b70.json","mtime":1631078548061},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1604063546682},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js","mtime":1611637097949},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1611637102291},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1611637100994}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FqZWV0cmFpbmEvc3RhZ2luZy9yZWRpcy1kZXZlbG9wZXIuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSIvVXNlcnMvYWplZXRyYWluYS9zdGFnaW5nL3JlZGlzLWRldmVsb3Blci5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiO3ZhciBfZXhjbHVkZWQ9WyJjb21wb25lbnRzIl07aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgdmFyIGZyb250TWF0dGVyPXtpZDonaW5kZXgtc2FtcGxlYXBwbGljYXRpb25vdmVydmlldycsdGl0bGU6J1NhbXBsZSBBcHBsaWNhdGlvbiBPdmVydmlldycsc2lkZWJhcl9sYWJlbDonU2FtcGxlIEFwcGxpY2F0aW9uIE92ZXJ2aWV3JyxzbHVnOicvZGV2ZWxvcC9ub2RlL25vZGVjcmFzaGNvdXJzZS9zYW1wbGVhcHBsaWNhdGlvbm92ZXJ2aWV3J307ZXhwb3J0IHZhciBtZXRhZGF0YT17InVudmVyc2lvbmVkSWQiOiJkZXZlbG9wL25vZGUvbm9kZS1jcmFzaC1jb3Vyc2Uvc2FtcGxlYXBwbGljYXRpb25vdmVydmlldy9pbmRleC1zYW1wbGVhcHBsaWNhdGlvbm92ZXJ2aWV3IiwiaWQiOiJkZXZlbG9wL25vZGUvbm9kZS1jcmFzaC1jb3Vyc2Uvc2FtcGxlYXBwbGljYXRpb25vdmVydmlldy9pbmRleC1zYW1wbGVhcHBsaWNhdGlvbm92ZXJ2aWV3IiwiaXNEb2NzSG9tZVBhZ2UiOmZhbHNlLCJ0aXRsZSI6IlNhbXBsZSBBcHBsaWNhdGlvbiBPdmVydmlldyIsImRlc2NyaXB0aW9uIjoiSW4gdGhpcyBjb3Vyc2UsIHdlJ2xsIGxvb2sgYXQgaG93IHRvIHVzZSBSZWRpcyBhcyBhIGRhdGEgc3RvcmUgYW5kIGNhY2hlIGluIHRoZSBjb250ZXh0IG9mIGEgc2FtcGxlIGFwcGxpY2F0aW9uLiAgSW1hZ2luZSB0aGF0IHdlJ3JlIGJ1aWxkaW5nIGEgc29ydCBvZiBzb2NpYWwgbmV0d29yayBhcHBsaWNhdGlvbiB3aGVyZSB1c2VycyBjYW4gXCJjaGVjayBpblwiIGF0IGRpZmZlcmVudCBsb2NhdGlvbnMgYW5kIGdpdmUgdGhlbSBhIHN0YXIgcmF0aW5n4oCmIGZyb20gMCBmb3IgYW4gYXdmdWwgZXhwZXJpZW5jZSB0aHJvdWdoIDUgdG8gcmVwb3J0IHRoYXQgdGhleSBoYWQgdGhlIGJlc3QgdGltZSBldmVyIHRoZXJlISIsInNvdXJjZSI6IkBzaXRlL2RvY3MvZGV2ZWxvcC9ub2RlL25vZGUtY3Jhc2gtY291cnNlL3NhbXBsZWFwcGxpY2F0aW9ub3ZlcnZpZXcvaW5kZXgtc2FtcGxlYXBwbGljYXRpb25vdmVydmlldy5tZHgiLCJzbHVnIjoiL2RldmVsb3Avbm9kZS9ub2RlY3Jhc2hjb3Vyc2Uvc2FtcGxlYXBwbGljYXRpb25vdmVydmlldyIsInBlcm1hbGluayI6Ii9kZXZlbG9wL25vZGUvbm9kZWNyYXNoY291cnNlL3NhbXBsZWFwcGxpY2F0aW9ub3ZlcnZpZXciLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL3JlZGlzLWRldmVsb3Blci9yZWRpcy1kZXZlbG9wZXIvZWRpdC9tYXN0ZXIvZG9jcy9kZXZlbG9wL25vZGUvbm9kZS1jcmFzaC1jb3Vyc2Uvc2FtcGxlYXBwbGljYXRpb25vdmVydmlldy9pbmRleC1zYW1wbGVhcHBsaWNhdGlvbm92ZXJ2aWV3Lm1keCIsInZlcnNpb24iOiJjdXJyZW50Iiwic2lkZWJhcl9sYWJlbCI6IlNhbXBsZSBBcHBsaWNhdGlvbiBPdmVydmlldyIsInNpZGViYXIiOiJkb2NzIiwicHJldmlvdXMiOnsidGl0bGUiOiJJbnRyb2R1Y2luZyBSZWRpc0luc2lnaHQiLCJwZXJtYWxpbmsiOiIvZGV2ZWxvcC9ub2RlL25vZGVjcmFzaGNvdXJzZS9pbnRyb2R1Y2luZ3JlZGlzaW5zaWdodCJ9LCJuZXh0Ijp7InRpdGxlIjoiVXAgYW5kIFJ1bm5pbmcgd2l0aCB0aGUgU2FtcGxlIEFwcGxpY2F0aW9uIiwicGVybWFsaW5rIjoiL2RldmVsb3Avbm9kZS9ub2RlY3Jhc2hjb3Vyc2UvcnVubmluZ3RoZWFwcGxpY2F0aW9uIn19Oy8qIEBqc3hSdW50aW1lIGNsYXNzaWMgKi8gLyogQGpzeCBtZHggKi9pbXBvcnQgdXNlQmFzZVVybCBmcm9tJ0Bkb2N1c2F1cnVzL3VzZUJhc2VVcmwnO2V4cG9ydCB2YXIgdG9jPVt7dmFsdWU6J1VzZXJzJyxpZDondXNlcnMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0xvY2F0aW9ucycsaWQ6J2xvY2F0aW9ucycsY2hpbGRyZW46W119LHt2YWx1ZTonQ2hlY2tpbnMnLGlkOidjaGVja2lucycsY2hpbGRyZW46W119LHt2YWx1ZTonQXBwbGljYXRpb24gQXJjaGl0ZWN0dXJlJyxpZDonYXBwbGljYXRpb24tYXJjaGl0ZWN0dXJlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidFeHRlcm5hbCBSZXNvdXJzZXMnLGlkOidleHRlcm5hbC1yZXNvdXJzZXMnLGNoaWxkcmVuOltdfV07dmFyIGxheW91dFByb3BzPXt0b2M6dG9jfTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLF9leGNsdWRlZCk7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJkaXYiLHtjbGFzczoidGV4dC0tY2VudGVyIn0sbWR4KCJpZnJhbWUiLHt3aWR0aDoiNTYwIixoZWlnaHQ6IjMxNSIsc3JjOiJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9iUFpYNFpKQU5LNCIsZnJhbWVib3JkZXI6IjAiLGFsbG93OiJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIixhbGxvd2Z1bGxzY3JlZW46dHJ1ZX0pKSxtZHgoInAiLG51bGwsIkluIHRoaXMgY291cnNlLCB3ZSdsbCBsb29rIGF0IGhvdyB0byB1c2UgUmVkaXMgYXMgYSBkYXRhIHN0b3JlIGFuZCBjYWNoZSBpbiB0aGUgY29udGV4dCBvZiBhIHNhbXBsZSBhcHBsaWNhdGlvbi4gIEltYWdpbmUgdGhhdCB3ZSdyZSBidWlsZGluZyBhIHNvcnQgb2Ygc29jaWFsIG5ldHdvcmsgYXBwbGljYXRpb24gd2hlcmUgdXNlcnMgY2FuIFwiY2hlY2sgaW5cIiBhdCBkaWZmZXJlbnQgbG9jYXRpb25zIGFuZCBnaXZlIHRoZW0gYSBzdGFyIHJhdGluZ1x1MjAyNiBmcm9tIDAgZm9yIGFuIGF3ZnVsIGV4cGVyaWVuY2UgdGhyb3VnaCA1IHRvIHJlcG9ydCB0aGF0IHRoZXkgaGFkIHRoZSBiZXN0IHRpbWUgZXZlciB0aGVyZSEiKSxtZHgoInAiLG51bGwsIldoZW4gZGVzaWduaW5nIG91ciBhcHBsaWNhdGlvbiwgd2UgZGV0ZXJtaW5lZCB0aGF0IHRoZXJlJ3MgYSBuZWVkIHRvIG1hbmFnZSBkYXRhIGFib3V0IHRocmVlIG1haW4gZW50aXRpZXM6IiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiVXNlcnMiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTG9jYXRpb25zIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkNoZWNraW5zIikpLG1keCgicCIsbnVsbCwiTGV0J3MgbG9vayBhdCB3aGF0IHdlJ3JlIHN0b3JpbmcgYWJvdXQgZWFjaCBvZiB0aGVzZSBlbnRpdGllcy4gIEFzIHdlJ3JlIHVzaW5nIFJlZGlzIGFzIG91ciBvbmx5IGRhdGEgc3RvcmUsIHdlJ2xsIGFsc28gY29uc2lkZXIgaG93IHRoZXkgbWFwIHRvIFJlZGlzIGRhdGEgdHlwZXMuLi4iKSxtZHgoImgyIix7ImlkIjoidXNlcnMifSwiVXNlcnMiKSxtZHgoInAiLG51bGwsIldlJ2xsIHJlcHJlc2VudCBlYWNoIHVzZXIgYXMgYSBmbGF0IG1hcCBvZiBuYW1lL3ZhbHVlIHBhaXJzIHdpdGggbm8gbmVzdGVkIG9iamVjdHMuICBBcyB3ZSdsbCBzZWUgbGF0ZXIgb24sIHRoaXMgbWFwcyBuaWNlbHkgdG8gYSBSZWRpcyBIYXNoLiAgSGVyZSdzIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgc2NoZW1hIHdlJ2xsIHVzZSB0byByZXByZXNlbnQgZWFjaCB1c2VyOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWpzb24ifSwie1xuICBcImlkXCI6IDk5LFxuICBcImZpcnN0TmFtZVwiOiBcIklzYWJlbGxhXCIsXG4gIFwibGFzdE5hbWVcIjogXCJQZWRlcnNlblwiLFxuICBcImVtYWlsXCI6IFwiaXNhYmVsbGEucGVkZXJzZW5AZXhhbXBsZS5jb21cIixcbiAgXCJwYXNzd29yZFwiOiBcInh4eHh4eDFcIixcbiAgXCJudW1DaGVja2luc1wiOiA4MDczLFxuICBcImxhc3RDaGVja2luXCI6IDE1NDQzNzIzMjY4OTMsXG4gIFwibGFzdFNlZW5BdFwiOiAxMzhcbn1cbiIpKSxtZHgoInAiLG51bGwsIldlJ3ZlIGdpdmVuIGVhY2ggdXNlciBhbiBJRCBhbmQgd2UncmUgc3RvcmluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGVtLiAgQWxzbywgd2VcdTIwMTlsbCBlbmNyeXB0IHRoZWlyIHBhc3N3b3JkIHVzaW5nIGJjcnlwdCB3aGVuIHdlIGxvYWQgdGhlIHNhbXBsZSBkYXRhIGludG8gUmVkaXMuIiksbWR4KCJwIixudWxsLCJGb3IgZWFjaCB1c2VyLCB3ZSdsbCBrZWVwIHRyYWNrIG9mIHRoZSB0b3RhbCBudW1iZXIgb2YgY2hlY2tpbnMgdGhhdCB0aGV5J3ZlIHN1Ym1pdHRlZCB0byB0aGUgc3lzdGVtLCBhbmQgdGhlIHRpbWVzdGFtcCBhbmQgbG9jYXRpb24gSUQgb2YgdGhlaXIgbW9zdCByZWNlbnQgY2hlY2tpbiBzbyB0aGF0IHdlIGtub3cgd2hlcmUgYW5kIHdoZW4gdGhleSBsYXN0IHVzZWQgdGhlIHN5c3RlbS4iKSxtZHgoImgyIix7ImlkIjoibG9jYXRpb25zIn0sIkxvY2F0aW9ucyIpLG1keCgicCIsbnVsbCwiRm9yIGVhY2ggbG9jYXRpb24gdGhhdCB1c2VycyBjYW4gY2hlY2sgaW4gYXQsIHdlJ3JlIGdvaW5nIHRvIG1haW50YWluIHR3byB0eXBlcyBvZiBkYXRhLiAgVGhlIGZpcnN0IG9mIHRoZXNlIGlzIGFsc28gYSBmbGF0IG1hcCBvZiBuYW1lL3ZhbHVlIHBhaXJzLCBjb250YWluaW5nIHN1bW1hcnkgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxvY2F0aW9uOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWpzb24ifSwie1xuICBcImlkXCI6IDEzOCxcbiAgXCJuYW1lXCI6IFwiU3RhY2V5J3MgQ291bnRyeSBCYWtlaG91c2VcIixcbiAgXCJjYXRlZ29yeVwiOiBcInJlc3RhdXJhbnRcIixcbiAgXCJsb2NhdGlvblwiOiBcIi0xMjIuMTk1NDQ3LDM3Ljc3NDYzNlwiLFxuICBcIm51bUNoZWNraW5zXCI6IDE3MCxcbiAgXCJudW1TdGFyc1wiOiA3MjQsXG4gIFwiYXZlcmFnZVN0YXJzXCI6IDRcbn1cbiIpKSxtZHgoInAiLG51bGwsIldlJ3ZlIGdpdmVuIGVhY2ggbG9jYXRpb24gYW4gSUQgYW5kIGEgY2F0ZWdvcnlcdTIwMTR3ZSdsbCB1c2UgdGhlIGNhdGVnb3J5IHRvIHNlYXJjaCBmb3IgbG9jYXRpb25zIGJ5IHR5cGUgbGF0ZXIgb24uICBUaGUgXCJsb2NhdGlvblwiIGZpZWxkIHN0b3JlcyB0aGUgY29vcmRpbmF0ZXMgaW4gbG9uZ2l0dWRlLCBsYXRpdHVkZSBmb3JtYXRcdTIwMjYgdGhpcyBpcyB0aGUgb3Bwb3NpdGUgZnJvbSB0aGUgdXN1YWwgbGF0aXR1ZGUsIGxvbmdpdHVkZSBmb3JtYXQuIFdlJ2xsIHNlZSBob3cgdG8gdXNlIHRoaXMgdG8gcGVyZm9ybSBnZW9zcGF0aWFsIHNlYXJjaGVzIGxhdGVyIHdoZW4gd2UgbG9vayBhdCB0aGUgUmVkaVNlYXJjaCBtb2R1bGUuIiksbWR4KCJwIixudWxsLCJGb3IgZWFjaCBsb2NhdGlvbiwgd2UncmUgYWxzbyBzdG9yaW5nIHRoZSB0b3RhbCBudW1iZXIgb2YgY2hlY2tpbnMgdGhhdCBoYXZlIGJlZW4gcmVjb3JkZWQgdGhlcmUgYnkgYWxsIG9mIG91ciB1c2VycywgdGhlIHRvdGFsIG51bWJlciBvZiBzdGFycyB0aGF0IHRob3NlIGNoZWNraW5zIGdhdmUgdGhlIGxvY2F0aW9uLCBhbmQgYW4gYXZlcmFnZSBzdGFyIHJhdGluZyBwZXIgY2hlY2tpbiBmb3IgdGhlIGxvY2F0aW9uLiIpLG1keCgicCIsbnVsbCwiVGhlIHNlY29uZCB0eXBlIG9mIGRhdGEgdGhhdCB3ZSB3YW50IHRvIG1haW50YWluIGZvciBlYWNoIGxvY2F0aW9uIGlzIHdoYXQgd2UnbGwgY2FsbCBcImxvY2F0aW9uIGRldGFpbHNcIi4gIFRoZXNlIHRha2UgdGhlIGZvcm0gb2YgbW9yZSBzdHJ1Y3R1cmVkIEpTT04gZG9jdW1lbnRzIHdpdGggbmVzdGVkIG9iamVjdHMgYW5kIGFycmF5cy4gIEhlcmUncyBhbiBleGFtcGxlIGZvciBsb2NhdGlvbiAxMzgsIFN0YWNleSdzIENvdW50cnkgQmFrZWhvdXNlOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWpzb24ifSwie1xuICBcImlkXCI6IDEzOCxcbiAgXCJob3Vyc1wiOiBbXG4gICAgeyBcImRheVwiOiBcIk1vbmRheVwiLCBcImhvdXJzXCI6IFwiOC03XCIgfSxcbiAgICB7IFwiZGF5XCI6IFwiVHVlc2RheVwiLCBcImhvdXJzXCI6IFwiOS03XCIgfSxcbiAgICB7IFwiZGF5XCI6IFwiV2VkbmVzZGF5XCIsIFwiaG91cnNcIjogXCI2LThcIiB9LFxuICAgIHsgXCJkYXlcIjogXCJUaHVyc2RheVwiLCBcImhvdXJzXCI6IFwiNi02XCIgfSxcbiAgICB7IFwiZGF5XCI6IFwiRnJpZGF5XCIsIFwiaG91cnNcIjogXCI5LTVcIiB9LFxuICAgIHsgXCJkYXlcIjogXCJTYXR1cmRheVwiLCBcImhvdXJzXCI6IFwiOC05XCIgfSxcbiAgICB7IFwiZGF5XCI6IFwiU3VuZGF5XCIsIFwiaG91cnNcIjogXCI3LTdcIiB9XG4gIF0sXG4gIFwic29jaWFsc1wiOiBbXG4gICAgeyBcImluc3RhZ3JhbVwiOiBcInN0YWNleXNjb3VudHJ5YmFrZWhvdXNlXCIsXG4gICAgICBcImZhY2Vib29rXCI6IFwic3RhY2V5c2NvdW50cnliYWtlaG91c2VcIixcbiAgICAgIFwidHdpdHRlclwiOiBcInN0YWNleXNjb3VudHJ5YmFrZWhvdXNlXCJcbiAgICB9XG4gIF0sXG4gIFwid2Vic2l0ZVwiOiBcInd3dy5zdGFjZXlzY291bnRyeWJha2Vob3VzZS5jb21cIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIkxvcmVtIGlwc3VtLi4uLlwiLFxuICBcInBob25lXCI6IFwiKDMxNikgMTU3LTg2MjBcIlxufVxuIikpLG1keCgicCIsbnVsbCwiV2Ugd2FudCB0byBidWlsZCBhbiBBUEkgdGhhdCBhbGxvd3MgdXMgdG8gcmV0cmlldmUgYWxsIG9yIHNvbWUgb2YgdGhlc2UgZXh0cmEgZGV0YWlscywgYW5kIGtlZXAgdGhlIG92ZXJhbGwgc3RydWN0dXJlIG9mIHRoZSBkb2N1bWVudCBpbnRhY3QuICBGb3IgdGhhdCwgd2UnbGwgbmVlZCB0aGUgUmVkaXNKU09OIG1vZHVsZSBhcyB3ZSdsbCBzZWUgbGF0ZXIuIiksbWR4KCJoMiIseyJpZCI6ImNoZWNraW5zIn0sIkNoZWNraW5zIiksbWR4KCJwIixudWxsLCJDaGVja2lucyBkaWZmZXIgZnJvbSB1c2VycyBhbmQgbG9jYXRpb25zIGluIHRoYXQgdGhleSdyZSBub3QgZW50aXRpZXMgdGhhdCB3ZSBuZWVkIHRvIHN0b3JlIGZvcmV2ZXIuIEluIG91ciBhcHBsaWNhdGlvbiwgY2hlY2tpbnMgY29uc2lzdCBvZiBhIHVzZXIgSUQsIGEgbG9jYXRpb24gSUQsIGEgc3RhciByYXRpbmcgYW5kIGEgdGltZXN0YW1wIC0gd2UnbGwgdXNlIHRoZXNlIHZhbHVlcyB0byB1cGRhdGUgYXR0cmlidXRlcyBvZiBvdXIgdXNlcnMgYW5kIGxvY2F0aW9ucy4iKSxtZHgoInAiLG51bGwsIkVhY2ggY2hlY2tpbiBjYW4gYmUgdGhvdWdodCBvZiBhcyBhIGZsYXQgbWFwIG9mIG5hbWUvdmFsdWUgcGFpcnMsIGZvciBleGFtcGxlOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWpzb24ifSwie1xuICBcInVzZXJJZFwiOiA3ODksXG4gIFwibG9jYXRpb25JZFwiOiAxNzEsXG4gIFwic3RhclJhdGluZ1wiOiA1XG59XG4iKSksbWR4KCJwIixudWxsLCJIZXJlLCB3ZSBzZWUgdGhhdCB1c2VyIDc4OSB2aXNpdGVkIGxvY2F0aW9uIDE3MSAoXCJIYWlyIGJ5IFBhcnZpbmRlclwiKSBhbmQgd2FzIHJlYWxseSBpbXByZXNzZWQgd2l0aCB0aGUgc2VydmljZS4iKSxtZHgoInAiLG51bGwsIldlIG5lZWQgYSB3YXkgdG8gc3RvcmUgY2hlY2tpbnMgZm9yIGxvbmcgZW5vdWdoIHRvIHByb2Nlc3MgdGhlbSwgYnV0IG5vdCBmb3JldmVyLiAgV2UgYWxzbyBuZWVkIHRvIGFzc29jaWF0ZSBhIHRpbWVzdGFtcCB3aXRoIGVhY2ggb25lLCBhcyB3ZSdsbCBuZWVkIHRoYXQgd2hlbiB3ZSBwcm9jZXNzIHRoZSBkYXRhLiAgIiksbWR4KCJwIixudWxsLCJSZWRpcyBwcm92aWRlcyBhIFN0cmVhbSBkYXRhIHR5cGUgdGhhdCdzIHBlcmZlY3QgZm9yIHRoaXMgLSB3aXRoIFJlZGlzIFN0cmVhbXMsIHdlIGNhbiBzdG9yZSBtYXBzIG9mIG5hbWUvdmFsdWUgcGFpcnMgYW5kIGhhdmUgdGhlIFJlZGlzIHNlcnZlciB0aW1lc3RhbXAgdGhlbSBmb3IgdXMuICBTdHJlYW1zIGFyZSBhbHNvIHBlcmZlY3QgZm9yIHRoZSBzb3J0IG9mIGFzeW5jaHJvbm91cyBwcm9jZXNzaW5nIHdlIHdhbnQgdG8gZG8gd2l0aCB0aGlzIGRhdGEuICBXaGVuIGEgdXNlciBwb3N0cyBhIG5ldyBjaGVja2luIHRvIG91ciBBUEkgd2Ugd2FudCB0byBzdG9yZSB0aGF0IGRhdGEgYW5kIHJlc3BvbmQgdG8gdGhlIHVzZXIgdGhhdCB3ZSd2ZSByZWNlaXZlZCBpdCBhcyBxdWlja2x5IGFzIHBvc3NpYmxlLiAgTGF0ZXIgd2UgY2FuIGhhdmUgb25lIG9yIG1vcmUgb3RoZXIgcGFydHMgb2YgdGhlIHN5c3RlbSBkbyBmdXJ0aGVyIHByb2Nlc3Npbmcgd2l0aCBpdC4gIFN1Y2ggcHJvY2Vzc2luZyBtaWdodCBpbmNsdWRlIHVwZGF0aW5nIHRoZSB0b3RhbCBudW1iZXIgb2YgY2hlY2tpbnMgYW5kIGxhc3Qgc2VlbiBhdCBmaWVsZHMgZm9yIGEgdXNlciwgb3IgY2FsY3VsYXRpbmcgYSBuZXcgYXZlcmFnZSBzdGFyIHJhdGluZyBmb3IgYSBsb2NhdGlvbi4iKSxtZHgoImgyIix7ImlkIjoiYXBwbGljYXRpb24tYXJjaGl0ZWN0dXJlIn0sIkFwcGxpY2F0aW9uIEFyY2hpdGVjdHVyZSIpLG1keCgicCIsbnVsbCwiV2UgZGVjaWRlZCB0byB1c2UgTm9kZS5qcyB3aXRoIHRoZSBFeHByZXNzIGZyYW1ld29yayBhbmQgaW9yZWRpcyBjbGllbnQgdG8gYnVpbGQgdGhlIGFwcGxpY2F0aW9uLiAgUmF0aGVyIHRoYW4gaGF2ZSBhIG1vbm9saXRoaWMgY29kZWJhc2UsIHRoZSBhcHBsaWNhdGlvbiBoYXMgYmVlbiBzcGxpdCBvdXQgaW50byBmb3VyIGNvbXBvbmVudHMgb3Igc2VydmljZXMuIFRoZXNlIGFyZToiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiQXV0aGVudGljYXRpb24gU2VydmljZSIpLCI6IExpc3RlbnMgb24gYW4gSFRUUCBwb3J0IGFuZCBoYW5kbGVzIHVzZXIgYXV0aGVudGljYXRpb24gdXNpbmcgUmVkaXMgYXMgYSBzaGFyZWQgc2Vzc2lvbiBzdG9yZSB0aGF0IG90aGVyIHNlcnZpY2VzIGNhbiBhY2Nlc3MuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJDaGVja2luIFJlY2VpdmVyIiksIjogTGlzdGVucyBvbiBhbiBIVFRQIHBvcnQgYW5kIHJlY2VpdmVzIGNoZWNraW5zIGFzIEhUVFAgUE9TVCByZXF1ZXN0cyBmcm9tIG91ciB1c2Vycy4gIEVhY2ggY2hlY2tpbiBpcyBwbGFjZWQgaW4gYSBSZWRpcyBTdHJlYW0gZm9yIGxhdGVyIHByb2Nlc3NpbmcuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJDaGVja2luIFByb2Nlc3NvciIpLCI6IE1vbml0b3JzIHRoZSBjaGVja2luIFN0cmVhbSBpbiBSZWRpcywgdXBkYXRpbmcgdXNlciBhbmQgbG9jYXRpb24gaW5mb3JtYXRpb24gYXMgaXQgcHJvY2Vzc2VzIGVhY2ggY2hlY2tpbi4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIkFQSSBTZXJ2ZXIiKSwiOiBJbXBsZW1lbnRzIHRoZSBidWxrIG9mIHRoZSBhcHBsaWNhdGlvbidzIEFQSSBlbmRwb2ludHMsIGluY2x1ZGluZyB0aG9zZSB0byByZXRyaWV2ZSBpbmZvcm1hdGlvbiBhYm91dCB1c2VycyBhbmQgbG9jYXRpb25zIGZyb20gUmVkaXMuIikpLG1keCgicCIsbnVsbCwiVGhlc2UgY29tcG9uZW50cyBmaXQgdG9nZXRoZXIgbGlrZSBzbzoiKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6IkFwcGxpY2F0aW9uIEFyY2hpdGVjdHVyZSIsc3JjOnJlcXVpcmUoIiF1cmwtbG9hZGVyP2xpbWl0PTEwMDAwJm5hbWU9YXNzZXRzL2ltYWdlcy9bbmFtZV0tW2hhc2hdLltleHRdJmZhbGxiYWNrPWZpbGUtbG9hZGVyIS4vaW1hZ2VzL2FwcGxpY2F0aW9uX2FyY2hpdGVjdHVyZS5wbmciKS5kZWZhdWx0fSkpLG1keCgicCIsbnVsbCwiVGhlcmUncyBhbHNvIGEgZGF0YSBsb2FkZXIgY29tcG9uZW50LCB3aGljaCB3ZSdsbCB1c2UgdG8gbG9hZCBzb21lIGluaXRpYWwgc2FtcGxlIGRhdGEgaW50byB0aGUgc3lzdGVtLiIpLG1keCgicCIsbnVsbCwiQXMgd2UgcHJvZ3Jlc3MgdGhyb3VnaCB0aGUgY291cnNlLCB3ZSdsbCBsb29rIGF0IGVhY2ggb2YgdGhlc2UgY29tcG9uZW50cyBpbiB0dXJuLiAgSW4gdGhlIG5leHQgbW9kdWxlLCB5b3UnbGwgZ2V0IGhhbmRzIG9uIGFuZCBjbG9uZSB0aGUgYXBwbGljYXRpb24gcmVwbywgc3RhcnQgYSBSZWRpcyBzZXJ2ZXIgd2l0aCBEb2NrZXIsIGFuZCBsb2FkIHRoZSBzYW1wbGUgZGF0YS4iKSxtZHgoImgyIix7ImlkIjoiZXh0ZXJuYWwtcmVzb3Vyc2VzIn0sIkV4dGVybmFsIFJlc291cnNlcyIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJhIix7cGFyZW50TmFtZToibGkiLCJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL3JlZGlzbGFicy10cmFpbmluZy9ub2RlLWpzLWNyYXNoLWNvdXJzZSJ9LCJTYW1wbGUgQXBwbGljYXRpb24gR2l0SHViIFJlcG9zaXRvcnkiKSkpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}