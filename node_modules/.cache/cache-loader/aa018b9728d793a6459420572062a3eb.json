{"remainingRequest":"/Users/ajeetraina/projects/8sep/redis-developer.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/ajeetraina/projects/8sep/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/ajeetraina/projects/8sep/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/ajeetraina/projects/8sep/redis-developer.github.io/docs/howtos/frauddetection/index-frauddetection.mdx","dependencies":[{"path":"/Users/ajeetraina/projects/8sep/redis-developer.github.io/docs/howtos/frauddetection/index-frauddetection.mdx","mtime":1631077488831},{"path":"/Users/ajeetraina/projects/8sep/redis-developer.github.io/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-howtos-frauddetection-index-frauddetection-mdx-6c2.json","mtime":1631077870286},{"path":"/Users/ajeetraina/projects/8sep/redis-developer.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1631077703630},{"path":"/Users/ajeetraina/projects/8sep/redis-developer.github.io/node_modules/babel-loader/lib/index.js","mtime":1631077703341},{"path":"/Users/ajeetraina/projects/8sep/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1631077777797},{"path":"/Users/ajeetraina/projects/8sep/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1631077776334}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/ajeetraina/projects/8sep/redis-developer.github.io/docs/howtos/frauddetection/index-frauddetection.mdx"],"names":["React","mdx","frontMatter","id","title","sidebar_label","slug","metadata","Tabs","TabItem","useBaseUrl","RedisCard","toc","value","children","layoutProps","MDXLayout","MDXContent","components","props","require","default","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'index-frauddetection',\n\ttitle: 'How to build a Fraud Detection System using RedisGears and RedisBloom',\n\tsidebar_label: 'How to build a Fraud Detection System using RedisGears and RedisBloom',\n\tslug: '/howtos/frauddetection'\n};\nexport const metadata = {\n  \"unversionedId\": \"howtos/frauddetection/index-frauddetection\",\n  \"id\": \"howtos/frauddetection/index-frauddetection\",\n  \"isDocsHomePage\": false,\n  \"title\": \"How to build a Fraud Detection System using RedisGears and RedisBloom\",\n  \"description\": \"Authors: Sachin Kottarathodi, Ajeet Singh Raina\",\n  \"source\": \"@site/docs/howtos/frauddetection/index-frauddetection.mdx\",\n  \"slug\": \"/howtos/frauddetection\",\n  \"permalink\": \"/howtos/frauddetection\",\n  \"editUrl\": \"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/frauddetection/index-frauddetection.mdx\",\n  \"version\": \"current\",\n  \"sidebar_label\": \"How to build a Fraud Detection System using RedisGears and RedisBloom\",\n  \"sidebar\": \"docs\",\n  \"previous\": {\n    \"title\": \"How to build a Chat application using Redis\",\n    \"permalink\": \"/howtos/chatapp\"\n  },\n  \"next\": {\n    \"title\": \"Building Movies database app using RedisGraph and NodeJS\",\n    \"permalink\": \"/howtos/redisgraphmovies\"\n  }\n};\n  /* @jsxRuntime classic */\n/* @jsx mdx */\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport RedisCard from '@site/src/theme/RedisCard';\nexport const toc = [{\n  value: 'Step #1: Installing Docker',\n  id: 'step-1-installing-docker',\n  children: []\n}, {\n  value: 'Step #2: Get Ready to Redis',\n  id: 'step-2-get-ready-to-redis',\n  children: []\n}, {\n  value: 'Step #3: Cloning the Repository',\n  id: 'step-3-cloning-the-repository',\n  children: []\n}, {\n  value: 'Step #4: Building and Running the Docker Container',\n  id: 'step-4-building-and-running-the-docker-container',\n  children: []\n}, {\n  value: 'Step #5:  Verifying the Application',\n  id: 'step-5--verifying-the-application',\n  children: []\n}, {\n  value: 'Click Spamming:',\n  id: 'click-spamming',\n  children: []\n}, {\n  value: 'Step #6: Deploy Grafana',\n  id: 'step-6-deploy-grafana',\n  children: []\n}, {\n  value: 'Conclusion &amp; future work',\n  id: 'conclusion--future-work',\n  children: []\n}, {\n  value: 'References and Links',\n  id: 'references-and-links',\n  children: []\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Authors: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.linkedin.com/in/ksachin1\"\n      }}>{`Sachin Kottarathodi`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.linkedin.com/in/ajeetsraina/\"\n      }}>{`Ajeet Singh Raina`}</a></p>\n    <p>{`Imagine that your ads are generating a lot of traffic, but you are not seeing the desired results from your ad spend. This might not be a coincidence—fraudsters often try to steal digital ad marketing budgets through various sophisticated mechanisms. Faking clicks can make it appear as though a real user was engaging with the ad, but in reality when these fake clicks drive installs, the cost of the install goes to the fraudster’s pocket. As companies’ willingness to spend more  on digital advertisements grows, the number of fraudsters in ad markets also increases.`}</p>\n    <p><img alt={\"fraud detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_grafana.png\").default} /></p>\n    <p>{`This blog post will demonstrate a simplified use case of how real-time fraud detection works—so that you can understand how to stay ahead of the fraudsters.`}</p>\n    <p>{`Here’s what we have used:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Python-based fraud detector module which performs two kinds of fraud checks : IP blacklisting & click spamming`}</li>\n      <li parentName=\"ul\">{`IP blacklisting uses Redis Cuckoo Filter from the RedisBloom package.`}</li>\n      <li parentName=\"ul\">{`Click spamming uses Redis Sorted Set.`}</li>\n      <li parentName=\"ul\">{`The data is then pushed to RediStream which is consumed by RedisGears for processing `}</li>\n      <li parentName=\"ul\">{`RedisTimeSeries gets updated and Redis Data Source for Grafana displays the dashboard`}</li>\n    </ul>\n    <p><img alt={\"Fraud Detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./frauddetection.png\").default} /></p>\n    <h3 {...{\n      \"id\": \"step-1-installing-docker\"\n    }}>{`Step #1: Installing Docker`}</h3>\n    <p>{`You can follow `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/get-docker/\"\n      }}>{`https://docs.docker.com/get-docker/`}</a>{` to get Docker installed on your local system.`}</p>\n    <h3 {...{\n      \"id\": \"step-2-get-ready-to-redis\"\n    }}>{`Step #2: Get Ready to Redis`}</h3>\n    <p>{`You will need a Redis server up and running on your local machine. You can use the below CLI to bring up Redis server with RedisGears.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` $ docker run -d -p 6379:6379 redislabs/redismod\n`}</code></pre>\n    <p>{`The command will pull the image from redis docker repo and start the Redis server with all the required modules and the logs ends like this.`}</p>\n    <h3 {...{\n      \"id\": \"step-3-cloning-the-repository\"\n    }}>{`Step #3: Cloning the Repository`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` $ git clone https://github.com/redis-developer/redis-datasets.git\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"step-4-building-and-running-the-docker-container\"\n    }}>{`Step #4: Building and Running the Docker Container`}</h3>\n    <p>{`Change directory to fraud-detection`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` $ cd redis-datasets/use-cases/fraud-detection\n`}</code></pre>\n    <p>{`The code is present in use-cases/fraud-detection. The app is dockerized with necessary packages (including client packages for redis modules). `}</p>\n    <p>{`Create the image using the command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` $ docker build -t redis-fraud:latest .\n`}</code></pre>\n    <p>{`Create the container using the command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` $ docker run -e REDIS_HOST='<host>' -e REDIS_PORT=6379 -p 5000:5000 -d redis-fraud\n`}</code></pre>\n    <p>{`You will get the container Id, which can be used to tail application logs.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` $ docker logs -f <container-id> \n`}</code></pre>\n    <p>{`If you are using a redismod image to run Redis locally, please provide the IP of the host machine (and not localhost or 127.0.0.1).`}</p>\n    <h3 {...{\n      \"id\": \"step-5--verifying-the-application\"\n    }}>{`Step #5:  Verifying the Application`}</h3>\n    <p>{`Let's take a look at how connections are managed in this project.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{` import os\n import redis\n from redisbloom.client import Client\n from singleton_decorator import singleton\n\n\n @singleton\n class RedisConn:\n    def __init__(self):\n        host = os.getenv(\"REDIS_HOST\")\n    port = os.getenv(\"REDIS_PORT\")\n\n    if not host or not port:\n        raise Exception(\"No Redis Host or Port provided. Please provide Host and Port in docker run command as env\")\n\n    port = int(port)\n    self.redis_client = redis.Redis(host=host, port=port)\n    self.bloom_client = Client(host=host, port=port)\n\n    def redis(self):\n        return self.redis_client\n\n    def bloom(self):\n        return self.bloom_client\n`}</code></pre>\n    <p>{`In line 2, we import the redis package for package. All the core Redis commands are available in this Redis package.`}</p>\n    <p>{`In line 4, we import the redisbloom package. Since RedisBloom is a module, the clients used to interact with this module are also different. We will see more such examples below.\nThe singleton_decorator ensures only one instance of this connection class is created, and os package is used to read the environment variables to form the connection.`}</p>\n    <p>{`Now let’s take a look at how we use Redis to solve click spamming and IP fraud.`}</p>\n    <p>{`Gist: `}<a parentName=\"p\" {...{\n        \"href\": \"https://gist.github.com/Sachin-Kottarathodi/c3a0647d3fdd0fe8a76425e0594e11c5\"\n      }}>{`https://gist.github.com/Sachin-Kottarathodi/c3a0647d3fdd0fe8a76425e0594e11c5`}</a>{` `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{` def ip_fraud(self, data):\n     exists = RedisConn().bloom().cfExists(Constants.IP_CUCKOO_FILTER_NAME, data['ip'])\n     if exists:\n         data['fraud_type'] = Constants.IP_BLACKLIST\n         data['status'] = Constants.FRAUD\n\n     return exists\n\n def click_spam(self, data):\n    is_click_spammed = False\n    count = RedisConn().redis().zcount(data.get('device_id'), data['ts'] - self.click_spam_window_in_sec, data['ts'])\n    if count >= self.click_spam_threshold:\n         is_click_spammed = True\n         data['fraud_type'] = Constants.CLICK_SPAM\n         data['status'] = Constants.FRAUD\n    return is_click_spammed\n\n def publish(self, data):\n    RedisConn().redis().xadd(Constants.STREAM_NAME, data, id='*')\n`}</code></pre>\n    <p>{`In the above code, Cuckoo Filter is used to find blacklisted IP fraud. Cuckoo Filter is a probabilistic data structure that’s part of the module, RedisBloom. Checking for existence of IP in Cuckoo Filter is done using the cfExists method provided by bloom client. Please note that Cuckoo Filter can return false positives. To configure the error rate, cf.reserve command can be used to create the filter and custom bucket size can be provided.`}</p>\n    <p>{`To identify click spam, we use the zcount method of sorted sets provided in redis package.\nUsing zcount, we find the number of clicks from a device in a certain pre configured window. If the count received is greater than a certain threshold, we identify it as anomalous.`}</p>\n    <p>{`Finally, data is pushed to Redistream using the xadd command. id=’*’ indicates Redistream to generate a unique id for our message.`}</p>\n    <h4 {...{\n      \"id\": \"registering-gears\"\n    }}>{`Registering Gears:`}</h4>\n    <p>{`When the app appears, a gear is registered, which reacts to the stream that we use to push data.`}</p>\n    <p>{`Gist:`}<a parentName=\"p\" {...{\n        \"href\": \"https://gist.github.com/Sachin-Kottarathodi/f9dac7a3342a3643e792e2143a6adf7d\"\n      }}>{`https://gist.github.com/Sachin-Kottarathodi/f9dac7a3342a3643e792e2143a6adf7d`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{` from gearsclient import GearsRemoteBuilder as GearsBuilder\n from redistimeseries.client import Client\n\n def stream_handler(item):\n  data = item['value']\n  member = json.dumps(\n    {'device_id': data['device_id'],\n    'transaction_id': data['transaction_id'],\n    'ts': data['ts'],\n    })\n  redis.Redis().zadd(data.get('device_id'), {member: data['ts']})\n  Client().incrby(data['fraud_type'], 1)\n\n  GearsBuilder(reader='StreamReader', r=redis_conn, requirements=[\"redis\", \"redistimeseries\"]).foreach(stream_handler).register('data_stream')\n`}</code></pre>\n    <p>{`As mentioned before, since RedisGears and RedisTimeSeries are modules, we need to use the clients provided in their respective packages.`}</p>\n    <p>{`We use the GearsRemoteBuilder class to build the Gear. StreamReader ensures that the stream_handler function is executed for every new message from the stream. The stream_handler adds the data to the sorted set using zadd (This information is used in zcount to identify click_spam)  and increments the count of time series for clean and fraud types using incrby of the RedisTimeSeries module, which is later used for visualization.`}</p>\n    <p><img alt={\"Fraud Detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_redisinsight.png\").default} /></p>\n    <p>{`Gear registration can be checked on RedisInsight as well.`}</p>\n    <p>{`Finally, we incorporate the flask app which exposes the end point for trigger.`}</p>\n    <p>{`Gist: `}<a parentName=\"p\" {...{\n        \"href\": \"https://gist.github.com/Sachin-Kottarathodi/2a6cccb29b4a9fdc7d58086af07aa6eb\"\n      }}>{`https://gist.github.com/Sachin-Kottarathodi/2a6cccb29b4a9fdc7d58086af07aa6eb`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{` from flask import Flask, request\n from fraud_checks import FraudChecks\n from setup import Setup\n app = Flask(__name__)\n\n\n @app.route('/', methods=['POST'])\n def check_fraud():\n    try:\n    response = FraudChecks().check_fraud(request.get_json())\n    code = 200\n    except Exception as e:\n    print(\"Error occurred \", e)\n    response = str(e)\n    code = 500\n\n    return response, code\n\n\n if __name__ == '__main__':\n    Setup().init()\n    app.run(port=5000, debug=False, host='0.0.0.0')\n`}</code></pre>\n    <p>{`Here, the app is exposed on port 5000. Before starting the server, our init method of setup is called to register the gear.The endpoint calls the function that does the fraud checks and returns the response.`}</p>\n    <p>{`The application is written in python and exposes an endpoint which accepts a few parameters. Use the below command to invoke the application:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` $ curl --request POST 'localhost:5000' --header 'Content-Type: application/json' --data-raw '{\n      \"device_id\": \"111-000-000\",\n      \"ip\": \"1.1.1.1\",\n      \"transaction_id\": \"3e4fad5fs\"}'\n clean\n`}</code></pre>\n    <p>{`Since initially no data is available in Cuckoo Filter, all IPs will be allowed through.\nTo add data to Cuckoo Filter, connect to Redis using cli and run the command`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` cf.addnx ip_cf 1.1.1.1\n`}</code></pre>\n    <p>{`Run the post command with this IP again. This time, the result will be ip_blacklist.`}</p>\n    <p><img alt={\"Fraud Detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_ipblacklist.png\").default} /></p>\n    <h3 {...{\n      \"id\": \"click-spamming\"\n    }}>{`Click Spamming:`}</h3>\n    <p>{`The app is configured to allow two events in a window of 10 seconds from the same device. To verify, make more than two curl requests within 10 seconds and the result will be `}<inlineCode parentName=\"p\">{`click_spam`}</inlineCode>{`.`}</p>\n    <p><img alt={\"Fraud Detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_clickspam.png\").default} /></p>\n    <p>{`Optional: The following variables can be configured during the ‘docker run’ command.\n-e CLICK_SPAM_THRESHOLD=3 -e CLICK_SPAM_WINDOW_IN_SEC=10`}</p>\n    <h3 {...{\n      \"id\": \"step-6-deploy-grafana\"\n    }}>{`Step #6: Deploy Grafana`}</h3>\n    <p>{`It’s exciting to see the fraud detection  plotted in Grafana. To implement this, run the command below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` $ docker run -d -e \"GF_INSTALL_PLUGINS=redis-app\" -p 3000:3000 grafana/grafana\n`}</code></pre>\n    <p>{`Point your browser to https://<IP_ADDRESS>:3000. `}</p>\n    <p><img alt={\"Fraud detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_grafana1.png\").default} /></p>\n    <p>{`Login as ‘admin’ with password as ‘admin’, you can reset the password after your first login.`}</p>\n    <p><img alt={\"Fraud detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_grafana2.png\").default} /></p>\n    <p>{`Click on the gear icon on the left panel (Configuration) and choose Data Sources.`}</p>\n    <p><img alt={\"Fraud detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_grafana3.png\").default} /></p>\n    <p>{`Choose ‘Add data source’.`}</p>\n    <p><img alt={\"Fraud detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_grafana4.png\").default} /></p>\n    <p>{`Search for Redis and choose Redis Data Source.`}</p>\n    <p><img alt={\"Fraud detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_grafana5.png\").default} /></p>\n    <p>{`Copy and paste the raw json content from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/redis-developer/redis-datasets/blob/master/use-cases/fraud-detection/Fraud-Stats-Grafana.json\"\n      }}>{`here`}</a>{`  in the ‘Import via panel json’ box. Click on Load.`}</p>\n    <p><img alt={\"Fraud detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_grafana6.png\").default} /></p>\n    <p>{`This creates a dashboard ‘Fraud Stats’. If you get an error while importing the dashboard, try changing the name and UUID of the dashboard.`}</p>\n    <p><img alt={\"Fraud detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_grafana7.png\").default} /></p>\n    <p><img alt={\"Fraud detection\"} src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!./fraud_grafana8.png\").default} /></p>\n    <h3 {...{\n      \"id\": \"conclusion--future-work\"\n    }}>{`Conclusion & future work`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`If we consider the entire flow starting from fraud check, from event streaming to data processing to visualization (using insights), all of this would have required multiple components and extensive orchestration. With Redis Ecosystem, most of this is removed.`}</li>\n      <li parentName=\"ul\">{`This is just the beginning of more checks that can be done on events. A lot of other checks can be done using modules and data structures. For example; Redis provides geospatial data structures built over sorted sets. Since latitude and longitude can be derived from IP using IP to location conversion providers, a lot of insight can be derived on whether the event can be fraudulent or not.`}</li>\n      <li parentName=\"ul\">{`To reject servicing requests altogether, the redis-cell module to rate limit requests against a key can be used.`}</li>\n      <li parentName=\"ul\">{`RedisAI and neural-redis can be used to improve efficiency of identifying fraud based.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"references-and-links\"\n    }}>{`References and Links`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/redis-developer/redis-datasets/tree/master/use-cases/fraud-detection\"\n        }}>{`Source Code`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://redislabs.com/solutions/use-cases/fraud-detection/\"\n        }}>{`Build modern fraud-detection platforms with Redis Enterprise`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://lp.redislabs.com/rs/915-NFD-128/images/RedisLabs-Solution-Fraud-Detection.pdf\"\n        }}>{`Redis Enterprise to Power Modern Fraud-Detection Platforms`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://redislabs.com/docs/lifelock-counts-redis-enterprise-fraud-mitigation/\"\n        }}>{`LifeLock Counts on Redis Enterprise for Fraud Mitigation`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}