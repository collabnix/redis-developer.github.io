{"remainingRequest":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/ajeetraina/staging/redis-developer.github.io/docs/howtos/shoppingcart/index-shoppingcart.mdx","dependencies":[{"path":"/Users/ajeetraina/staging/redis-developer.github.io/docs/howtos/shoppingcart/index-shoppingcart.mdx","mtime":1631078111060},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-howtos-shoppingcart-index-shoppingcart-mdx-ab7.json","mtime":1631078548063},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1604063546682},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js","mtime":1611637097949},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1611637102291},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1611637100994}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FqZWV0cmFpbmEvc3RhZ2luZy9yZWRpcy1kZXZlbG9wZXIuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2luZGV4LXNob3BwaW5nY2FydCcsdGl0bGU6J0hvdyB0byBidWlsZCBhIFNob3BwaW5nIGNhcnQgYXBwIHVzaW5nIE5vZGVKUyBhbmQgUmVkaXMnLHNpZGViYXJfbGFiZWw6J0hvdyB0byBidWlsZCBhIFNob3BwaW5nIGNhcnQgYXBwIHVzaW5nIE5vZGVKUyBhbmQgUmVkaXMnLHNsdWc6Jy9ob3d0b3Mvc2hvcHBpbmdjYXJ0J307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6Imhvd3Rvcy9zaG9wcGluZ2NhcnQvaW5kZXgtc2hvcHBpbmdjYXJ0IiwiaWQiOiJob3d0b3Mvc2hvcHBpbmdjYXJ0L2luZGV4LXNob3BwaW5nY2FydCIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJIb3cgdG8gYnVpbGQgYSBTaG9wcGluZyBjYXJ0IGFwcCB1c2luZyBOb2RlSlMgYW5kIFJlZGlzIiwiZGVzY3JpcHRpb24iOiJJdOKAmXMgaGFyZCB0byBpbWFnaW5lIGFuIG9ubGluZSBzdG9yZSB3aXRob3V0IGEgc2hvcHBpbmcgY2FydC4gQWxtb3N0IGV2ZXJ5IG9ubGluZSBzdG9yZSBtdXN0IGhhdmUgdGhlIHNob3BwaW5nIGNhcnQgZnVuY3Rpb25hbGl0eSB0byBiZSBhYmxlIHRvIHNlbGwgcHJvZHVjdHMgdG8gY3VzdG9tZXJzLiBJbiBvcmRlciB0byBidWlsZCBhIHNjYWxhYmxlIGVjb21tZXJjZSBwbGF0Zm9ybSwgeW91IG5lZWQgYSBwb3dlcmZ1bCBmcmFtZXdvcmsgYW5kIGEgc2ltcGxlIHN0b3JhZ2Ugc3lzdGVtLiBBdCB0aW1lcywgYSBsb3Qgb2YgZGV2ZWxvcGVycyBmb2N1cyBvbiBpbXByb3ZpbmcgdGhlIGZyb250ZW5kIHBlcmZvcm1hbmNlIG9mIGFuIGVjb21tZXJjZSBwbGF0Zm9ybSB0byByZWN0aWZ5IHRoZXNlIHRoaW5ncy4gVGhlIHJlYWwgYm90dGxlbmVjaywgaG93ZXZlciwgcmVtYWlucyB0aGUgc2xvdyBiYWNrZW5kIGxvYWQgdGltZS4iLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL2hvd3Rvcy9zaG9wcGluZ2NhcnQvaW5kZXgtc2hvcHBpbmdjYXJ0Lm1keCIsInNsdWciOiIvaG93dG9zL3Nob3BwaW5nY2FydCIsInBlcm1hbGluayI6Ii9ob3d0b3Mvc2hvcHBpbmdjYXJ0IiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9yZWRpcy1kZXZlbG9wZXIvcmVkaXMtZGV2ZWxvcGVyL2VkaXQvbWFzdGVyL2RvY3MvaG93dG9zL3Nob3BwaW5nY2FydC9pbmRleC1zaG9wcGluZ2NhcnQubWR4IiwidmVyc2lvbiI6ImN1cnJlbnQiLCJzaWRlYmFyX2xhYmVsIjoiSG93IHRvIGJ1aWxkIGEgU2hvcHBpbmcgY2FydCBhcHAgdXNpbmcgTm9kZUpTIGFuZCBSZWRpcyJ9Oy8qIEBqc3hSdW50aW1lIGNsYXNzaWMgKi8gLyogQGpzeCBtZHggKi9pbXBvcnQgVGFicyBmcm9tJ0B0aGVtZS9UYWJzJztpbXBvcnQgVGFiSXRlbSBmcm9tJ0B0aGVtZS9UYWJJdGVtJztpbXBvcnQgdXNlQmFzZVVybCBmcm9tJ0Bkb2N1c2F1cnVzL3VzZUJhc2VVcmwnO2ltcG9ydCBSZWRpc0NhcmQgZnJvbSdAc2l0ZS9zcmMvdGhlbWUvUmVkaXNDYXJkJztleHBvcnQgY29uc3QgdG9jPVt7dmFsdWU6J0NvbnRlbnQnLGlkOidjb250ZW50JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidXaGF0IHdpbGwgeW91IGJ1aWxkPycsaWQ6J3doYXQtd2lsbC15b3UtYnVpbGQnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1doYXQgZG8geW91IG5lZWQ/JyxpZDond2hhdC1kby15b3UtbmVlZCcsY2hpbGRyZW46W119LHt2YWx1ZTonR2V0dGluZyBTdGFydGVkJyxpZDonZ2V0dGluZy1zdGFydGVkJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidTZXR0aW5nIHVwIHRoZSBiYWNrZW5kIHNlcnZlcicsaWQ6J3NldHRpbmctdXAtdGhlLWJhY2tlbmQtc2VydmVyJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidTZXR0aW5nIHVwIHRoZSBmcm9udGVuZCB3ZWIgQ2xpZW50IHVzaW5nIFZ1ZS5qcycsaWQ6J3NldHRpbmctdXAtdGhlLWZyb250ZW5kLXdlYi1jbGllbnQtdXNpbmctdnVlanMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1J1bm5pbmcvVGVzdGluZyB0aGUgd2ViIGNsaWVudCcsaWQ6J3J1bm5pbmd0ZXN0aW5nLXRoZS13ZWItY2xpZW50JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidDb25jbHVzaW9uJyxpZDonY29uY2x1c2lvbicsY2hpbGRyZW46W119LHt2YWx1ZTonUmVmZXJlbmNlJyxpZDoncmVmZXJlbmNlJyxjaGlsZHJlbjpbXX1dO2NvbnN0IGxheW91dFByb3BzPXt0b2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgicCIsbnVsbCxgSXTigJlzIGhhcmQgdG8gaW1hZ2luZSBhbiBvbmxpbmUgc3RvcmUgd2l0aG91dCBhIHNob3BwaW5nIGNhcnQuIEFsbW9zdCBldmVyeSBvbmxpbmUgc3RvcmUgbXVzdCBoYXZlIHRoZSBzaG9wcGluZyBjYXJ0IGZ1bmN0aW9uYWxpdHkgdG8gYmUgYWJsZSB0byBzZWxsIHByb2R1Y3RzIHRvIGN1c3RvbWVycy4gSW4gb3JkZXIgdG8gYnVpbGQgYSBzY2FsYWJsZSBlY29tbWVyY2UgcGxhdGZvcm0sIHlvdSBuZWVkIGEgcG93ZXJmdWwgZnJhbWV3b3JrIGFuZCBhIHNpbXBsZSBzdG9yYWdlIHN5c3RlbS4gQXQgdGltZXMsIGEgbG90IG9mIGRldmVsb3BlcnMgZm9jdXMgb24gaW1wcm92aW5nIHRoZSBmcm9udGVuZCBwZXJmb3JtYW5jZSBvZiBhbiBlY29tbWVyY2UgcGxhdGZvcm0gdG8gcmVjdGlmeSB0aGVzZSB0aGluZ3MuIFRoZSByZWFsIGJvdHRsZW5lY2ssIGhvd2V2ZXIsIHJlbWFpbnMgdGhlIHNsb3cgYmFja2VuZCBsb2FkIHRpbWUuCkEgc2xvdyBiYWNrZW5kIGxvYWQgdGltZSBjYW4gaGF2ZSBhIHNlcmlvdXMgaW1wYWN0IG9uIHlvdXIgc2VhcmNoIGVuZ2luZSByYW5raW5ncy4gQSBnb29kIHJ1bGUgb2YgdGh1bWIgaXMgdGhhdCBiYWNrZW5kIGxvYWQgdGltZSBzaG91bGQgdGFrZSBubyBtb3JlIHRoYW4gMjAlIG9mIHlvdXIgdG90YWwgbG9hZCB0aW1lLiBBIGdvb2QgYmFja2VuZCBsb2FkIHRpbWUgdG8gYWltIGZvciBpcyAyMDBtcyBvciBsZXNzLgpJbiB0aGlzIHR1dG9yaWFsLCB5b3Ugd2lsbCBzZWUgaG93IHRvIGJ1aWxkIGEgc2hvcHBpbmcgY2FydCBhcHBsaWNhdGlvbiB1c2luZyBOb2RlLmpzLCBWdWUuanMsIEV4cHJlc3MgYW5kIFJlZGlzLmApLG1keCgiZGl2Iix7Y2xhc3M6InRleHQtLWNlbnRlciJ9LG1keCgiaWZyYW1lIix7d2lkdGg6Ijc2MCIsaGVpZ2h0OiI0MTUiLHNyYzoiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvRnZqbjVmdVV4T1UiLHRpdGxlOiJZb3VUdWJlIHZpZGVvIHBsYXllciIsZnJhbWVib3JkZXI6IjAiLGFsbG93OiJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIixhbGxvd2Z1bGxzY3JlZW46dHJ1ZX0pKSxtZHgoImgzIix7ImlkIjoiY29udGVudCJ9LGBDb250ZW50YCksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgV2hhdCB3aWxsIHlvdSBidWlsZD9gKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgV2hhdCBkbyB5b3UgbmVlZD9gKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgR2V0dGluZyBzdGFydGVkYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYFNldHRpbmcgdXAgdGhlIGJhY2tlbmQgKE5vZGUuanMgRXhwcmVzcylgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgU2V0dGluZyB1cCB0aGUgZnJvbnRlbmQgKFZ1ZS5qcylgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgUnVubmluZyB0aGUgYXBwbGljYXRpb25gKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgQ29uY2x1c2lvbmApKSxtZHgoImgzIix7ImlkIjoid2hhdC13aWxsLXlvdS1idWlsZCJ9LGBXaGF0IHdpbGwgeW91IGJ1aWxkP2ApLG1keCgicCIsbnVsbCxgVGhpcyB0dXRvcmlhbCB3aWxsIHNob3cgeW91IGhvdyB0byBoYXJuZXNzIHRoZSBwb3dlciBvZiBSZWRpcyBieSBjcmVhdGluZyBhIGJhc2ljIGVjb21tZXJjZSBzaG9wcGluZyBjYXJ0IGFwcGxpY2F0aW9uIHdpdGggTm9kZS5qcy4gVXN1YWxseSwgdGhlIHNob3BwaW5nIGNhcnQgZGF0YSBpcyBzdG9yZWQgb24gdGhlIGNsaWVudC1zaWRlIGFzIGEgY29va2llLiBDb29raWVzIGFyZSBzbWFsbCB0ZXh0IGZpbGVzIHN0b3JlZCBpbiBhIHdlYiB1c2VyJ3MgYnJvd3NlciBkaXJlY3Rvcnkgb3IgZGF0YSBmb2xkZXIuIFRoZSBhZHZhbnRhZ2Ugb2YgZG9pbmcgdGhpcyBpcyB0aGF0IHlvdSB3b3VsZG4ndCBuZWVkIHRvIHN0b3JlIHN1Y2ggdGVtcG9yYXJ5IGRhdGEgaW4geW91ciBkYXRhYmFzZS4gSG93ZXZlciwgdGhpcyB3aWxsIHJlcXVpcmUgeW91IHRvIHNlbmQgdGhlIGNvb2tpZXMgd2l0aCBldmVyeSB3ZWIgcmVxdWVzdCwgd2hpY2ggY2FuIHNsb3cgZG93biB0aGUgcmVxdWVzdCBpbiBjYXNlIG9mIGxhcmdlIGNvb2tpZXMuIFN0b3Jpbmcgc2hvcHBpbmcgY2FydCBkYXRhIGluIFJlZGlzIGlzIGEgZ29vZCBpZGVhIHNpbmNlIHlvdSBjYW4gcmV0cmlldmUgdGhlIGl0ZW1zIHZlcnkgZmFzdCBhdCBhbnkgdGltZSBhbmQgcGVyc2lzdCB0aGlzIGRhdGEgaWYgbmVlZGVkLmApLG1keCgicCIsbnVsbCxtZHgoImltZyIse2FsdDoiU2hvcHBpbmcgQ2FydCIsc3JjOnJlcXVpcmUoIiF1cmwtbG9hZGVyP2xpbWl0PTEwMDAwJm5hbWU9YXNzZXRzL2ltYWdlcy9bbmFtZV0tW2hhc2hdLltleHRdJmZhbGxiYWNrPWZpbGUtbG9hZGVyIS4vc2hvcHBpbmcyLnBuZyIpLmRlZmF1bHR9KSksbWR4KCJoMyIseyJpZCI6IndoYXQtZG8teW91LW5lZWQifSxgV2hhdCBkbyB5b3UgbmVlZD9gKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBSZWRpcyBjb21waWxlZCB3aXRoIFJlZGlzSlNPTiBtb2R1bGVgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRXhwcmVzcyA0IGJhY2tlbmRgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgTm9kZSAxNS41LjAgKGF0IGxlYXN0IHYxMi45LjArKWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBOUE0gNy4zLjAgKGF0IGxlYXN0IHY2LjE0LjgrKWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBEb2NrZXIgMTkuMDMuWCAoT3B0aW9uYWwpYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYERvY2tlciBDb21wb3NlIChPcHRpb25hbClgKSksbWR4KCJwIixudWxsLGBCdWlsZGluZyBhbiBlY29tbWVyY2UgYXBwIHdpdGggTm9kZS5qcyBtYWtlcyBhIGxvdCBtb3JlIHNlbnNlIGJlY2F1c2UgaXQgZW5zdXJlcyB0aGUgYmFsYW5jZSBiZXR3ZWVuIGZyb250ZW5kIGFuZCBiYWNrZW5kIGxvYWQgdGltZSBkdWUgdG8gaXRzIGFzeW5jaHJvbm91cyBuYXR1cmUgKHRoZSBhYmlsaXR5IHRvIGhhbmRsZSBtdWx0aXBsZSBjb25jdXJyZW50IHVzZXJzIGF0IGEgdGltZSkuIE5vZGUuanMgaGVscHMgZGV2ZWxvcGVycyBtYWtlIHRoZSBiZXN0IHVzZSBvZiBldmVudCBsb29wcyBhbmQgY2FsbGJhY2tzIGZvciBJL08gb3BlcmF0aW9ucy4gTm9kZS5qcyBydW5zIHNpbmdsZS10aHJlYWRlZCwgbm9uLWJsb2NraW5nLCBhc3luY2hyb25vdXMgcHJvZ3JhbW1pbmcsIHdoaWNoIGlzIHZlcnkgbWVtb3J5IGVmZmljaWVudC5gKSxtZHgoInAiLG51bGwsYEluIG9yZGVyIHRvIGNyZWF0ZSBhIHNob3BwaW5nIGNhcnQgd2UgbmVlZCBhIHNpbXBsZSBzdG9yYWdlIHN5c3RlbSB3aGVyZSB3ZSBjYW4gY29sbGVjdCBwcm9kdWN0cyBhbmQgdGhlIGNhcnQncyB0b3RhbC4gTm9kZS5qcyBwcm92aWRlcyB1cyB3aXRoIHRoZSBleHByZXNzLXNlc3Npb24gcGFja2FnZSwgbWlkZGxld2FyZSBmb3IgRXhwcmVzc0pTLiBXZSB3aWxsIGJlIHVzaW5nIGV4cHJlc3Mtc2Vzc2lvbiBtaWRkbGV3YXJlIHRvIG1hbmFnZSBzZXNzaW9ucyBpbiBOb2RlLmpzIFRoZSBzZXNzaW9uIGlzIHN0b3JlZCBpbiB0aGUgZXhwcmVzcyBzZXJ2ZXIgaXRzZWxmLmApLG1keCgicCIsbnVsbCxgVGhlIGRlZmF1bHQgc2VydmVyLXNpZGUgc2Vzc2lvbiBzdG9yYWdlLCBNZW1vcnlTdG9yZSwgaXMgcHVycG9zZWx5IG5vdCBkZXNpZ25lZCBmb3IgYSBwcm9kdWN0aW9uIGVudmlyb25tZW50LiBJdCB3aWxsIGxlYWsgbWVtb3J5IHVuZGVyIG1vc3QgY29uZGl0aW9ucywgZG9lcyBub3Qgc2NhbGUgcGFzdCBhIHNpbmdsZSBwcm9jZXNzLCBhbmQgaXMgbWVhbnQgZm9yIGRlYnVnZ2luZyBhbmQgZGV2ZWxvcGluZy4gVG8gbWFuYWdlIG11bHRpcGxlIHNlc3Npb25zIGZvciBtdWx0aXBsZSB1c2Vycywgd2UgaGF2ZSB0byBjcmVhdGUgYSBnbG9iYWwgbWFwIGFuZCBwdXQgZWFjaCBzZXNzaW9uIG9iamVjdCB0byBpdC4gR2xvYmFsIHZhcmlhYmxlcyBpbiBOb2RlSnMgYXJlIG1lbW9yeSBjb25zdW1pbmcgYW5kIGNhbiBwcm92ZSB0byBiZSB0ZXJyaWJsZSBzZWN1cml0eSBob2xlcyBpbiBwcm9kdWN0aW9uLWxldmVsIHByb2plY3RzLlRoaXMgY2FuIGJlIHNvbHZlZCBieSB1c2luZyBhbiBleHRlcm5hbCBzZXNzaW9uIHN0b3JlLiBXZSBoYXZlIHRvIHN0b3JlIGV2ZXJ5IHNlc3Npb24gaW4gdGhlIHN0b3JlIHNvIHRoYXQgZWFjaCBvbmUgd2lsbCBiZWxvbmcgdG8gb25seSBhIHNpbmdsZSB1c2VyLiBPbmUgcG9wdWxhciBzZXNzaW9uIHN0b3JlIGlzIGJ1aWx0IHVzaW5nIFJlZGlzLmApLG1keCgicCIsbnVsbCxgV2Ugd2lsbCBzdGFydCBieSBzZXR0aW5nIHVwIHRoZSBiYWNrZW5kIGZvciBvdXIgYXBwbGljYXRpb24uIExldOKAmXMgY3JlYXRlIGEgbmV3IGRpcmVjdG9yeSBmb3Igb3VyIGFwcGxpY2F0aW9uIGFuZCBpbml0aWFsaXplIGEgbmV3IE5vZGUuanMgYXBwbGljYXRpb24uIE9wZW4gdXAgeW91ciB0ZXJtaW5hbCBhbmQgdHlwZSB0aGUgZm9sbG93aW5nOmApLG1keCgiaDMiLHsiaWQiOiJnZXR0aW5nLXN0YXJ0ZWQifSxgR2V0dGluZyBTdGFydGVkYCksbWR4KCJwIixudWxsLGBDbG9uZSB0aGUgcmVwb3NpdG9yeTpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgJCBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL3JlZGlzLWRldmVsb3Blci9iYXNpYy1yZWRpcy1zaG9wcGluZy1jaGFydC1ub2RlanMKYCkpLG1keCgiaDQiLHsiaWQiOiJjb21waWxpbmctcmVkaXMtd2l0aC1yZWRpc2pzb24tbW9kdWxlIn0sYENvbXBpbGluZyBSZWRpcyB3aXRoIFJlZGlzSlNPTiBtb2R1bGVgKSxtZHgoInAiLG51bGwsYFlvdSBjYW4gdXNlIHRoZSBiZWxvdyBkb2NrZXIgY29tcG9zZSBmaWxlIHRvIHJ1biBSZWRpcyBzZXJ2ZXIgY29tcGlsZWQgd2l0aCBSZWRpc0pTT04gbW9kdWxlOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGB2ZXJzaW9uOiAnMycKCnNlcnZpY2VzOgogICAgcmVkaXM6CiAgICAgICAgaW1hZ2U6IHJlZGlzbGFicy9yZWpzb246bGF0ZXN0CiAgICAgICAgY29udGFpbmVyX25hbWU6IHJlZGlzLnJlZGlzc2hvcHBpbmdjYXJ0LmRvY2tlcgogICAgICAgIHJlc3RhcnQ6IHVubGVzcy1zdG9wcGVkCiAgICAgICAgZW52aXJvbm1lbnQ6CiAgICAgICAgICAgIFJFRElTX1BBU1NXT1JEOiBcJHtSRURJU19QQVNTV09SRH0KICAgICAgICBjb21tYW5kOiByZWRpcy1zZXJ2ZXIgLS1sb2FkbW9kdWxlICIvdXNyL2xpYi9yZWRpcy9tb2R1bGVzL3JlanNvbi5zbyIgLS1yZXF1aXJlcGFzcyAiJFJFRElTX1BBU1NXT1JEIgogICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIDEyNy4wLjAuMTpcJHtSRURJU19QT1JUfTo2Mzc5CiAgICAgICAgbmV0d29ya3M6CiAgICAgICAgICAgIC0gZ2xvYmFsCm5ldHdvcmtzOgogICAgZ2xvYmFsOgogICAgICAgIGV4dGVybmFsOiB0cnVlCmApKSxtZHgoInAiLG51bGwsYEkgYXNzdW1lIHRoYXQgeW91IGhhdmUgRG9ja2VyIGFuZCBEb2NrZXIgQ29tcG9zZSB1cCBhbmQgaW5zdGFsbGVkIG9uIHlvdXIgbG9jYWwgZW52aXJvbm1lbnQuIEV4ZWN1dGUgdGhlIGJlbG93IGNvbXBvc2UgQ0xJIHRvIGJyaW5nIHVwIFJlZGlzIHNlcnZlcjpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgJCBkb2NrZXIgbmV0d29yayBjcmVhdGUgZ2xvYmFsIAokIGRvY2tlci1jb21wb3NlIHVwIC1kIC0tYnVpbGQKYCkpLG1keCgicCIsbnVsbCxgVGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBkb2NrZXItY29tcG9zZSBwc2ApLGAgc2hvd3MgdGhlIGxpc3Qgb2YgcnVubmluZyBSZWRpcyBzZXJ2aWNlczpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgJCBkb2NrZXItY29tcG9zZSBwcwpOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWFuZCAgICAgICAgICAgICAgIFN0YXRlICAgICAgICAgIFBvcnRzICAgICAgICAgIAoKcmVkaXMucmVkaXNzaG9wcGluZ2NhcnQuZG9ja2VyICAgZG9ja2VyLWVudHJ5cG9pbnQuc2ggcmVkaXMgLi4uICAgVXAgICAgICAxMjcuMC4wLjE6NTUwMDAtPjYzNzkvdGNwCmApKSxtZHgoImgzIix7ImlkIjoic2V0dGluZy11cC10aGUtYmFja2VuZC1zZXJ2ZXIifSxgU2V0dGluZyB1cCB0aGUgYmFja2VuZCBzZXJ2ZXJgKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6IlNob3BwaW5nIixzcmM6cmVxdWlyZSgiIXVybC1sb2FkZXI/bGltaXQ9MTAwMDAmbmFtZT1hc3NldHMvaW1hZ2VzL1tuYW1lXS1baGFzaF0uW2V4dF0mZmFsbGJhY2s9ZmlsZS1sb2FkZXIhLi9zaG9wcGluZ2NhcnQzLnBuZyIpLmRlZmF1bHR9KSksbWR4KCJwIixudWxsLGBOb2RlLmpzIGlzIGEgcnVudGltZSBlbnZpcm9ubWVudCB0aGF0IGFsbG93cyBzb2Z0d2FyZSBkZXZlbG9wZXJzIHRvIGxhdW5jaCBib3RoIHRoZSBmcm9udGVuZCBhbmQgYmFja2VuZCBvZiB3ZWIgYXBwcyB1c2luZyBKYXZhU2NyaXB0LiBUbyBzYXZlIHlvdXIgdGltZSwgdGhlIGRpcmVjdG9yeSAvc2VydmVyL3NyYyBoYXMgYWxyZWFkeSBiZWVuIGNyZWF0ZWQgZm9yIHlvdS5UaGlzIGlzIHdoZXJlIHdlIHdpbGwgYmUgY3JlYXRpbmcgb3VyIG1vZHVsZXMgYnkgYWRkaW5nIHRoZSBmb2xsb3dpbmcgc3ViLWRpcmVjdG9yaWVzIC1gKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGByb3V0ZXNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgY29udHJvbGxlcmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBtaWRkbGV3YXJlYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYHNlcnZpY2VzYCkpLG1keCgicCIsbnVsbCxgUm91dGVzIGZvcndhcmQgdGhlIHN1cHBvcnRlZCByZXF1ZXN0cyAoYW5kIGFueSBpbmZvcm1hdGlvbiBlbmNvZGVkIGluIHJlcXVlc3QgVVJMcykgdG8gdGhlIGFwcHJvcHJpYXRlIGNvbnRyb2xsZXIgZnVuY3Rpb25zLCB3aGVyZWFzIGNvbnRyb2xsZXIgZnVuY3Rpb25zIGdldCB0aGUgcmVxdWVzdGVkIGRhdGEgZnJvbSB0aGUgbW9kZWxzLCBjcmVhdGUgYW4gSFRNTCBwYWdlIGRpc3BsYXlpbmcgdGhlIGRhdGEsIGFuZCByZXR1cm4gaXQgdG8gdGhlIHVzZXIgdG8gdmlldyBpbiB0aGUgYnJvd3Nlci4gU2VydmljZXMgaG9sZCB5b3VyIGFjdHVhbCBidXNpbmVzcyBsb2dpYy4gTWlkZGxld2FyZSBmdW5jdGlvbnMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhdmUgYWNjZXNzIHRvIHRoZSByZXF1ZXN0IG9iamVjdCAocmVxKSwgdGhlIHJlc3BvbnNlIG9iamVjdCAocmVzKSwgYW5kIHRoZSBuZXh0IG1pZGRsZXdhcmUgZnVuY3Rpb24gaW4gdGhlIGFwcGxpY2F0aW9u4oCZcyByZXF1ZXN0LXJlc3BvbnNlIGN5Y2xlLmApLG1keCgiaDQiLHsiaWQiOiJwcm9qZWN0LWRpcmVjdG9yeS1zdHJ1Y3R1cmUifSxgUHJvamVjdCBkaXJlY3Rvcnkgc3RydWN0dXJlYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYCUgdHJlZQouCuKUnOKUgOKUgCBjb250cm9sbGVycwrilIIgICDilJzilIDilIAgQ2FydArilIIgICDilIIgICDilJzilIDilIAgRGVsZXRlSXRlbUNvbnRyb2xsZXIuanMK4pSCICAg4pSCICAg4pSc4pSA4pSAIEVtcHR5Q29udHJvbGxlci5qcwrilIIgICDilIIgICDilJzilIDilIAgSW5kZXhDb250cm9sbGVyLmpzCuKUgiAgIOKUgiAgIOKUlOKUgOKUgCBVcGRhdGVDb250cm9sbGVyLmpzCuKUgiAgIOKUlOKUgOKUgCBQcm9kdWN0CuKUgiAgICAgICDilJzilIDilIAgSW5kZXhDb250cm9sbGVyLmpzCuKUgiAgICAgICDilJTilIDilIAgUmVzZXRDb250cm9sbGVyLmpzCuKUnOKUgOKUgCBpbmRleC5qcwrilJzilIDilIAgbWlkZGxld2FyZQrilIIgICDilJTilIDilIAgY2hlY2tTZXNzaW9uLmpzCuKUnOKUgOKUgCBwcm9kdWN0cy5qc29uCuKUnOKUgOKUgCByb3V0ZXMK4pSCICAg4pSc4pSA4pSAIGNhcnQuanMK4pSCICAg4pSc4pSA4pSAIGluZGV4LmpzCuKUgiAgIOKUlOKUgOKUgCBwcm9kdWN0cy5qcwrilJTilIDilIAgc2VydmljZXMKICAgIOKUlOKUgOKUgCBSZWRpc0NsaWVudC5qcwoKNiBkaXJlY3RvcmllcywgMTMgZmlsZXMKYCkpLG1keCgicCIsbnVsbCxgTGV0IHVzIGZpcnN0IGluaXRpYWxpemUgdGhlIGFwcGxpY2F0aW9uIHNlcnZlciB0aHJvdWdoIHRoZSBpbmRleC5qcyBzaG93biBiZWxvdzpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgLy8gc2VydmVyL3NyYy9pbmRleC5qcwoKCmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7CmNvbnN0IHJlZGlzID0gcmVxdWlyZSgncmVkaXMnKTsKY29uc3QgcmVqc29uID0gcmVxdWlyZSgncmVkaXMtcmVqc29uJyk7CmNvbnN0IHNlc3Npb24gPSByZXF1aXJlKCdleHByZXNzLXNlc3Npb24nKTsKY29uc3QgUmVkaXNTdG9yZSA9IHJlcXVpcmUoJ2Nvbm5lY3QtcmVkaXMnKShzZXNzaW9uKTsKY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTsKY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7CmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7CmNvbnN0IFJlZGlzQ2xpZW50ID0gcmVxdWlyZSgnLi9zZXJ2aWNlcy9SZWRpc0NsaWVudCcpOwoKcmVqc29uKHJlZGlzKTsKCnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpOwoKY29uc3QgeyBSRURJU19FTkRQT0lOVF9VUkksIFJFRElTX0hPU1QsIFJFRElTX1BPUlQsIFJFRElTX1BBU1NXT1JELCBQT1JUIH0gPSBwcm9jZXNzLmVudjsKCmNvbnN0IGFwcCA9IGV4cHJlc3MoKTsKCmFwcC51c2UoCiAgICBjb3JzKHsKICAgICAgICBvcmlnaW4ob3JpZ2luLCBjYWxsYmFjaykgewogICAgICAgICAgICBjYWxsYmFjayhudWxsLCB0cnVlKTsKICAgICAgICB9LAogICAgICAgIGNyZWRlbnRpYWxzOiB0cnVlCiAgICB9KQopOwoKY29uc3QgcmVkaXNFbmRwb2ludFVyaSA9IFJFRElTX0VORFBPSU5UX1VSSQogICAgPyBSRURJU19FTkRQT0lOVF9VUkkucmVwbGFjZSgvXihyZWRpc1xcOlxcL1xcLykvLCAnJykKICAgIDogXGBcJHtSRURJU19IT1NUfTpcJHtSRURJU19QT1JUfVxgOwoKY29uc3QgcmVkaXNDbGllbnQgPSByZWRpcy5jcmVhdGVDbGllbnQoXGByZWRpczovL1wke3JlZGlzRW5kcG9pbnRVcml9XGAsIHsKICAgIHBhc3N3b3JkOiBSRURJU19QQVNTV09SRAp9KTsKCmNvbnN0IHJlZGlzQ2xpZW50U2VydmljZSA9IG5ldyBSZWRpc0NsaWVudChyZWRpc0NsaWVudCk7CgphcHAuc2V0KCdyZWRpc0NsaWVudFNlcnZpY2UnLCByZWRpc0NsaWVudFNlcnZpY2UpOwoKYXBwLnVzZSgKICAgIHNlc3Npb24oewogICAgICAgIHN0b3JlOiBuZXcgUmVkaXNTdG9yZSh7IGNsaWVudDogcmVkaXNDbGllbnQgfSksCiAgICAgICAgc2VjcmV0OiAnc29tZVNlY3JldCcsCiAgICAgICAgcmVzYXZlOiBmYWxzZSwKICAgICAgICBzYXZlVW5pbml0aWFsaXplZDogZmFsc2UsCiAgICAgICAgcm9sbGluZzogdHJ1ZSwKICAgICAgICBjb29raWU6IHsKICAgICAgICAgICAgbWF4QWdlOiAzNjAwICogMTAwMCAqIDMKICAgICAgICB9CiAgICB9KQopOwoKYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7CgphcHAudXNlKCcvJywgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL2NsaWVudC1kaXN0JykpKTsKCmNvbnN0IHJvdXRlciA9IHJlcXVpcmUoJy4vcm91dGVzJykoYXBwKTsKCmFwcC51c2UoJy9hcGknLCByb3V0ZXIpOwoKY29uc3QgcG9ydCA9IFBPUlQgfHwgMzAwMDsKCmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4gewogICAgY29uc29sZS5sb2coXGBBcHAgbGlzdGVuaW5nIG9uIHBvcnQgXCR7cG9ydH1cYCk7Cn0pOwpgKSksbWR4KCJwIixudWxsLGBZb3UnbGwgc2VlIHRoYXQgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoaXMgaW5kZXguanMgaXMgdG8gc2ltcGx5IHNldCB1cCB0aGUgc2VydmVyLiBJdCBpbml0aWFsaXplcyBhbGwgdGhlIG1pZGRsZXdhcmUsIHNldHMgdXAgdGhlIHZpZXcgZW5naW5lLCBldGMuIFRoZSBsYXN0IHRoaW5nIHRvIGRvIGlzIHNldCB1cCByb3V0ZXMgYnkgZGVmZXJyaW5nIHRoYXQgcmVzcG9uc2liaWxpdHkgdG8gdGhlIGluZGV4LmpzIHdpdGhpbiB0aGUgcm91dGVzIGZvbGRlci5gKSxtZHgoInAiLG51bGwsYEFzIHNob3duIGFib3ZlLCBhcHAudXNlLCBhcHAuc2V0LCBhbmQgYXBwLmxpc3RlbiBhcmUgZW5kcG9pbnRzLCBmb3IgdGhlIHB1cnBvc2VzIG9mIHRoaXMgZGVtbywgd2Ugd2lsbCBuZWVkIHRvIGJlIGFibGUgdG8gYWRkIGFuZCBnZXQgaXRlbXMgZnJvbSB0aGUgYmFza2V0ICggS2VlcGluZyBpdCBzaW1wbGUgKS4KV2UgbmVlZCB0byBkZWZpbmUgb3VyIGJhc2ljIHJvdXRlcyB0byBnZXQgYWxsIHByb2R1Y3RzLCBnZXQgc2luZ2xlIHByb2R1Y3QgZGV0YWlscywgcmVtb3ZlIHByb2R1Y3RzLCBhbmQgY3JlYXRlIHByb2R1Y3RzLiBgKSxtZHgoImg0Iix7ImlkIjoicm91dGVzIn0sYFJvdXRlc2ApLG1keCgicCIsbnVsbCxgVGhlIHJvdXRlcyBkaXJlY3RvcnkgaXMgb25seSByZXNwb25zaWJsZSBmb3IgZGVmaW5pbmcgb3VyIHJvdXRlcy4gV2l0aGluIGluZGV4LmpzIGluIHRoaXMgZm9sZGVyLCB5b3UnbGwgc2VlIHRoYXQgaXRzIHJlc3BvbnNpYmlsaXR5IGlzIHRvIHNldCB1cCBvdXIgdG9wIGxldmVsIHJvdXRlcyBhbmQgZGVsZWdhdGUgdGhlaXIgcmVzcG9uc2liaWxpdGllcyB0byBlYWNoIG9mIHRoZWlyIHJlc3BlY3RpdmUgcm91dGUgZmlsZXMuIEVhY2ggcmVzcGVjdGl2ZSByb3V0ZSBmaWxlIHdpbGwgZnVydGhlciBkZWZpbmUgYW55IGFkZGl0aW9uYWwgc3Vicm91dGVzIGFuZCBjb250cm9sbGVyIGFjdGlvbnMgZm9yIGVhY2ggb25lLmApLG1keCgicCIsbnVsbCxgVGhlIHdlYiBzZXJ2ZXIgc2tlbGV0b24gYWxyZWFkeSBoYXMgYSAuL3JvdXRlcyBmb2xkZXIgY29udGFpbmluZyByb3V0ZXMgZm9yIHRoZSBpbmRleCwgcHJvZHVjdHMgYW5kIGNhcnQuIChhcyBzaG93biB1bmRlciBgLG1keCgiYSIse3BhcmVudE5hbWU6InAiLCJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL3JlZGlzLWRldmVsb3Blci9iYXNpYy1yZWRpcy1zaG9wcGluZy1jaGFydC1ub2RlanMvdHJlZS9tYWluL3NlcnZlci9zcmMvcm91dGVzIn0sYGh0dHBzOi8vZ2l0aHViLmNvbS9yZWRpcy1kZXZlbG9wZXIvYmFzaWMtcmVkaXMtc2hvcHBpbmctY2hhcnQtbm9kZWpzL3RyZWUvbWFpbi9zZXJ2ZXIvc3JjL3JvdXRlc2ApLGApICAgYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYC8vIHJvdXRlcy9pbmRleC5qcwoKY29uc3QgZnMgPSByZXF1aXJlKCdmcycpOwpjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpOwpjb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpOwoKbW9kdWxlLmV4cG9ydHMgPSBhcHAgPT4gewogICAgZnMucmVhZGRpclN5bmMoX19kaXJuYW1lKS5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0ZSkgewogICAgICAgIHJvdXRlID0gcm91dGUuc3BsaXQoJy4nKVswXTsKCiAgICAgICAgaWYgKHJvdXRlID09PSAnaW5kZXgnKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHJvdXRlci51c2UoXGAvXCR7cm91dGV9XGAsIHJlcXVpcmUoXGAuL1wke3JvdXRlfVxgKShhcHApKTsKICAgIH0pOwoKICAgIHJldHVybiByb3V0ZXI7Cn07CmApKSxtZHgoInAiLG51bGwsYEEgcm91dGUgaXMgYSBzZWN0aW9uIG9mIEV4cHJlc3MgY29kZSB0aGF0IGFzc29jaWF0ZXMgYW4gSFRUUCB2ZXJiIChHRVQsIFBPU1QsIFBVVCwgREVMRVRFLCBldGMuKSwgYSBVUkwgcGF0aC9wYXR0ZXJuLCBhbmQgYSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB0byBoYW5kbGUgdGhhdCBwYXR0ZXJuLgpUaGVyZSBhcmUgc2V2ZXJhbCB3YXlzIHRvIGNyZWF0ZSByb3V0ZXMuIEZvciB0aGlzIGRlbW8gYXBwIHdlJ3JlIGdvaW5nIHRvIHVzZSB0aGUgZXhwcmVzcy5Sb3V0ZXIgbWlkZGxld2FyZSBhcyBpdCBhbGxvd3MgdXMgdG8gZ3JvdXAgdGhlIHJvdXRlIGhhbmRsZXJzIGZvciBhIHBhcnRpY3VsYXIgcGFydCBvZiBhIHNpdGUgdG9nZXRoZXIgYW5kIGFjY2VzcyB0aGVtIHVzaW5nIGEgY29tbW9uIHJvdXRlLXByZWZpeC4KVGhlIG1vZHVsZSByZXF1aXJlcyBFeHByZXNzIGFuZCB0aGVuIHVzZXMgaXQgdG8gY3JlYXRlIGEgUm91dGVyIG9iamVjdC4gVGhlIHJvdXRlcyBhcmUgYWxsIHNldCB1cCBvbiB0aGUgcm91dGVyLCB3aGljaCBpcyB0aGVuIGV4cG9ydGVkLlRoZSByb3V0ZXMgYXJlIGRlZmluZWQgZWl0aGVyIHVzaW5nIC5nZXQoKSBvciAucG9zdCgpIG1ldGhvZHMgb24gdGhlIHJvdXRlciBvYmplY3QuIEFsbCB0aGUgcGF0aHMgYXJlIGRlZmluZWQgdXNpbmcgc3RyaW5ncyAod2UgZG9uJ3QgdXNlIHN0cmluZyBwYXR0ZXJucyBvciByZWd1bGFyIGV4cHJlc3Npb25zKS4gUm91dGVzIHRoYXQgYWN0IG9uIHNvbWUgc3BlY2lmaWMgcmVzb3VyY2UgKGUuZy4gYm9vaykgdXNlIHBhdGggcGFyYW1ldGVycyB0byBnZXQgdGhlIG9iamVjdCBpZCBmcm9tIHRoZSBVUkwuClRoZSBoYW5kbGVyIGZ1bmN0aW9ucyBhcmUgYWxsIGltcG9ydGVkIGZyb20gdGhlIGNvbnRyb2xsZXIgbW9kdWxlcyB3ZSBjcmVhdGVkIGluIHRoZSBwcmV2aW91cyBzZWN0aW9uLmApLG1keCgiaDQiLHsiaWQiOiJjb250cm9sbGVycyJ9LGBDb250cm9sbGVyc2ApLG1keCgicCIsbnVsbCxgQ29udHJvbGxlcnMgYXJlIHJlc3BvbnNpYmxlIGZvciBpbnZva2luZyB0aGUgYXBwcm9wcmlhdGUgYWN0aW9uLiBJZiBhIGNvbnRyb2xsZXIncyByZXNwb25zaWJpbGl0eSBpcyB0byByZW5kZXIgYSB2aWV3LCBpdCB3aWxsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgdmlldyBmcm9tIHRoZSBhcHAvdmlld3MgZGlyZWN0b3J5LmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGAvLyBjb250cm9sbGVyL1Byb2R1Y3QvSW5kZXhDb250cm9sbGVyLmpzCgoKY29uc3QgeyBwcm9kdWN0cyB9ID0gcmVxdWlyZSgnLi4vLi4vcHJvZHVjdHMuanNvbicpOwoKY2xhc3MgUHJvZHVjdEluZGV4Q29udHJvbGxlciB7CiAgICBjb25zdHJ1Y3RvcihyZWRpc0NsaWVudFNlcnZpY2UpIHsKICAgICAgICB0aGlzLnJlZGlzQ2xpZW50U2VydmljZSA9IHJlZGlzQ2xpZW50U2VydmljZTsKICAgIH0KCiAgICBhc3luYyBpbmRleChyZXEsIHJlcykgewogICAgICAgIGNvbnN0IHByb2R1Y3RLZXlzID0gYXdhaXQgdGhpcy5yZWRpc0NsaWVudFNlcnZpY2Uuc2NhbigncHJvZHVjdDoqJyk7CiAgICAgICAgY29uc3QgcHJvZHVjdExpc3QgPSBbXTsKCiAgICAgICAgaWYgKHByb2R1Y3RLZXlzLmxlbmd0aCkgewogICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBwcm9kdWN0S2V5cykgewogICAgICAgICAgICAgICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IHRoaXMucmVkaXNDbGllbnRTZXJ2aWNlLmpzb25HZXQoa2V5KTsKCiAgICAgICAgICAgICAgICBwcm9kdWN0TGlzdC5wdXNoKEpTT04ucGFyc2UocHJvZHVjdCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQocHJvZHVjdExpc3QpOwogICAgICAgIH0KCiAgICAgICAgZm9yIChjb25zdCBwcm9kdWN0IG9mIHByb2R1Y3RzKSB7CiAgICAgICAgICAgIGNvbnN0IHsgaWQgfSA9IHByb2R1Y3Q7CgogICAgICAgICAgICBhd2FpdCB0aGlzLnJlZGlzQ2xpZW50U2VydmljZS5qc29uU2V0KFxgcHJvZHVjdDpcJHtpZH1cYCwgJy4nLCBKU09OLnN0cmluZ2lmeShwcm9kdWN0KSk7CgogICAgICAgICAgICBwcm9kdWN0TGlzdC5wdXNoKHByb2R1Y3QpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHByb2R1Y3RMaXN0KTsKICAgIH0KfQoKbW9kdWxlLmV4cG9ydHMgPSBQcm9kdWN0SW5kZXhDb250cm9sbGVyOwpgKSksbWR4KCJoNCIseyJpZCI6InNlcnZpY2VzIn0sYFNlcnZpY2VzYCksbWR4KCJwIixudWxsLGBTZXJ2aWNlcyBob2xkIHlvdXIgYWN0dWFsIGJ1c2luZXNzIGxvZ2ljLlRoZSBzZXJ2aWNlIGxheWVyIGNhcnJpZXMgb3V0IHRoZSBhcHBsaWNhdGlvbiBsb2dpYyBhbmQgZGVsZWdhdGVzIENSVUQgb3BlcmF0aW9ucyB0byBhIGRhdGFiYXNlL3BlcnNpc3RlbnQgc3RvcmFnZSAoUmVkaXMgaW4gb3VyIGNhc2UpLiBMZXQgdXMgbG9vayBhdCBlYWNoIGNvbmRpdGlvbiBhbmQgdHJ5IHRvIHVuZGVyc3RhbmQgaG93IHRoZSBkYXRhIGlzIHN0b3JlZCwgbW9kaWZpZWQsIGFuZCBhY2Nlc3NlZDpgKSxtZHgoImg0Iix7ImlkIjoiaG93LXRoZS1kYXRhLWlzLXN0b3JlZCJ9LGBIb3cgdGhlIGRhdGEgaXMgc3RvcmVkOmApLG1keCgicCIsbnVsbCxgVGhlIHByb2R1Y3QgZGF0YSBpcyBzdG9yZWQgaW4gYW4gZXh0ZXJuYWwgSlNPTiBmaWxlLiBBZnRlciB0aGUgZmlyc3QgcmVxdWVzdCwgdGhpcyBkYXRhIGlzIHNhdmVkIGluIGEgSlNPTiBkYXRhIHR5cGUgaW4gUmVkaXMgbGlrZTogYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYEpTT04uU0VUIHByb2R1Y3Q6e3Byb2R1Y3RJZH0gLiAneyAiaWQiOiAicHJvZHVjdElkIiwgIm5hbWUiOiAiUHJvZHVjdCBOYW1lIiwgInByaWNlIjogIjM3NS4wMCIsICJzdG9jayI6IDEwIH0nLgpgKSksbWR4KCJoNCIseyJpZCI6ImV4YW1wbGUifSxgRXhhbXBsZTpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgSlNPTi5TRVQgcHJvZHVjdDplMTgyMTE1YS02M2QyLTQyY2UtOGZlMC01ZjY5NmVjZGZiYTYgLiAneyAiaWQiOiAiZTE4MjExNWEtNjNkMi00MmNlLThmZTAtNWY2OTZlY2RmYmE2IiwgIm5hbWUiOiAiQnJpbGxpYW50IFdhdGNoIiwgInByaWNlIjogIjI1MC4wMCIsICJzdG9jayI6IDIgfScKYCkpLG1keCgicCIsbnVsbCxgVGhlIGNhcnQgZGF0YSBpcyBzdG9yZWQgaW4gYSBoYXNoIGxpa2U6IGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGBIU0VUIGNhcnQ6e2NhcnRJZH0gcHJvZHVjdDp7cHJvZHVjdElkfSB7cHJvZHVjdFF1YW50aXR5fSwgCmApKSxtZHgoInAiLG51bGwsYHdoZXJlIGNhcnRJZCBpcyBhIHJhbmRvbSBnZW5lcmF0ZWQgdmFsdWUgYW5kIHN0b3JlZCBpbiB0aGUgdXNlciBzZXNzaW9uLiBQbGVhc2Ugbm90ZSB0aGF0IFJlZGlz4oCZcyBoYXNoIG1hbmFnZW1lbnQgY29tbWFuZCBIU0VUIHN0b3JlcyAyIGtleXMtY2FydCBhbmQgcHJvZHVjdC1hcyBzaG93biBpbiB0aGUgYmVsb3cgZXhhbXBsZS5gKSxtZHgoImg0Iix7ImlkIjoiZXhhbXBsZS0xIn0sYEV4YW1wbGU6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYEhTRVQgY2FydDo3N2Y3ZmM4ODFlZGMyZjU1OGU2ODNhMjMwZWFjMjE3ZCBwcm9kdWN0OmUxODIxMTVhLTYzZDItNDJjZS04ZmUwLTVmNjk2ZWNkZmJhNiAxCmApKSxtZHgoImg0Iix7ImlkIjoiaG93LXRoZS1kYXRhLWlzLW1vZGlmaWVkIn0sYEhvdyB0aGUgZGF0YSBpcyBtb2RpZmllZDpgKSxtZHgoInAiLG51bGwsYFRoZSBwcm9kdWN0IGRhdGEgaXMgbW9kaWZpZWQgbGlrZSBgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgSlNPTi5TRVQgcHJvZHVjdDp7cHJvZHVjdElkfSAuICd7ICJpZCI6ICJwcm9kdWN0SWQiLCAibmFtZSI6ICJQcm9kdWN0IE5hbWUiLCAicHJpY2UiOiAiMzc1LjAwIiwgInN0b2NrIjoge25ld1N0b2NrfSB9Jy4KYCkpLG1keCgiaDQiLHsiaWQiOiJleGFtcGxlLTIifSxgRXhhbXBsZTpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgSlNPTi5TRVQgcHJvZHVjdDplMTgyMTE1YS02M2QyLTQyY2UtOGZlMC01ZjY5NmVjZGZiYTYgLiAneyAiaWQiOiAiZTE4MjExNWEtNjNkMi00MmNlLThmZTAtNWY2OTZlY2RmYmE2IiwgIm5hbWUiOiAiQnJpbGxpYW50IFdhdGNoIiwgInByaWNlIjogIjI1MC4wMCIsICJzdG9jayI6IDEgfScKYCkpLG1keCgicCIsbnVsbCxgVGhlIGNhcnQgZGF0YSBpcyBtb2RpZmllZCBsaWtlIGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGBIU0VUIGNhcnQ6e2NhcnRJZH0gcHJvZHVjdDp7cHJvZHVjdElkfSB7bmV3UHJvZHVjdFF1YW50aXR5fSBvciBISU5DUkJZIGNhcnQ6e2NhcnRJZH0gcHJvZHVjdDp7cHJvZHVjdElkfSB7aW5jcmVtZW50Qnl9LgpgKSksbWR4KCJoNCIseyJpZCI6ImV4YW1wbGUtMyJ9LGBFeGFtcGxlOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGBIU0VUIGNhcnQ6NzdmN2ZjODgxZWRjMmY1NThlNjgzYTIzMGVhYzIxN2QgcHJvZHVjdDplMTgyMTE1YS02M2QyLTQyY2UtOGZlMC01ZjY5NmVjZGZiYTYgMgoKSElOQ1JCWSBjYXJ0Ojc3ZjdmYzg4MWVkYzJmNTU4ZTY4M2EyMzBlYWMyMTdkIHByb2R1Y3Q6ZTE4MjExNWEtNjNkMi00MmNlLThmZTAtNWY2OTZlY2RmYmE2IDEKCkhJTkNSQlkgY2FydDo3N2Y3ZmM4ODFlZGMyZjU1OGU2ODNhMjMwZWFjMjE3ZCBwcm9kdWN0OmUxODIxMTVhLTYzZDItNDJjZS04ZmUwLTVmNjk2ZWNkZmJhNiAtMQpgKSksbWR4KCJwIixudWxsLGBUaGUgcHJvZHVjdCBjYW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBjYXJ0IGxpa2UgYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYEhERUwgY2FydDp7Y2FydElkfSBwcm9kdWN0Ontwcm9kdWN0SWR9CmApKSxtZHgoImg0Iix7ImlkIjoiZXhhbXBsZS00In0sYEV4YW1wbGU6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYEhERUwgY2FydDo3N2Y3ZmM4ODFlZGMyZjU1OGU2ODNhMjMwZWFjMjE3ZCBwcm9kdWN0OmUxODIxMTVhLTYzZDItNDJjZS04ZmUwLTVmNjk2ZWNkZmJhNgpgKSksbWR4KCJwIixudWxsLGBUaGUgY2FydCBjYW4gYmUgY2xlYXJlZCB1c2luZyBgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgSEdFVEFMTCBjYXJ0OntjYXJ0SWR9IGFuZCB0aGVuIEhERUwgY2FydDp7Y2FydElkfSB7cHJvZHVjdEtleX0gaW4gbG9vcC4KYCkpLG1keCgiaDQiLHsiaWQiOiJleGFtcGxlLTUifSxgRXhhbXBsZTpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgSEdFVEFMTCBjYXJ0Ojc3ZjdmYzg4MWVkYzJmNTU4ZTY4M2EyMzBlYWMyMTdkID0+IHByb2R1Y3Q6ZTE4MjExNWEtNjNkMi00MmNlLThmZTAtNWY2OTZlY2RmYmE2LCBwcm9kdWN0OmY5YTZkMjE0LTFjMzgtNDdhYi1hNjFjLWM5OWE1OTQzOGIxMiwgcHJvZHVjdDoxZjEzMjFiYi0wNTQyLTQ1ZDAtOTYwMS0yYTNkMDA3ZDU4NDIgPT4gSERFTCBjYXJ0Ojc3ZjdmYzg4MWVkYzJmNTU4ZTY4M2EyMzBlYWMyMTdkIHByb2R1Y3Q6ZTE4MjExNWEtNjNkMi00MmNlLThmZTAtNWY2OTZlY2RmYmE2LCBIREVMIGNhcnQ6NzdmN2ZjODgxZWRjMmY1NThlNjgzYTIzMGVhYzIxN2QgcHJvZHVjdDpmOWE2ZDIxNC0xYzM4LTQ3YWItYTYxYy1jOTlhNTk0MzhiMTIsIEhERUwgY2FydDo3N2Y3ZmM4ODFlZGMyZjU1OGU2ODNhMjMwZWFjMjE3ZCBwcm9kdWN0OjFmMTMyMWJiLTA1NDItNDVkMC05NjAxLTJhM2QwMDdkNTg0MgpgKSksbWR4KCJwIixudWxsLGBBbGwgY2FydHMgY2FuIGJlIGRlbGV0ZWQgd2hlbiByZXNldCBkYXRhIGlzIHJlcXVlc3RlZCBsaWtlOiBgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgIFNDQU4ge2N1cnNvcn0gTUFUQ0ggY2FydDoqIGFuZCB0aGVuIERFTCBjYXJ0OntjYXJ0SWR9IGluIGxvb3AuCmApKSxtZHgoImg0Iix7ImlkIjoiZXhhbXBsZS02In0sYEV4YW1wbGU6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYCBTQ0FOIHtjdXJzb3J9IE1BVENIIGNhcnQ6KiA9PiBjYXJ0Ojc3ZjdmYzg4MWVkYzJmNTU4ZTY4M2EyMzBlYWMyMTdkLCBjYXJ0OjIxN2RlZGMyZjU1OGU2ODNhMjMwZWFjNzdmN2ZjODgxLCBjYXJ0OjFlZGU3N2Y1NTg2ODNhMjMwZWFjN2ZjODgyMTdkYzJmID0+IERFTCBjYXJ0Ojc3ZjdmYzg4MWVkYzJmNTU4ZTY4M2EyMzBlYWMyMTdkLCBERUwgY2FydDoyMTdkZWRjMmY1NThlNjgzYTIzMGVhYzc3ZjdmYzg4MSwgREVMIGNhcnQ6MWVkZTc3ZjU1ODY4M2EyMzBlYWM3ZmM4ODIxN2RjMmYKYCkpLG1keCgiaDQiLHsiaWQiOiJob3ctdGhlLWRhdGEtaXMtYWNjZXNzZWQifSxgSG93IHRoZSBkYXRhIGlzIGFjY2Vzc2VkOmApLG1keCgicCIsbnVsbCxgUHJvZHVjdHM6IFNDQU4ge2N1cnNvcn0gTUFUQ0ggcHJvZHVjdDoqIHRvIGdldCBhbGwgcHJvZHVjdCBrZXlzIGFuZCB0aGVuIEpTT04uR0VUIHtwcm9kdWN0S2V5fWApLG1keCgiaDQiLHsiaWQiOiJleGFtcGxlLTcifSxgRXhhbXBsZTpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgU0NBTiB7Y3Vyc29yfSBNQVRDSCBwcm9kdWN0OiogPT4gcHJvZHVjdDplMTgyMTE1YS02M2QyLTQyY2UtOGZlMC01ZjY5NmVjZGZiYTYsIHByb2R1Y3Q6ZjlhNmQyMTQtMWMzOC00N2FiLWE2MWMtYzk5YTU5NDM4YjEyLCBwcm9kdWN0OjFmMTMyMWJiLTA1NDItNDVkMC05NjAxLTJhM2QwMDdkNTg0MiAKPT4gSlNPTi5HRVQgcHJvZHVjdDplMTgyMTE1YS02M2QyLTQyY2UtOGZlMC01ZjY5NmVjZGZiYTYsIEpTT04uR0VUIHByb2R1Y3Q6ZjlhNmQyMTQtMWMzOC00N2FiLWE2MWMtYzk5YTU5NDM4YjEsIEpTT04uR0VUIHByb2R1Y3Q6MWYxMzIxYmItMDU0Mi00NWQwLTk2MDEtMmEzZDAwN2Q1ODQyCmApKSxtZHgoInAiLG51bGwsYENhcnQ6IEhHRVRBTEwgY2FydDp7Y2FydElkfSB0byBnZXQgcXVhbnRpdHkgb2YgcHJvZHVjdHMgYW5kIEpTT04uR0VUIHByb2R1Y3Q6e3Byb2R1Y3RJZH0gdG8gZ2V0IHByb2R1Y3RzIGRhdGEgaW4gbG9vcC5gKSxtZHgoImg0Iix7ImlkIjoiZXhhbXBsZS04In0sYEV4YW1wbGU6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYEhHRVRBTEwgY2FydDo3N2Y3ZmM4ODFlZGMyZjU1OGU2ODNhMjMwZWFjMjE3ZCA9PiBwcm9kdWN0OmUxODIxMTVhLTYzZDItNDJjZS04ZmUwLTVmNjk2ZWNkZmJhNiAocXVhbnRpdHk6IDEpLCBwcm9kdWN0OmY5YTZkMjE0LTFjMzgtNDdhYi1hNjFjLWM5OWE1OTQzOGIxMiAocXVhbnRpdHk6IDApLCBwcm9kdWN0OjFmMTMyMWJiLTA1NDItNDVkMC05NjAxLTJhM2QwMDdkNTg0MiAocXVhbnRpdHk6IDIpID0+IEpTT04uR0VUIHByb2R1Y3Q6ZTE4MjExNWEtNjNkMi00MmNlLThmZTAtNWY2OTZlY2RmYmE2LCBKU09OLkdFVCBwcm9kdWN0OmY5YTZkMjE0LTFjMzgtNDdhYi1hNjFjLWM5OWE1OTQzOGIxMiwgSlNPTi5HRVQgcHJvZHVjdDoxZjEzMjFiYi0wNTQyLTQ1ZDAtOTYwMS0yYTNkMDA3ZDU4NDIKYCkpLG1keCgicCIsbnVsbCxgSEdFVEFMTCByZXR1cm5zIGFuIGFycmF5IG9mIGtleXMgYW5kIGNvcnJlc3BvbmRpbmcgdmFsdWVzIGZyb20gaGFzaCBkYXRhIHR5cGUuCk9wZW4gdXAgUmVkaXNDbGllbnQuanMgZmlsZSB1c2luZyB5b3VyIGZhdm91cml0ZSBlZGl0b3IgYXMgc2hvd24gYmVsb3c6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYC8vIHNlcnZpY2VzL1JlZGlzQ2xpZW50LmpzCgpjb25zdCB7IHByb21pc2lmeSB9ID0gcmVxdWlyZSgndXRpbCcpOwoKY2xhc3MgUmVkaXNDbGllbnQgewogICAgY29uc3RydWN0b3IocmVkaXNDbGllbnQpIHsKICAgICAgICBbJ2pzb25fZ2V0JywgJ2pzb25fc2V0JywgJ2hnZXRhbGwnLCAnaHNldCcsICdoZ2V0JywgJ2hkZWwnLCAnaGluY3JieScsICdkZWwnLCAnc2NhbiddLmZvckVhY2goCiAgICAgICAgICAgIG1ldGhvZCA9PiAocmVkaXNDbGllbnRbbWV0aG9kXSA9IHByb21pc2lmeShyZWRpc0NsaWVudFttZXRob2RdKSkKICAgICAgICApOwogICAgICAgIHRoaXMucmVkaXMgPSByZWRpc0NsaWVudDsKICAgIH0KCiAgICBhc3luYyBzY2FuKHBhdHRlcm4pIHsKICAgICAgICBsZXQgbWF0Y2hpbmdLZXlzQ291bnQgPSAwOwogICAgICAgIGxldCBrZXlzID0gW107CgogICAgICAgIGNvbnN0IHJlY3Vyc2l2ZVNjYW4gPSBhc3luYyAoY3Vyc29yID0gJzAnKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IFtuZXdDdXJzb3IsIG1hdGNoaW5nS2V5c10gPSBhd2FpdCB0aGlzLnJlZGlzLnNjYW4oY3Vyc29yLCAnTUFUQ0gnLCBwYXR0ZXJuKTsKICAgICAgICAgICAgY3Vyc29yID0gbmV3Q3Vyc29yOwoKICAgICAgICAgICAgbWF0Y2hpbmdLZXlzQ291bnQgKz0gbWF0Y2hpbmdLZXlzLmxlbmd0aDsKICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KG1hdGNoaW5nS2V5cyk7CgogICAgICAgICAgICBpZiAoY3Vyc29yID09PSAnMCcpIHsKICAgICAgICAgICAgICAgIHJldHVybiBrZXlzOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlY3Vyc2l2ZVNjYW4oY3Vyc29yKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHJldHVybiBhd2FpdCByZWN1cnNpdmVTY2FuKCk7CiAgICB9CgogICAganNvbkdldChrZXkpIHsKICAgICAgICByZXR1cm4gdGhpcy5yZWRpcy5qc29uX2dldChrZXkpOwogICAgfQoKICAgIGpzb25TZXQoa2V5LCBwYXRoLCBqc29uKSB7CiAgICAgICAgcmV0dXJuIHRoaXMucmVkaXMuanNvbl9zZXQoa2V5LCBwYXRoLCBqc29uKTsKICAgIH0KCiAgICBoZ2V0YWxsKGtleSkgewogICAgICAgIHJldHVybiB0aGlzLnJlZGlzLmhnZXRhbGwoa2V5KTsKICAgIH0KCiAgICBoc2V0KGhhc2gsIGtleSwgdmFsdWUpIHsKICAgICAgICByZXR1cm4gdGhpcy5yZWRpcy5oc2V0KGhhc2gsIGtleSwgdmFsdWUpOwogICAgfQoKICAgIGhnZXQoaGFzaCwga2V5KSB7CiAgICAgICAgcmV0dXJuIHRoaXMucmVkaXMuaGdldChoYXNoLCBrZXkpOwogICAgfQoKICAgIGhkZWwoaGFzaCwga2V5KSB7CiAgICAgICAgcmV0dXJuIHRoaXMucmVkaXMuaGRlbChoYXNoLCBrZXkpOwogICAgfQoKICAgIGhpbmNyYnkoaGFzaCwga2V5LCBpbmNyKSB7CiAgICAgICAgcmV0dXJuIHRoaXMucmVkaXMuaGluY3JieShoYXNoLCBrZXksIGluY3IpOwogICAgfQoKICAgIGRlbChrZXkpIHsKICAgICAgICByZXR1cm4gdGhpcy5yZWRpcy5kZWwoa2V5KTsKICAgIH0KfQoKbW9kdWxlLmV4cG9ydHMgPSBSZWRpc0NsaWVudDsKYCkpLG1keCgiaDQiLHsiaWQiOiJob3ctZG9lcy10aGUtb3ZlcmFsbC1wcm9jZXNzLXdvcmsifSxgSG93IGRvZXMgdGhlIG92ZXJhbGwgcHJvY2VzcyB3b3JrP2ApLG1keCgicCIsbnVsbCxgVGhlIHByb2Nlc3MgZmxvdyBpcyBmYWlybHkgc3RyYWlnaHRmb3J3YXJkLiBPbmNlIGEgcmVxdWVzdCBpcyBzZW50IHRvIGFuIGVuZHBvaW50IG9uIHRoaXMgc2hvcHBpbmcgY2FydCBhcHBsaWNhdGlvbiBlLmcgaHR0cDovL2xvY2FsaG9zdDo4MDgxLy4gSXQgZmlyc3QgaGl0cyB0aGUgcm91dGVyIGZvciB0aGF0IGVuZHBvaW50IGFuZCB0aGVuIGlmIGl0IGlzIGEgcHVibGljIGVuZHBvaW50IHN1Y2ggYXMgdGhpcyBvbmUgaXQgZ29lcyB0byB0aGUgY29udHJvbGxlciB0aGF0IGhhbmRsZXMgdGhhdC4gIEFzIGFuIGFuYWxvZ3ksIHRoZSBjb250cm9sbGVyIGlzIGp1c3QgbGlrZSBhIG1hbmFnZXIsIHdoaWxlIHRoZSBzZXJ2aWNlIGlzIHRoZSB3b3JrZXIuIEEgY29udHJvbGxlciBtYW5hZ2VzIHRoZSBpbmNvbWluZyB3b3JrIEhUVFAgcmVxdWVzdHMgd2hlcmVhcyBzZXJ2aWNlcyByZWNlaXZlcyB0aGUgcmVxdWVzdCBkYXRhIGl0IG5lZWRzIGZyb20gdGhlIG1hbmFnZXIgaW4gb3JkZXIgdG8gcGVyZm9ybSBpdHMgdGFza3NgKSxtZHgoInAiLG51bGwsYE5leHQsIHdlIGNyZWF0ZSByb3V0ZXMgZm9yIGEgY2FydCBpbiBhIG1vZHVsZSBuYW1lZCBjYXJ0LmpzLiBUaGUgY29kZSBmaXJzdCBpbXBvcnRzIHRoZSBFeHByZXNzIGFwcGxpY2F0aW9uIG9iamVjdCwgdXNlcyBpdCB0byBnZXQgYSBSb3V0ZXIgb2JqZWN0IGFuZCB0aGVuIGFkZHMgYSBjb3VwbGUgb2Ygcm91dGVzIHRvIGl0IHVzaW5nIHRoZSBnZXQoKSBtZXRob2QuIExhc3Qgb2YgYWxsIHRoZSBtb2R1bGUgcmV0dXJucyB0aGUgUm91dGVyIG9iamVjdC5gKSxtZHgoInAiLG51bGwsYEZpcnN0IGxldCB1cyBkZWZpbmUgdGhlIHByb2R1Y3QgbW9kZWwgdG8gb3VyIGNvbnRyb2xsZXJzL1Byb2R1Y3QvSW5kZXhDb250cm9sbGVyLmpzIGZpbGUoYCxtZHgoImEiLHtwYXJlbnROYW1lOiJwIiwiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS9yZWRpcy1kZXZlbG9wZXIvYmFzaWMtcmVkaXMtc2hvcHBpbmctY2hhcnQtbm9kZWpzL3RyZWUvbWFpbi9zZXJ2ZXIvc3JjL2NvbnRyb2xsZXJzL1Byb2R1Y3QifSxgaHR0cHM6Ly9naXRodWIuY29tL3JlZGlzLWRldmVsb3Blci9iYXNpYy1yZWRpcy1zaG9wcGluZy1jaGFydC1ub2RlanMvdHJlZS9tYWluL3NlcnZlci9zcmMvY29udHJvbGxlcnMvUHJvZHVjdGApLGApOmApLG1keCgicCIsbnVsbCxgT3VyIHByb2R1Y3QgbW9kZWwgd2lsbCBiZSBiYXNpYyBhcyBwb3NzaWJsZSBhcyBpdCBob2xkcyB0aGUgcHJvZHVjdCBuYW1lLCBwcmljZSBhbmQgaW1hZ2UuYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYHsKICAgICJwcm9kdWN0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJlMTgyMTE1YS02M2QyLTQyY2UtOGZlMC01ZjY5NmVjZGZiYTYiLAogICAgICAgICAgICAibmFtZSI6ICJCcmlsbGlhbnQgV2F0Y2giLAogICAgICAgICAgICAicHJpY2UiOiAiMjUwLjAwIiwKICAgICAgICAgICAgInN0b2NrIjogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZjlhNmQyMTQtMWMzOC00N2FiLWE2MWMtYzk5YTU5NDM4YjEyIiwKICAgICAgICAgICAgIm5hbWUiOiAiT2xkIGZhc2hpb24gY2VsbHBob25lIiwKICAgICAgICAgICAgInByaWNlIjogIjI0LjAwIiwKICAgICAgICAgICAgInN0b2NrIjogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMWYxMzIxYmItMDU0Mi00NWQwLTk2MDEtMmEzZDAwN2Q1ODQyIiwKICAgICAgICAgICAgIm5hbWUiOiAiTW9kZXJuIGlQaG9uZSIsCiAgICAgICAgICAgICJwcmljZSI6ICIxMDAwLjAwIiwKICAgICAgICAgICAgInN0b2NrIjogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZjUzODRlZmMtZWFkYi00ZDdiLWExMzEtMzY1MTYyNjljMjE4IiwKICAgICAgICAgICAgIm5hbWUiOiAiQmVhdXRpZnVsIFN1bmdsYXNzZXMiLAogICAgICAgICAgICAicHJpY2UiOiAiMTIuMDAiLAogICAgICAgICAgICAic3RvY2siOiAyCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI2ZDZjYTg5ZC1mYmMyLTRmYzItOTNkMC02ZWU0NmFlOTczNDUiLAogICAgICAgICAgICAibmFtZSI6ICJTdHlsaXNoIEN1cCIsCiAgICAgICAgICAgICJwcmljZSI6ICI4LjAwIiwKICAgICAgICAgICAgInN0b2NrIjogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZWZlMGM3YTMtOTgzNS00ZGZiLTg3ZTEtNTc1YjdkMDY3MDFhIiwKICAgICAgICAgICAgIm5hbWUiOiAiSGVyYiBjYXBzIiwKICAgICAgICAgICAgInByaWNlIjogIjEyLjAwIiwKICAgICAgICAgICAgInN0b2NrIjogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiaWQiOiAieDM0MTExNWEtNjNkMi00MmNlLThmZTAtNWY2OTZlY2RmY2E2IiwKICAgICAgICAgICAgIm5hbWUiOiAiQXVkaW9waGlsZSBIZWFkcGhvbmVzIiwKICAgICAgICAgICAgInByaWNlIjogIjU1MC4wMCIsCiAgICAgICAgICAgICJzdG9jayI6IDIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjQyODYwNDkxLTlmMTUtNDNkNC1hZGViLTBkYjJjYzk5MTc0YSIsCiAgICAgICAgICAgICJuYW1lIjogIkRpZ2l0YWwgQ2FtZXJhIiwKICAgICAgICAgICAgInByaWNlIjogIjIyNS4wMCIsCiAgICAgICAgICAgICJzdG9jayI6IDIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjYzYTNjNjM1LTQ1MDUtNDU4OC04NDU3LWVkMDRmYmI3NjUxMSIsCiAgICAgICAgICAgICJuYW1lIjogIkVtcHR5IEJsdXJheSBEaXNjIiwKICAgICAgICAgICAgInByaWNlIjogIjUuMDAiLAogICAgICAgICAgICAic3RvY2siOiAyCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI5N2ExOTg0Mi1kYjMxLTQ1MzctOTI0MS01MDUzZDdjOTYyMzkiLAogICAgICAgICAgICAibmFtZSI6ICIyNTZCRyBQZW5kcml2ZSIsCiAgICAgICAgICAgICJwcmljZSI6ICI2MC4wMCIsCiAgICAgICAgICAgICJzdG9jayI6IDIKICAgICAgICB9CiAgICBdCn0KYCkpLG1keCgiaDQiLHsiaWQiOiJ0ZXN0aW5nLXRoZS1zZXJ2ZXIifSxgVGVzdGluZyB0aGUgU2VydmVyYCksbWR4KCJwIixudWxsLGBDb3B5IGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGAuZW52LmV4YW1wbGVgKSxgIHRvIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGAuZW52YCksYCBmaWxlIGFuZCBmaWxsIGVudmlyb25tZW50YWwgdmFyaWFibGVzIGFzIHNob3duIGJlbG93OmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGBSRURJU19QT1JUPTYzNzkKUkVESVNfSE9TVD0xMjcuMC4wLjEKUkVESVNfUEFTU1dPUkQ9ZGVtbwoKQ09NUE9TRV9QUk9KRUNUX05BTUU9cmVkaXMtc2hvcHBpbmctY2FydApgKSksbWR4KCJwIixudWxsLGAoTm90ZTogSW4gY2FzZSB5b3XigJlyZSB1c2luZyBSZWRpcyBFbnRlcnByaXNlIENsb3VkIGluc3RlYWQgb2YgbG9jYWxob3N0LCB0aGVuIHlvdSBuZWVkIHRvIGVudGVyIHRoZSBkYXRhYmFzZSBlbmRwb2ludCB1bmRlciBSRURJU19IT1NUKHdpdGhvdXQgcG9ydCkgd2hpbGUgcmVzdCBvZiB0aGUgZW50cmllcyBsaWtlIFJFRElTX1BPUlQgYW5kIFJFRElTX1BBU1NXT1JEIGFyZSBxdWl0ZSBvYnZpb3VzKWApLG1keCgiaDQiLHsiaWQiOiJpbnN0YWxsaW5nLXRoZS1kZXBlbmRlbmNpZXMifSxgSW5zdGFsbGluZyB0aGUgZGVwZW5kZW5jaWVzYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYCQgbnBtIGluc3RhbGwKYCkpLG1keCgiaDQiLHsiaWQiOiJ0ZXN0aW5nLXRoZS1yb3V0ZXMifSxgVGVzdGluZyB0aGUgUm91dGVzYCksbWR4KCJwIixudWxsLGBBZnRlciBhZGRpbmcgdGhpcywgeW91IGNhbiBydW4geW91ciBhcHBsaWNhdGlvbiBieSB0eXBpbmcgbnBtIGluc3RhbGwgaW4geW91ciB0ZXJtaW5hbC4gT25jZSB5b3UgcnVuIHRoaXMgY29tbWFuZCwgaXQgd2lsbCByZXR1cm4gQXBwbGljYXRpb24gaXMgcnVubmluZyBvbiAzMDAwLmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGAkIG5wbSBydW4gZGV2CmApKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgJCBucG0gcnVuIGRldgoKPiByZWRpcy1zaG9wcGluZy1jYXJ0LWJhY2tlbmRAMS4wLjAgZGV2Cj4gbm9kZW1vbiBzcmMvaW5kZXguanMKCltub2RlbW9uXSAyLjAuNwpbbm9kZW1vbl0gdG8gcmVzdGFydCBhdCBhbnkgdGltZSwgZW50ZXIgXGByc1xgCltub2RlbW9uXSB3YXRjaGluZyBwYXRoKHMpOiAqLioKW25vZGVtb25dIHdhdGNoaW5nIGV4dGVuc2lvbnM6IGpzLG1qcyxqc29uCltub2RlbW9uXSBzdGFydGluZyBcYG5vZGUgc3JjL2luZGV4LmpzXGAKQXBwIGxpc3RlbmluZyBvbiBwb3J0IDMwMDAKYCkpLG1keCgiaDMiLHsiaWQiOiJzZXR0aW5nLXVwLXRoZS1mcm9udGVuZC13ZWItY2xpZW50LXVzaW5nLXZ1ZWpzIn0sYFNldHRpbmcgdXAgdGhlIGZyb250ZW5kIHdlYiBDbGllbnQgdXNpbmcgVnVlLmpzYCksbWR4KCJwIixudWxsLGBOb3cgdGhhdCB3ZSBoYXZlIHRoZSBhcHBsaWNhdGlvbuKAmXMgYmFja2VuZCBydW5uaW5nLCBsZXQgdXMgYmVnaW4gZGV2ZWxvcGluZyBpdHMgZnJvbnRlbmQuIFdlIHdpbGwgYmUgbGV2ZXJhZ2luZyBWdWUuanMgLSBhIHJvYnVzdCBidXQgc2ltcGxlIEphdmFTY3JpcHQgZnJhbWV3b3JrIGZvciBidWlsZGluZyBvdXIgZnJvbnRlbmQgd2ViIGNsaWVudC4gSXQgaGFzIG9uZSBvZiB0aGUgbG93ZXN0IGJhcnJpZXJzIHRvIGVudHJ5IG9mIGFueSBtb2Rlcm4gZnJhbWV3b3JrIHdoaWxlIHByb3ZpZGluZyBhbGwgdGhlIHJlcXVpcmVkIGZlYXR1cmVzIGZvciBoaWdoIHBlcmZvcm1hbmNlIHdlYiBhcHBsaWNhdGlvbnMuYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYC4K4pSc4pSA4pSAIFJFQURNRS5tZArilJzilIDilIAgYmFiZWwuY29uZmlnLmpzCuKUnOKUgOKUgCBub2RlX21vZHVsZXMK4pSc4pSA4pSAIHBhY2thZ2UtbG9jay5qc29uCuKUnOKUgOKUgCBwYWNrYWdlLmpzb24K4pSc4pSA4pSAIHB1YmxpYwrilJzilIDilIAgc3JjCuKUlOKUgOKUgCB2dWUuY29uZmlnLmpzCmApKSxtZHgoInAiLG51bGwsYFRoZSBmaWxlcyBhdCB0aGUgcm9vdCBsZXZlbCAoYmFiZWwuY29uZmlnLmpzLCBwYWNrYWdlLmpzb24sIG5vZGVfbW9kdWxlcykgYXJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBwcm9qZWN0LgpUaGUgbW9zdCBpbnRlcmVzdGluZyBwYXJ0LCBhdCBsZWFzdCBmb3Igbm93LCBpcyBsb2NhdGVkIGluIHRoZSBzcmMgZGlyZWN0b3J5KGRpcmVjdG9yeSBzdHJ1Y3R1cmUgaXMgc2hvd24gYmVsb3cpOmApLG1keCgicCIsbnVsbCxgVGhlIG1haW4uanMgZmlsZSBpcyB0aGUgbWFpbiBKYXZhU2NyaXB0IGZpbGUgb2YgdGhlIGFwcGxpY2F0aW9uLCB3aGljaCB3aWxsIGxvYWQgYWxsIGNvbW1vbiBlbGVtZW50cyBhbmQgY2FsbCB0aGUgQXBwLnZ1ZSBtYWluIHNjcmVlbi4KVGhlIEFwcC52dWUgaXMgYSBmaWxlIHRoYXQgY29udGFpbnMgaW4gdGhlIEhUTUwsIENTUywgYW5kIEphdmFTY3JpcHQgZm9yIGEgc3BlY2lmaWMgcGFnZSBvciB0ZW1wbGF0ZS4gQXMgYW4gZW50cnkgcG9pbnQgZm9yIHRoZSBhcHBsaWNhdGlvbiwgdGhpcyBwYXJ0IGlzIHNoYXJlZCBieSBhbGwgc2NyZWVucyBieSBkZWZhdWx0LCBzbyBpdCBpcyBhIGdvb2QgcGxhY2UgdG8gd3JpdGUgdGhlIG5vdGlmaWNhdGlvbi1jbGllbnQgcGllY2UgaW4gdGhpcyBmaWxlLgpUaGUgcHVibGljL2luZGV4Lmh0bWwgaXMgdGhlIHN0YXRpYyBlbnRyeSBwb2ludCBmcm9tIHdoZXJlIHRoZSBET00gd2lsbCBiZSBsb2FkZWQuIGApLG1keCgiaDQiLHsiaWQiOiJkaXJlY3Rvcnktc3RydWN0dXJlIn0sYERpcmVjdG9yeSBTdHJ1Y3R1cmU6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYCUgdHJlZQouCuKUnOKUgOKUgCBBcHAudnVlCuKUnOKUgOKUgCBhc3NldHMK4pSCICAg4pSc4pSA4pSAIFJlZGlzTGFic19JbGx1c3RyYXRpb24uc3ZnCuKUgiAgIOKUlOKUgOKUgCBwcm9kdWN0cwrilIIgICAgICAg4pSc4pSA4pSAIDFmMTMyMWJiLTA1NDItNDVkMC05NjAxLTJhM2QwMDdkNTg0Mi5qcGcK4pSCICAgICAgIOKUnOKUgOKUgCA0Mjg2MDQ5MS05ZjE1LTQzZDQtYWRlYi0wZGIyY2M5OTE3NGEuanBnCuKUgiAgICAgICDilJzilIDilIAgNjNhM2M2MzUtNDUwNS00NTg4LTg0NTctZWQwNGZiYjc2NTExLmpwZwrilIIgICAgICAg4pSc4pSA4pSAIDZkNmNhODlkLWZiYzItNGZjMi05M2QwLTZlZTQ2YWU5NzM0NS5qcGcK4pSCICAgICAgIOKUnOKUgOKUgCA5N2ExOTg0Mi1kYjMxLTQ1MzctOTI0MS01MDUzZDdjOTYyMzkuanBnCuKUgiAgICAgICDilJzilIDilIAgZTE4MjExNWEtNjNkMi00MmNlLThmZTAtNWY2OTZlY2RmYmE2LmpwZwrilIIgICAgICAg4pSc4pSA4pSAIGVmZTBjN2EzLTk4MzUtNGRmYi04N2UxLTU3NWI3ZDA2NzAxYS5qcGcK4pSCICAgICAgIOKUnOKUgOKUgCBmNTM4NGVmYy1lYWRiLTRkN2ItYTEzMS0zNjUxNjI2OWMyMTguanBnCuKUgiAgICAgICDilJzilIDilIAgZjlhNmQyMTQtMWMzOC00N2FiLWE2MWMtYzk5YTU5NDM4YjEyLmpwZwrilIIgICAgICAg4pSU4pSA4pSAIHgzNDExMTVhLTYzZDItNDJjZS04ZmUwLTVmNjk2ZWNkZmNhNi5qcGcK4pSc4pSA4pSAIGNvbXBvbmVudHMK4pSCICAg4pSc4pSA4pSAIENhcnQudnVlCuKUgiAgIOKUnOKUgOKUgCBDYXJ0SXRlbS52dWUK4pSCICAg4pSc4pSA4pSAIENhcnRMaXN0LnZ1ZQrilIIgICDilJzilIDilIAgSW5mby52dWUK4pSCICAg4pSc4pSA4pSAIFByb2R1Y3QudnVlCuKUgiAgIOKUnOKUgOKUgCBQcm9kdWN0TGlzdC52dWUK4pSCICAg4pSU4pSA4pSAIFJlc2V0RGF0YUJ0bi52dWUK4pSc4pSA4pSAIGNvbmZpZwrilIIgICDilJTilIDilIAgaW5kZXguanMK4pSc4pSA4pSAIG1haW4uanMK4pSc4pSA4pSAIHBsdWdpbnMK4pSCICAg4pSc4pSA4pSAIGF4aW9zLmpzCuKUgiAgIOKUlOKUgOKUgCB2dWV0aWZ5LmpzCuKUnOKUgOKUgCBzdG9yZQrilIIgICDilJzilIDilIAgaW5kZXguanMK4pSCICAg4pSU4pSA4pSAIG1vZHVsZXMK4pSCICAgICAgIOKUnOKUgOKUgCBjYXJ0LmpzCuKUgiAgICAgICDilJTilIDilIAgcHJvZHVjdHMuanMK4pSU4pSA4pSAIHN0eWxlcwogICAg4pSU4pSA4pSAIHN0eWxlcy5zY3NzCgo4IGRpcmVjdG9yaWVzLCAyNyBmaWxlcwpgKSksbWR4KCJwIixudWxsLGBJbiB0aGUgY2xpZW50IGRpcmVjdG9yeSwgdW5kZXIgdGhlIHN1YmRpcmVjdG9yeSBzcmMsIG9wZW4gdGhlIGZpbGUgQXBwLnZ1ZS4gWW91IHdpbGwgc2VlIHRoZSBiZWxvdyBjb250ZW50OmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGA8dGVtcGxhdGU+CiAgICA8di1hcHA+CiAgICAgICAgPHYtY29udGFpbmVyPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS04IGQtZmxleCBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGEtNCByb3VuZGVkLWxnIHJlZCBkYXJrZW4tMSI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0id2hpdGUiIHNpemU9IjQ1Ij5tZGktY2FydC1wbHVzPC92LWljb24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ibWwtNiBmb250LXdlaWdodC1yZWd1bGFyIj5TaG9wcGluZyBDYXJ0IGRlbW88L2gxPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3YtY29udGFpbmVyPgoKICAgICAgICA8di1jb250YWluZXI+CiAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjciIG1kPSI4Ij4KICAgICAgICAgICAgICAgICAgICA8aW5mbyAvPgogICAgICAgICAgICAgICAgICAgIDxwcm9kdWN0LWxpc3QgOnByb2R1Y3RzPSJwcm9kdWN0cyIgLz4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSI1IiBtZD0iNCIgY2xhc3M9ImQtZmxleCBmbGV4LWNvbHVtbiI+CiAgICAgICAgICAgICAgICAgICAgPGNhcnQgLz4KICAgICAgICAgICAgICAgICAgICA8cmVzZXQtZGF0YS1idG4gY2xhc3M9Im10LTYiIC8+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICA8L3Ytcm93PgoKICAgICAgICAgICAgPHYtZm9vdGVyIGNsYXNzPSJtdC0xMiBwYS0wIj4KICAgICAgICAgICAgICAgIMKpIENvcHlyaWdodCAyMDIxIHwgQWxsIFJpZ2h0cyBSZXNlcnZlZCB0byBSZWRpcyBMYWJzCiAgICAgICAgICAgIDwvdi1mb290ZXI+CiAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgIDwvdi1hcHA+CjwvdGVtcGxhdGU+Cgo8c2NyaXB0PgppbXBvcnQgeyBtYXBHZXR0ZXJzLCBtYXBBY3Rpb25zIH0gZnJvbSAndnVleCc7CmltcG9ydCBDYXJ0IGZyb20gJ0AvY29tcG9uZW50cy9DYXJ0JzsKaW1wb3J0IFByb2R1Y3RMaXN0IGZyb20gJ0AvY29tcG9uZW50cy9Qcm9kdWN0TGlzdCc7CmltcG9ydCBSZXNldERhdGFCdG4gZnJvbSAnQC9jb21wb25lbnRzL1Jlc2V0RGF0YUJ0bi52dWUnOwppbXBvcnQgSW5mbyBmcm9tICdAL2NvbXBvbmVudHMvSW5mbyc7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAnQXBwJywKCiAgICBjb21wb25lbnRzOiB7CiAgICAgICAgUHJvZHVjdExpc3QsCiAgICAgICAgQ2FydCwKICAgICAgICBSZXNldERhdGFCdG4sCiAgICAgICAgSW5mbwogICAgfSwKCiAgICBjb21wdXRlZDogewogICAgICAgIC4uLm1hcEdldHRlcnMoewogICAgICAgICAgICBwcm9kdWN0czogJ3Byb2R1Y3RzL2dldFByb2R1Y3RzJwogICAgICAgIH0pCiAgICB9LAoKICAgIGFzeW5jIGNyZWF0ZWQoKSB7CiAgICAgICAgYXdhaXQgdGhpcy5mZXRjaFByb2R1Y3RzKCk7CiAgICB9LAoKICAgIG1ldGhvZHM6IHsKICAgICAgICAuLi5tYXBBY3Rpb25zKHsKICAgICAgICAgICAgZmV0Y2hQcm9kdWN0czogJ3Byb2R1Y3RzL2ZldGNoJwogICAgICAgIH0pCiAgICB9Cn07Cjwvc2NyaXB0PgpgKSksbWR4KCJwIixudWxsLGBUaGlzIGlzIGNsaWVudC1zaWRlIGNvZGUuIEhlcmUgQVBJIHJldHVybnMsIGFtb25nIG90aGVyIHRoaW5ncywgbGlua3MgdG8gaWNvbnMgc3VpdGFibGUgZm9yIHVzZSBvbiBNYXBzLiBJZiB5b3UgZm9sbG93IHRoZSBmbG93IHRocm91Z2gsIHlvdeKAmWxsIHNlZSB0aGUgbWFwIG1hcmtlcnMgYXJlIGxvYWRpbmcgdGhvc2UgaWNvbnMgZGlyZWN0bHkgdXNpbmcgdGhlIGluY2x1ZGUgVVJMcy5gKSxtZHgoImgzIix7ImlkIjoicnVubmluZ3Rlc3RpbmctdGhlLXdlYi1jbGllbnQifSxgUnVubmluZy9UZXN0aW5nIHRoZSB3ZWIgY2xpZW50YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYCQgY2QgY2xpZW50CiQgbnBtIHJ1biBzZXJ2ZSAKCj4gcmVkaXMtc2hvcHBpbmctY2FydC1jbGllbnRAMS4wLjAgc2VydmUKPiB2dWUtY2xpLXNlcnZpY2Ugc2VydmUKCiBJTkZPICBTdGFydGluZyBkZXZlbG9wbWVudCBzZXJ2ZXIuLi4KOTglIGFmdGVyIGVtaXR0aW5nIENvcHlQbHVnaW4KCiBET05FICBDb21waWxlZCBzdWNjZXNzZnVsbHkgaW4gNzczM21zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNzoxNTo1NiBBTQoKCiAgQXBwIHJ1bm5pbmcgYXQ6CiAgLSBMb2NhbDogICBodHRwOi8vbG9jYWxob3N0OjgwODEvIAogIC0gTmV0d29yazogaHR0cDovLzE5Mi4xNjguNDMuODE6ODA4MS8KCiAgTm90ZSB0aGF0IHRoZSBkZXZlbG9wbWVudCBidWlsZCBpcyBub3Qgb3B0aW1pemVkLgogIFRvIGNyZWF0ZSBhIHByb2R1Y3Rpb24gYnVpbGQsIHJ1biBucG0gcnVuIGJ1aWxkLgpgKSksbWR4KCJwIixudWxsLGBMZXQgdXMgY2xpY2sgb24gdGhlIGZpcnN0IGl0ZW0g4oCcMjU2R0IgUGVuZHJpdmXigJ0gYW5kIHRyeSB0byBjaGVjayBvdXQgdGhpcyBwcm9kdWN0LiBPbmNlIHlvdSBhZGQgaXQgdG8gdGhlIGNhcnQsIHlvdSB3aWxsIHNlZSB0aGUgYmVsb3cgb3V0cHV0IHVzaW5nIHJlZGlzLWNsaSBtb25pdG9yIGNvbW1hbmQ6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIn0sYDE2MTMzMjAyNTYuODAxNTYyIFswIDE3Mi4yMi4wLjE6NjQ0MjBdICJqc29uLmdldCIgInByb2R1Y3Q6OTdhMTk4NDItZGIzMS00NTM3LTkyNDEtNTA1M2Q3Yzk2MjM5IgoxNjEzMzIwMjU2LjgwMzA2MiBbMCAxNzIuMjIuMC4xOjY0NDIwXSAiaGdldCIgCi4uLgoxNjEzMzIwMjU2LjgwNTk1MCBbMCAxNzIuMjIuMC4xOjY0NDIwXSAianNvbi5zZXQiICJwcm9kdWN0Ojk3YTE5ODQyLWRiMzEtNDUzNy05MjQxLTUwNTNkN2M5NjIzOSIgIi4iICJ7XFwiaWRcXCI6XFwiOTdhMTk4NDItZGIzMS00NTM3LTkyNDEtNTA1M2Q3Yzk2MjM5XFwiLFxcIm5hbWVcXCI6XFwiMjU2QkcgUGVuZHJpdmVcXCIsXFwicHJpY2VcXCI6XFwiNjAuMDBcXCIsXFwic3RvY2tcXCI6MX0iCjE2MTMzMjAyNTYuODA3NzkyIFswIDE3Mi4yMi4wLjE6NjQ0MjBdICJzZXQiICJzZXNzOklpOW5qWFpkNnplVVZpTDN0S0ppbU41elU3U2FtZnplIiAKLi4uCjE2MTMzMjAyNTYuODIzMDU1IFswIDE3Mi4yMi4wLjE6NjQ0MjBdICJzY2FuIiAiMCIgIk1BVENIIiAicHJvZHVjdDoqIgouLi4KMTYxMzMyMDI2My4yMzI1MjcgWzAgMTcyLjIyLjAuMTo2NDQyMF0gImhnZXRhbGwiICJjYXJ0OmJkZWUxNjA2Mzk1ZjY5OTg1ZThmOGUwMWQzYWRhOGM0IgoxNjEzMzIwMjYzLjIzMzc1MiBbMCAxNzIuMjIuMC4xOjY0NDIwXSAic2V0IiAic2VzczpnWGs1Szlib2J2clI3OTAtSEZFb2kzYlEya1A5WW1qViIgIntcXCJjb29raWVcXCI6e1xcIm9yaWdpbmFsTWF4QWdlXFwiOjEwODAwMDAwLFxcImV4cGlyZXNcXCI6XFwiMjAyMS0wMi0xNFQxOTozMTowMy4yMzNaXFwiLFxcImh0dHBPbmx5XFwiOnRydWUsXFwicGF0aFxcIjpcXCIvXFwifSxcXCJjYXJ0SWRcXCI6XFwiYmRlZTE2MDYzOTVmNjk5ODVlOGY4ZTAxZDNhZGE4YzRcXCJ9IiAiRVgiICIxMDgwMCIKMTYxMzMyMDI2My4yNDA3OTcgWzAgMTcyLjIyLjAuMTo2NDQyMF0gInNjYW4iICIwIiAiTUFUQ0giICJwcm9kdWN0OioiCjE2MTMzMjAyNjMuMjQxOTA4IFswIDE3Mi4yMi4wLjE6NjQ0MjBdICJzY2FuIiAiMjIiICJNQVRDSCIgInByb2R1Y3Q6KiIK4oCmCiJ7XFwiY29va2llXFwiOntcXCJvcmlnaW5hbE1heEFnZVxcIjoxMDgwMDAwMCxcXCJleHBpcmVzXFwiOlxcIjIwMjEtMDItMTRUMTk6MzE6MDMuMjU0WlxcIixcXCJodHRwT25seVxcIjp0cnVlLFxcInBhdGhcXCI6XFwiL1xcIn0sXFwiY2FydElkXFwiOlxcIjRiYzIzMTI5M2M1MzQ1MzcwZjhmYWI4M2FmZjUyY2YzXFwifSIgIkVYIiAiMTA4MDAiCmApKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6IlNob3BwaW5nIENhcnQiLHNyYzpyZXF1aXJlKCIhdXJsLWxvYWRlcj9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtoYXNoXS5bZXh0XSZmYWxsYmFjaz1maWxlLWxvYWRlciEuL3Nob3BwaW5nY2FydDUucG5nIikuZGVmYXVsdH0pKSxtZHgoImgzIix7ImlkIjoiY29uY2x1c2lvbiJ9LGBDb25jbHVzaW9uYCksbWR4KCJwIixudWxsLGBTdG9yaW5nIHNob3BwaW5nIGNhcnQgZGF0YSBpbiBSZWRpcyBpcyBhIGdvb2QgaWRlYSBiZWNhdXNlIGl0IGxldHMgeW91IHJldHJpZXZlIHRoZSBkYXRhIHZlcnkgZmFzdCBhdCBhbnkgdGltZSBhbmQgcGVyc2lzdCB0aGlzIGRhdGEgaWYgbmVlZGVkLiBBcyBjb21wYXJlZCB0byBjb29raWVzIHRoYXQgc3RvcmUgdGhlIGVudGlyZSBzaG9wcGluZyBjYXJ0IGRhdGEgaW4gc2Vzc2lvbiB0aGF0IGlzIGJsb2F0ZWQgYW5kIHJlbGF0aXZlbHkgc2xvdyBpbiBvcGVyYXRpb24sIHN0b3JpbmcgdGhlIHNob3BwaW5nIGNhcnQgZGF0YSBpbiBSZWRpcyBzcGVlZHMgdXAgdGhlIHNob3BwaW5nIGNhcnTigJlzIHJlYWQgYW5kIHdyaXRlIHBlcmZvcm1hbmNlICwgdGhlcmVieSBpbXByb3ZpbmcgdGhlIHVzZXIgZXhwZXJpZW5jZS5gKSxtZHgoImgzIix7ImlkIjoicmVmZXJlbmNlIn0sYFJlZmVyZW5jZWApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJhIix7cGFyZW50TmFtZToibGkiLCJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL3JlZGlzLWRldmVsb3Blci9iYXNpYy1yZWRpcy1zaG9wcGluZy1jaGFydC1ub2RlanMifSxgU291cmNlIGNvZGVgKSkpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}