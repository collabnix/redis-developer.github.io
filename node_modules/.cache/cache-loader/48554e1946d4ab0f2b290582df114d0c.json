{"remainingRequest":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/ajeetraina/staging/redis-developer.github.io/docs/develop/java/spring/redis-and-spring-course/lesson_7/index-lesson_7.mdx","dependencies":[{"path":"/Users/ajeetraina/staging/redis-developer.github.io/docs/develop/java/spring/redis-and-spring-course/lesson_7/index-lesson_7.mdx","mtime":1631078110756},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-develop-java-spring-redis-and-spring-course-lesson-7-index-lesson-7-mdx-53b.json","mtime":1631078548060},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1604063546682},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/babel-loader/lib/index.js","mtime":1611637097949},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1611637102291},{"path":"/Users/ajeetraina/staging/redis-developer.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1611637100994}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FqZWV0cmFpbmEvc3RhZ2luZy9yZWRpcy1kZXZlbG9wZXIuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2luZGV4LWxlc3Nvbl83Jyx0aXRsZTonU2VhcmNoIHdpdGggUmVkaVNlYXJjaCcsc2lkZWJhcl9sYWJlbDonU2VhcmNoIHcvIFJlZGlTZWFyY2gnLHNsdWc6Jy9kZXZlbG9wL2phdmEvcmVkaXMtYW5kLXNwcmluZy1jb3Vyc2UvbGVzc29uXzcnfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiZGV2ZWxvcC9qYXZhL3NwcmluZy9yZWRpcy1hbmQtc3ByaW5nLWNvdXJzZS9sZXNzb25fNy9pbmRleC1sZXNzb25fNyIsImlkIjoiZGV2ZWxvcC9qYXZhL3NwcmluZy9yZWRpcy1hbmQtc3ByaW5nLWNvdXJzZS9sZXNzb25fNy9pbmRleC1sZXNzb25fNyIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJTZWFyY2ggd2l0aCBSZWRpU2VhcmNoIiwiZGVzY3JpcHRpb24iOiJPYmplY3RpdmVzIiwic291cmNlIjoiQHNpdGUvZG9jcy9kZXZlbG9wL2phdmEvc3ByaW5nL3JlZGlzLWFuZC1zcHJpbmctY291cnNlL2xlc3Nvbl83L2luZGV4LWxlc3Nvbl83Lm1keCIsInNsdWciOiIvZGV2ZWxvcC9qYXZhL3JlZGlzLWFuZC1zcHJpbmctY291cnNlL2xlc3Nvbl83IiwicGVybWFsaW5rIjoiL2RldmVsb3AvamF2YS9yZWRpcy1hbmQtc3ByaW5nLWNvdXJzZS9sZXNzb25fNyIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vcmVkaXMtZGV2ZWxvcGVyL3JlZGlzLWRldmVsb3Blci9lZGl0L21hc3Rlci9kb2NzL2RldmVsb3AvamF2YS9zcHJpbmcvcmVkaXMtYW5kLXNwcmluZy1jb3Vyc2UvbGVzc29uXzcvaW5kZXgtbGVzc29uXzcubWR4IiwidmVyc2lvbiI6ImN1cnJlbnQiLCJzaWRlYmFyX2xhYmVsIjoiU2VhcmNoIHcvIFJlZGlTZWFyY2giLCJzaWRlYmFyIjoiZG9jcyIsInByZXZpb3VzIjp7InRpdGxlIjoiRG9tYWluIE1vZGVscyB3aXRoIFJlZGlzSlNPTiIsInBlcm1hbGluayI6Ii9kZXZlbG9wL2phdmEvcmVkaXMtYW5kLXNwcmluZy1jb3Vyc2UvbGVzc29uXzYifSwibmV4dCI6eyJ0aXRsZSI6IlJlY29tbWVuZGF0aW9ucyB3aXRoIFJlZGlzR3JhcGgiLCJwZXJtYWxpbmsiOiIvZGV2ZWxvcC9qYXZhL3JlZGlzLWFuZC1zcHJpbmctY291cnNlL2xlc3Nvbl84In19Oy8qIEBqc3hSdW50aW1lIGNsYXNzaWMgKi8gLyogQGpzeCBtZHggKi9pbXBvcnQgdXNlQmFzZVVybCBmcm9tJ0Bkb2N1c2F1cnVzL3VzZUJhc2VVcmwnO2V4cG9ydCBjb25zdCB0b2M9W3t2YWx1ZTonT2JqZWN0aXZlcycsaWQ6J29iamVjdGl2ZXMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0FnZW5kYScsaWQ6J2FnZW5kYScsY2hpbGRyZW46W119LHt2YWx1ZTonUmVkaVNlYXJjaCcsaWQ6J3JlZGlzZWFyY2gnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1VzaW5nIHNwcmluZy1yZWRpc2VhcmNoJyxpZDondXNpbmctc3ByaW5nLXJlZGlzZWFyY2gnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0NyZWF0aW5nIGEgU2VhcmNoIEluZGV4JyxpZDonY3JlYXRpbmctYS1zZWFyY2gtaW5kZXgnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0Z1bGwtdGV4dCBTZWFyY2ggUXVlcmllcycsaWQ6J2Z1bGwtdGV4dC1zZWFyY2gtcXVlcmllcycsY2hpbGRyZW46W119LHt2YWx1ZTonQWRkaW5nIGFuZCBnZXR0aW5nIEF1dG8tY29tcGxldGUgc3VnZ2VzdGlvbnMnLGlkOidhZGRpbmctYW5kLWdldHRpbmctYXV0by1jb21wbGV0ZS1zdWdnZXN0aW9ucycsY2hpbGRyZW46W119XTtjb25zdCBsYXlvdXRQcm9wcz17dG9jfTtjb25zdCBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe2NvbXBvbmVudHMsLi4ucHJvcHN9KXtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgzIix7ImlkIjoib2JqZWN0aXZlcyJ9LGBPYmplY3RpdmVzYCksbWR4KCJwIixudWxsLGBMZWFybiBob3cgdGhlIFJlZGlTZWFyY2ggbW9kdWxlIGNhbiBicmlkZ2UgdGhlIHF1ZXJ5aW5nIGdhcCBiZXR3ZWVuIFNRTCBhbmQgTm9TUUwgc3lzdGVtcy4gV2XigJlsbCBmb2N1cyBvbiB0d28gZXZlcnlkYXkgdXNlIGNhc2VzOiBmdWxsLXRleHQgc2VhcmNoIGFuZCBhdXRvLWNvbXBsZXRlLmApLG1keCgiaDMiLHsiaWQiOiJhZ2VuZGEifSxgQWdlbmRhYCksbWR4KCJwIixudWxsLGBJbiB0aGlzIGxlc3NvbiwgeW91J2xsIGxlYXJuOmApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEhvdyB0byBjcmVhdGUgc2VhcmNoIGluZGV4ZXMgd2l0aCBSZWRpU2VhY2ggdXNpbmcgc3ByaW5nLXJlZGlzZWFyY2ggYW5kIGxldHR1Y2Utc2VhcmNoLmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBIb3cgdG8gdXNlIFJlZGlTZWFyY2ggaW4gYSBTcHJpbmcgQm9vdCBhcHBsaWNhdGlvbiB0byBpbXBsZW1lbnQgZmFjZXRlZCBzZWFyY2guYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEhvdyB0byB1c2UgdGhlIFJlZGlTZWFyY2ggc3VnZ2VzdGlvbnMgZmVhdHVyZSB0byBpbXBsZW1lbnQgYXV0by1jb21wbGV0ZS4KSWYgeW91IGdldCBzdHVjazpgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgVGhlIHByb2dyZXNzIG1hZGUgaW4gdGhpcyBsZXNzb24gaXMgYXZhaWxhYmxlIG9uIHRoZSByZWRpMnJlYWQgZ2l0aHViIHJlcG9zaXRvcnkgYXQgYCxtZHgoImEiLHtwYXJlbnROYW1lOiJsaSIsImhyZWYiOiJodHRwczovL2dpdGh1Yi5jb20vcmVkaXMtZGV2ZWxvcGVyL3JlZGkycmVhZC90cmVlL2NvdXJzZS9taWxlc3RvbmUtNyJ9LGBodHRwczovL2dpdGh1Yi5jb20vcmVkaXMtZGV2ZWxvcGVyL3JlZGkycmVhZC90cmVlL2NvdXJzZS9taWxlc3RvbmUtN2ApKSksbWR4KCJoMyIseyJpZCI6InJlZGlzZWFyY2gifSxgUmVkaVNlYXJjaGApLG1keCgicCIsbnVsbCxgUmVkaVNlYXJjaCBpcyBhIHNvdXJjZS1hdmFpbGFibGUgbW9kdWxlIGZvciBxdWVyeWluZywgc2Vjb25kYXJ5IGluZGV4aW5nLCBhbmQgZnVsbC10ZXh0IHNlYXJjaCBpbiBSZWRpcy4KUmVkaXNlYXJjaCBpbXBsZW1lbnRzIGEgc2Vjb25kYXJ5IGluZGV4IGluIFJlZGlzLCBidXQgdW5saWtlIG90aGVyIFJlZGlzIGluZGV4aW5nIGxpYnJhcmllcywgaXQgZG9lcyBub3QgdXNlIGludGVybmFsIGRhdGEgc3RydWN0dXJlcyBzdWNoIGFzIHNvcnRlZCBzZXRzLgpUaGlzIGFsc28gZW5hYmxlcyBtb3JlIGFkdmFuY2VkIGZlYXR1cmVzLCBzdWNoIGFzIG11bHRpLWZpZWxkIHF1ZXJpZXMsIGFnZ3JlZ2F0aW9uLCBhbmQgZnVsbC10ZXh0IHNlYXJjaC4gQWxzbywgUmVkaVNlYXJjaCBzdXBwb3J0cyBleGFjdCBwaHJhc2UgbWF0Y2hpbmcgYW5kIG51bWVyaWMgZmlsdGVyaW5nIGZvciB0ZXh0IHF1ZXJpZXMsIG5laXRoZXIgcG9zc2libGUgbm9yIGVmZmljaWVudCB3aXRoIHRyYWRpdGlvbmFsIFJlZGlzIGluZGV4aW5nIGFwcHJvYWNoZXMuCkhhdmluZyBhIHJpY2ggcXVlcnkgYW5kIGFnZ3JlZ2F0aW9uIGVuZ2luZSBpbiB5b3VyIFJlZGlzIGRhdGFiYXNlIG9wZW5zIHRoZSBkb29yIHRvIG1hbnkgbmV3IGFwcGxpY2F0aW9ucyB0aGF0IGdvIHdlbGwgYmV5b25kIGNhY2hpbmcuIFlvdSBjYW4gdXNlIFJlZGlzIGFzIHlvdXIgcHJpbWFyeSBkYXRhYmFzZSBldmVuIHdoZW4geW91IG5lZWQgdG8gYWNjZXNzIHRoZSBkYXRhIHVzaW5nIGNvbXBsZXggcXVlcmllcyB3aXRob3V0IGFkZGluZyBjb21wbGV4aXR5IHRvIHRoZSBjb2RlIHRvIHVwZGF0ZSBhbmQgaW5kZXggZGF0YS5gKSxtZHgoImgzIix7ImlkIjoidXNpbmctc3ByaW5nLXJlZGlzZWFyY2gifSxgVXNpbmcgc3ByaW5nLXJlZGlzZWFyY2hgKSxtZHgoInAiLG51bGwsYFNwcmluZyBSZWRpU2VhcmNoIChgLG1keCgiYSIse3BhcmVudE5hbWU6InAiLCJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL1JlZGlTZWFyY2gvc3ByaW5nLXJlZGlzZWFyY2gifSxgaHR0cHM6Ly9naXRodWIuY29tL1JlZGlTZWFyY2gvc3ByaW5nLXJlZGlzZWFyY2hgKSxgKSBpcyBhIGxpYnJhcnkgYnVpbHQgb24gTGV0dHVTZWFyY2ggKGAsbWR4KCJhIix7cGFyZW50TmFtZToicCIsImhyZWYiOiJodHRwczovL2dpdGh1Yi5jb20vUmVkaVNlYXJjaC9sZXR0dXNlYXJjaCJ9LGBodHRwczovL2dpdGh1Yi5jb20vUmVkaVNlYXJjaC9sZXR0dXNlYXJjaGApLGApLCBwcm92aWRpbmcgYWNjZXNzIHRvIFJlZGlTZWFyY2ggZnJvbSBTcHJpbmcgYXBwbGljYXRpb25zLgpMZXR0dVNlYXJjaCBpcyBhIEphdmEgY2xpZW50IGZvciBSZWRpU2VhcmNoIGJhc2VkIG9uIHRoZSBwb3B1bGFyIFJlZGlzIEphdmEgY2xpZW50IGxpYnJhcnkgTGV0dHVjZS4KQWRkaW5nIHRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgc3ByaW5nLXJlZGlzZWFyY2hgKSxgIGRlcGVuZGVuY3kKSW4geW91ciBNYXZlbiBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgcG9tLnhtbGApLGAsIGFkZCB0aGUgZm9sbG93aW5nIGRlcGVuZGVuY3k6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteG1sIn0sYDxkZXBlbmRlbmN5PgogIDxncm91cElkPmNvbS5yZWRpc2xhYnM8L2dyb3VwSWQ+CiAgPGFydGlmYWN0SWQ+c3ByaW5nLXJlZGlzZWFyY2g8L2FydGlmYWN0SWQ+CiAgPHZlcnNpb24+My4wLjE8L3ZlcnNpb24+CjwvZGVwZW5kZW5jeT4KYCkpLG1keCgiaDMiLHsiaWQiOiJjcmVhdGluZy1hLXNlYXJjaC1pbmRleCJ9LGBDcmVhdGluZyBhIFNlYXJjaCBJbmRleGApLG1keCgicCIsbnVsbCxgVG8gY3JlYXRlIGFuIGluZGV4LCB5b3UgbXVzdCBkZWZpbmUgYSBzY2hlbWEgdG8gbGlzdCB0aGUgZmllbGRzIGFuZCB0aGVpciB0eXBlcyB0byBiZSBpbmRleGVkLgpGb3IgdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBCb29rYCksYCBtb2RlbCwgeW91IHdpbGwgYmUgaW5kZXhpbmcgZm91ciBmaWVsZHM6YCksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgVGl0bGVgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgU3VidGl0bGVgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRGVzY3JpcHRpb25gKSksbWR4KCJoNCIseyJpZCI6ImF1dGhvcnMifSxgQXV0aG9yc2ApLG1keCgicCIsbnVsbCxgQ3JlYXRpbmcgdGhlIGluZGV4IGlzIGRvbmUgdXNpbmcgdGhlIEZULkNSRUFURSBjb21tYW5kLiBUaGUgUmVkaVNlYXJjaCBlbmdpbmUgd2lsbCBzY2FuIHRoZSBkYXRhYmFzZSB1c2luZyBvbmUgb3IgbW9yZSBQUkVGSVgga2V5IHBhdHRlcm4gdmFsdWVzIGFuZCB1cGRhdGUgdGhlIGluZGV4IGJhc2VkIG9uIHRoZSBzY2hlbWEgZGVmaW5pdGlvbi4KVGhpcyBhY3RpdmUgaW5kZXggbWFpbnRlbmFuY2UgbWFrZXMgaXQgZWFzeSB0byBhZGQgYW4gaW5kZXggdG8gYW4gZXhpc3RpbmcgYXBwbGljYXRpb24uClRvIGNyZWF0ZSBvdXIgaW5kZXgsIHdl4oCZbGwgdXNlIHRoZSBub3ctZmFtaWxpYXIgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYENvbW1hbmRMaW5lUnVubmVyYCksYCByZWNpcGUuCldlIHdpbGwga2VlcCB0aGUgbmFtZSBvZiB0aGUgc29vbiB0byBiZSBjcmVhdGVkIGluZGV4IGluIHRoZSBhcHBsaWNhdGlvbidzIHByb3BlcnR5IGZpZWxkIGFzIHNob3duOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGBhcHAuYm9va3NTZWFyY2hJbmRleE5hbWU9Ym9va3MtaWR4CmApKSxtZHgoInAiLG51bGwsYE5leHQsIGNyZWF0ZSB0aGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYHNyYy9tYWluL2phdmEvY29tL3JlZGlzbGFicy9lZHUvcmVkaTJyZWFkL2Jvb3QvQ3JlYXRlQm9va3NTZWFyY2hJbmRleC5qYXZhYCksYCBmaWxlIGFuZCBhZGQgdGhlIGNvbnRlbnRzIGFzIGZvbGxvd3M6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YSJ9LGBwYWNrYWdlIGNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZC5ib290OwoKaW1wb3J0IGNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZC5tb2RlbHMuQm9vazsKaW1wb3J0IGNvbS5yZWRpc2xhYnMubGV0dHVzZWFyY2guQ3JlYXRlT3B0aW9uczsKaW1wb3J0IGNvbS5yZWRpc2xhYnMubGV0dHVzZWFyY2guRmllbGQ7CmltcG9ydCBjb20ucmVkaXNsYWJzLmxldHR1c2VhcmNoLlJlZGlTZWFyY2hDb21tYW5kczsKaW1wb3J0IGNvbS5yZWRpc2xhYnMubGV0dHVzZWFyY2guU3RhdGVmdWxSZWRpU2VhcmNoQ29ubmVjdGlvbjsKaW1wb3J0IG9yZy5zcHJpbmdmcmFtZXdvcmsuYmVhbnMuZmFjdG9yeS5hbm5vdGF0aW9uLkF1dG93aXJlZDsKaW1wb3J0IG9yZy5zcHJpbmdmcmFtZXdvcmsuYmVhbnMuZmFjdG9yeS5hbm5vdGF0aW9uLlZhbHVlOwppbXBvcnQgb3JnLnNwcmluZ2ZyYW1ld29yay5ib290LkNvbW1hbmRMaW5lUnVubmVyOwppbXBvcnQgb3JnLnNwcmluZ2ZyYW1ld29yay5jb3JlLmFubm90YXRpb24uT3JkZXI7CmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLnN0ZXJlb3R5cGUuQ29tcG9uZW50OwppbXBvcnQgaW8ubGV0dHVjZS5jb3JlLlJlZGlzQ29tbWFuZEV4ZWN1dGlvbkV4Y2VwdGlvbjsKaW1wb3J0IGxvbWJvay5leHRlcm4uc2xmNGouU2xmNGo7CgpAQ29tcG9uZW50CkBPcmRlcig2KQpAU2xmNGoKcHVibGljIGNsYXNzIENyZWF0ZUJvb2tzU2VhcmNoSW5kZXggaW1wbGVtZW50cyBDb21tYW5kTGluZVJ1bm5lciB7CgogIEBBdXRvd2lyZWQKICBwcml2YXRlIFN0YXRlZnVsUmVkaVNlYXJjaENvbm5lY3Rpb248U3RyaW5nLCBTdHJpbmc+IHNlYXJjaENvbm5lY3Rpb247CgogIEBWYWx1ZSgiXCR7YXBwLmJvb2tzU2VhcmNoSW5kZXhOYW1lfSIpCiAgcHJpdmF0ZSBTdHJpbmcgc2VhcmNoSW5kZXhOYW1lOwoKICBAT3ZlcnJpZGUKICBAU3VwcHJlc3NXYXJuaW5ncyh7ICJ1bmNoZWNrZWQiIH0pCiAgcHVibGljIHZvaWQgcnVuKFN0cmluZy4uLiBhcmdzKSB0aHJvd3MgRXhjZXB0aW9uIHsKICAgIFJlZGlTZWFyY2hDb21tYW5kczxTdHJpbmcsIFN0cmluZz4gY29tbWFuZHMgPSBzZWFyY2hDb25uZWN0aW9uLnN5bmMoKTsKICAgIHRyeSB7CiAgICAgIGNvbW1hbmRzLmZ0SW5mbyhzZWFyY2hJbmRleE5hbWUpOwogICAgfSBjYXRjaCAoUmVkaXNDb21tYW5kRXhlY3V0aW9uRXhjZXB0aW9uIHJjZWUpIHsKICAgICAgaWYgKHJjZWUuZ2V0TWVzc2FnZSgpLmVxdWFscygiVW5rbm93biBJbmRleCBuYW1lIikpIHsKCiAgICAgICAgQ3JlYXRlT3B0aW9uczxTdHJpbmcsIFN0cmluZz4gb3B0aW9ucyA9IENyZWF0ZU9wdGlvbnMuPFN0cmluZywgU3RyaW5nPmJ1aWxkZXIoKS8vCiAgICAgICAgICAgIC5wcmVmaXgoU3RyaW5nLmZvcm1hdCgiJXM6IiwgQm9vay5jbGFzcy5nZXROYW1lKCkpKS5idWlsZCgpOwoKICAgICAgICBGaWVsZDxTdHJpbmc+IHRpdGxlID0gRmllbGQudGV4dCgidGl0bGUiKS5zb3J0YWJsZSh0cnVlKS5idWlsZCgpOwogICAgICAgIEZpZWxkPFN0cmluZz4gc3VidGl0bGUgPSBGaWVsZC50ZXh0KCJzdWJ0aXRsZSIpLmJ1aWxkKCk7CiAgICAgICAgRmllbGQ8U3RyaW5nPiBkZXNjcmlwdGlvbiA9IEZpZWxkLnRleHQoImRlc2NyaXB0aW9uIikuYnVpbGQoKTsKICAgICAgICBGaWVsZDxTdHJpbmc+IGF1dGhvcjAgPSBGaWVsZC50ZXh0KCJhdXRob3JzLlswXSIpLmJ1aWxkKCk7CiAgICAgICAgRmllbGQ8U3RyaW5nPiBhdXRob3IxID0gRmllbGQudGV4dCgiYXV0aG9ycy5bMV0iKS5idWlsZCgpOwogICAgICAgIEZpZWxkPFN0cmluZz4gYXV0aG9yMiA9IEZpZWxkLnRleHQoImF1dGhvcnMuWzJdIikuYnVpbGQoKTsKICAgICAgICBGaWVsZDxTdHJpbmc+IGF1dGhvcjMgPSBGaWVsZC50ZXh0KCJhdXRob3JzLlszXSIpLmJ1aWxkKCk7CiAgICAgICAgRmllbGQ8U3RyaW5nPiBhdXRob3I0ID0gRmllbGQudGV4dCgiYXV0aG9ycy5bNF0iKS5idWlsZCgpOwogICAgICAgIEZpZWxkPFN0cmluZz4gYXV0aG9yNSA9IEZpZWxkLnRleHQoImF1dGhvcnMuWzVdIikuYnVpbGQoKTsKICAgICAgICBGaWVsZDxTdHJpbmc+IGF1dGhvcjYgPSBGaWVsZC50ZXh0KCJhdXRob3JzLls2XSIpLmJ1aWxkKCk7CgogICAgICAgIGNvbW1hbmRzLmNyZWF0ZSgKICAgICAgICAgIHNlYXJjaEluZGV4TmFtZSwgLy8KICAgICAgICAgIG9wdGlvbnMsIC8vCiAgICAgICAgICB0aXRsZSwgc3VidGl0bGUsIGRlc2NyaXB0aW9uLCAvLwogICAgICAgICAgYXV0aG9yMCwgYXV0aG9yMSwgYXV0aG9yMiwgYXV0aG9yMywgYXV0aG9yNCwgYXV0aG9yNSwgYXV0aG9yNiAvLwogICAgICAgICk7CgogICAgICAgIGxvZy5pbmZvKCI+Pj4+IENyZWF0ZWQgQm9va3MgU2VhcmNoIEluZGV4Li4uIik7CiAgICAgIH0KICAgIH0KICB9Cn0KYCkpLG1keCgicCIsbnVsbCxgTGV04oCZcyBicmVhayBkb3duIHdoYXQgb3VyIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBDcmVhdGVCb29rc1NlYXJjaEluZGV4YCksYCBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgQ29tbWFuZExpbmVSdW5uZXJgKSxgIGlzIGRvaW5nLiBXZSdsbCBiZSB3b3JraW5nIHdpdGggY2xhc3NlcyBvdXQgb2YgdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBjb20ucmVkaXNsYWJzLmxldHR1c2VhcmNoYCksYCBwYWNrYWdlOgpJbmplY3QgYSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgU3RhdGVmdWxSZWRpU2VhcmNoQ29ubmVjdGlvbmApLGAsIHdoaWNoIGdpdmVzIGFjY2VzcyB0byBSZWRpU2VhcmNoIGNvbW1hbmRzIGluIHN5bmNocm9ub3VzIG1vZGUsIGFzeW5jaHJvbm91cyBtb2RlLCBhbmQgcmVhY3RpdmUgbW9kZS4KRnJvbSB0aGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYFN0YXRlZnVsUmVkaVNlYXJjaENvbm5lY3Rpb25gKSxgIHdlIGdldCBhbiBpbnN0YW5jZSBvZiBSZWRpU2VhcmNoQ29tbWFuZHMgdXNpbmcgdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBzeW5jKClgKSxgIG1ldGhvZCAocmV0dXJuIHRoZSBzeW5jaHJvbm91cyBtb2RlIG1ldGhvZHMpLgpXZSBvbmx5IGNyZWF0ZSB0aGUgaW5kZXggaWYgaXQgZG9lc27igJl0IGV4aXN0LCB3aGljaCB3aWxsIGJlIHNpZ25hbGxlZCBieSB0aGUgRlQuSU5GTyBjb21tYW5kIGNvbW1hbmQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLgpUbyBjcmVhdGUgdGhlIGluZGV4LCB3ZSBidWlsZCBhIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBDcmVhdGVPcHRpb25zYCksYCBvYmplY3QgcGFzc2luZyB0aGUgQm9vayBjbGFzcyBwcmVmaXguCkZvciBlYWNoIG9uZSB0aGUgZmllbGRzIHRvIGJlIGluZGV4ZWQsIHdlIGNyZWF0ZSBhIEZpZWxkIG9iamVjdDpgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBUaXRsZSBpcyBjcmVhdGVkIGFzIGEgc29ydGFibGUgdGV4dCBmaWVsZGApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBTdWJ0aXRsZSBpcyBjcmVhdGVkIGFzIGEgdGV4dCBmaWVsZGApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBEZXNjcmlwdGlvbiBpcyBjcmVhdGVkIGFzIGEgdGV4dCBmaWVsZGApKSxtZHgoInAiLG51bGwsYEF1dGhvcnMgYXJlIHN0b3JlZCBpbiBhIFNldCwgc28gdGhleSBhcmUgc2VyaWFsaXplZCBhcyBwcmVmaXhlZCBpbmRleGVkIGZpZWxkcyAoYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGF1dGhvcnMuWzBdLCBhdXRob3JzLlsxXWApLGAsIC4uLikuIFdlIGluZGV4ZWQgdXAgdG8gNiBhdXRob3JzLgpUbyBjcmVhdGUgdGhlIGluZGV4LCB3ZSBpbnZva2UgdGhlIGNyZWF0ZSBtZXRob2QgcGFzc2luZyB0aGUgaW5kZXggbmFtZSwgdGhlIENyZWF0ZU9wdGlvbnMsIGFuZCB0aGUgZmllbGRzLgpUbyBzZWUgbW9yZSBvcHRpb25zIGFuZCBhbGwgZmllbGQgdHlwZXMsIHNlZSBgLG1keCgiYSIse3BhcmVudE5hbWU6InAiLCJocmVmIjoiaHR0cHM6Ly9vc3MucmVkaXNsYWJzLmNvbS9yZWRpc2VhcmNoL0NvbW1hbmRzLyNmdGNyZWF0ZSJ9LGBodHRwczovL29zcy5yZWRpc2xhYnMuY29tL3JlZGlzZWFyY2gvQ29tbWFuZHMvI2Z0Y3JlYXRlYCksYApPbiBzZXJ2ZXIgcmVzdGFydCwgeW91IHNob3VsZCBydW4geW91ciBSZWRpcyBDTEkgTU9OSVRPUiB0byBzZWUgdGhlIGZvbGxvd2luZyBjb21tYW5kczpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgMTYxNzYwMTAyMS43NzkzOTYgWzAgMTcyLjIxLjAuMTo1OTM5Nl0gIkZULklORk8iICJib29rcy1pZHgiCjE2MTc2MDEwMjEuNzg2MTkyIFswIDE3Mi4yMS4wLjE6NTkzOTZdICJGVC5DUkVBVEUiICJib29rcy1pZHgiICJQUkVGSVgiICIxIiAiY29tLnJlZGlzbGFicy5lZHUucmVkaTJyZWFkLm1vZGVscy5Cb29rOiIgIlNDSEVNQSIgInRpdGxlIiAiVEVYVCIgIlNPUlRBQkxFIiAic3VidGl0bGUiICJURVhUIiAiZGVzY3JpcHRpb24iICJURVhUIiAiYXV0aG9ycy5bMF0iICJURVhUIiAiYXV0aG9ycy5bMV0iICJURVhUIiAiYXV0aG9ycy5bMl0iICJURVhUIiAiYXV0aG9ycy5bM10iICJURVhUIiAiYXV0aG9ycy5bNF0iICJURVhUIiAiYXV0aG9ycy5bNV0iICJURVhUIiAiYXV0aG9ycy5bNl0iICJURVhUIgpgKSksbWR4KCJwIixudWxsLGBZb3UgY2FuIHNlZSB0aGUgaW5kZXggaW5mb3JtYXRpb24gd2l0aCB0aGUgZm9sbG93aW5nIGNvbW1hbmQgaW4gdGhlIFJlZGlzIENMSTpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0sYDEyNy4wLjAuMTo2Mzc5PiBGVC5JTkZPICJib29rcy1pZHgiCiAxKSBpbmRleF9uYW1lCiAyKSBib29rcy1pZHgKLi4uCiA5KSBudW1fZG9jcwoxMCkgIjI0MDMiCjExKSBtYXhfZG9jX2lkCjEyKSAiMjQwMyIKMTMpIG51bV90ZXJtcwoxNCkgIjMyODYzIgoxNSkgbnVtX3JlY29yZHMKMTYpICI0MTM1MjIiCmApKSxtZHgoInAiLG51bGwsYFRoaXMgc25pcHBldCBmcm9tIHRoZSBGVC5JTkZPIGNvbW1hbmQgb3V0cHV0IGZvciB0aGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYOKAnGJvb2tzLWlkeOKAnWApLGAgaW5kZXggc2hvd3MgdGhhdCB0aGVyZSBhcmUgMiw0MDMgZG9jdW1lbnRzIGluZGV4ZWQgKHRoZSBudW1iZXIgb2YgYm9va3MgaW4gdGhlIHN5c3RlbSkuIEZyb20gb3VyIGluZGV4ZWQgZG9jdW1lbnRzLCB0aGVyZSBhcmUgMzIsODYzIHRlcm1zIGFuZCBjbG9zZSB0byBoYWxmIGEgbWlsbGlvbiByZWNvcmRzLmApLG1keCgiaDMiLHsiaWQiOiJmdWxsLXRleHQtc2VhcmNoLXF1ZXJpZXMifSxgRnVsbC10ZXh0IFNlYXJjaCBRdWVyaWVzYCksbWR4KCJwIixudWxsLGBSZWRpU2VhcmNoIGlzIGEgZnVsbC10ZXh0IHNlYXJjaCBlbmdpbmUsIGFsbG93aW5nIHRoZSBhcHBsaWNhdGlvbiB0byBydW4gcG93ZXJmdWwgcXVlcmllcy4gRm9yIGV4YW1wbGUsIHRvIHNlYXJjaCBhbGwgYm9va3MgdGhhdCBjb250YWluIOKAnG5ldHdvcmtpbmfigJ0tcmVsYXRlZCBpbmZvcm1hdGlvbiwgeW91IHdvdWxkIHJ1biB0aGUgZm9sbG93aW5nIGNvbW1hbmQ6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9LGAxMjcuMC4wLjE6NjM3OT4gRlQuU0VBUkNIIGJvb2tzLWlkeCAibmV0d29ya2luZyIgUkVUVVJOIDEgdGl0bGUKYCkpLG1keCgicCIsbnVsbCxgV2hpY2ggcmV0dXJuczpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0sYCAxKSAoaW50ZWdlcikgMjk5CiAyKSAiY29tLnJlZGlzbGFicy5lZHUucmVkaTJyZWFkLm1vZGVscy5Cb29rOjMwMzAwMjg0OTYiCiAzKSAxKSAidGl0bGUiCiAgICAyKSAiVWJpcXVpdG91cyBOZXR3b3JraW5nIgogNCkgImNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZC5tb2RlbHMuQm9vazo5ODExMDc4NzE4IgogNSkgMSkgInRpdGxlIgogICAgMikgIlByb2dyZXNzIGluIENvbXB1dGluZywgQW5hbHl0aWNzIGFuZCBOZXR3b3JraW5nIgogNikgImNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZC5tb2RlbHMuQm9vazo5ODExMDMzNzY1IgogNykgMSkgInRpdGxlIgogICAgMikgIlByb2dyZXNzIGluIEludGVsbGlnZW50IENvbXB1dGluZyBUZWNobmlxdWVzOiBUaGVvcnksIFByYWN0aWNlLCBhbmQgQXBwbGljYXRpb25zIgogOCkgImNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZC5tb2RlbHMuQm9vazo5ODExMDA0NDhYIgogOSkgMSkgInRpdGxlIgogICAgMikgIlByb2NlZWRpbmdzIG9mIEZpZnRoIEludGVybmF0aW9uYWwgQ29uZmVyZW5jZSBvbiBTb2Z0IENvbXB1dGluZyBmb3IgUHJvYmxlbSBTb2x2aW5nIgoxMCkgImNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZC5tb2RlbHMuQm9vazoxNzg3MTI5NDExIgoxMSkgMSkgInRpdGxlIgogICAgMikgIk9wZW5TdGFjazogQnVpbGRpbmcgYSBDbG91ZCBFbnZpcm9ubWVudCIKMTIpICJjb20ucmVkaXNsYWJzLmVkdS5yZWRpMnJlYWQubW9kZWxzLkJvb2s6MzMxOTk4MjA0NCIKMTMpIDEpICJ0aXRsZSIKICAgIDIpICJFbmdpbmVlcmluZyBBcHBsaWNhdGlvbnMgb2YgTmV1cmFsIE5ldHdvcmtzIgoxNCkgImNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZC5tb2RlbHMuQm9vazozMzE5MzkwMjg3IgoxNSkgMSkgInRpdGxlIgogICAgMikgIk9wZW4gUHJvYmxlbXMgaW4gTmV0d29yayBTZWN1cml0eSIKMTYpICJjb20ucmVkaXNsYWJzLmVkdS5yZWRpMnJlYWQubW9kZWxzLkJvb2s6MDEzMzg4NzY0MiIKMTcpIDEpICJ0aXRsZSIKICAgIDIpICJXZWIgYW5kIE5ldHdvcmsgRGF0YSBTY2llbmNlIgoxOCkgImNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZC5tb2RlbHMuQm9vazozMzE5MTYzMTMyIgoxOSkgMSkgInRpdGxlIgogICAgMikgIkRhdGFiYXNlcyBpbiBOZXR3b3JrZWQgSW5mb3JtYXRpb24gU3lzdGVtcyIKMjApICJjb20ucmVkaXNsYWJzLmVkdS5yZWRpMnJlYWQubW9kZWxzLkJvb2s6MTI2MDEwODQyMiIKMjEpIDEpICJ0aXRsZSIKICAgIDIpICJHcmF5IEhhdCBIYWNraW5nOiBUaGUgRXRoaWNhbCBIYWNrZXIncyBIYW5kYm9vaywgRmlmdGggRWRpdGlvbiIKYCkpLG1keCgicCIsbnVsbCxgQXMgeW91IGNhbiBzZWUsIGJvb2tzIHdpdGggdGhlIHdvcmsg4oCcbmV0d29ya+KAnSBpbiB0aGUgdGl0bGUgYXJlIHJldHVybmVkLCBldmVuIHRob3VnaCB3ZSB1c2VkIHRoZSB3b3JkIOKAnG5ldHdvcmtpbmfigJ0uIFRoaXMgaXMgYmVjYXVzZSB0aGUgdGl0bGUgaGFzIGJlZW4gaW5kZXhlZCBhcyB0ZXh0LCBzbyB0aGUgZmllbGQgaXMgdG9rZW5pemVkIGFuZCBzdGVtbWVkLgpBbHNvLCB0aGUgY29tbWFuZCBkb2VzIG5vdCBzcGVjaWZ5IGEgZmllbGQsIHNvIHRoZSB0ZXJtIOKAnG5ldHdvcmtpbmfigJ0gKGFuZCByZWxhdGVkIHRlcm1zKSBpcyBzZWFyY2hlZCBpbiBhbGwgdGV4dCBmaWVsZHMgb2YgdGhlIGluZGV4LgpUaGF04oCZcyB3aHkgd2UgaGF2ZSB0aXRsZXMgdGhhdCBkbyBub3Qgc2hvdyB0aGUgc2VhcmNoIHRlcm07IGluIHRoZXNlIGNhc2VzLCB0aGUgdGVybSBoYXMgYmVlbiBmb3VuZCBpbiBhbm90aGVyIG9mIHRoZSBpbmRleGVkIGZpZWxkcy4KSWYgeW91IHdhbnQgdG8gc2VhcmNoIG9uIHNwZWNpZmljIGZpZWxkcywgeW91IHVzZSB0aGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYEBmaWVsZGApLGAgbm90YXRpb24sIGFzIGZvbGxvd3M6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9LGAxMjcuMC4wLjE6NjM3OT4gRlQuU0VBUkNIIGJvb2tzLWlkeCAiQHRpdGxlOm5ldHdvcmtpbmciIFJFVFVSTiAxIHRpdGxlCmApKSxtZHgoInAiLG51bGwsYFRyeSBzb21lIGFkZGl0aW9uYWwgZnVsbC10ZXh0IHNlYXJjaCBxdWVyaWVzIGFnYWluc3QgdGhlIGluZGV4LmApLG1keCgicCIsbnVsbCxgUHJlZml4IG1hdGNoZXM6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9LGAxMjcuMC4wLjE6NjM3OT4gRlQuU0VBUkNIIGJvb2tzLWlkeCAiY2xvKiIgUkVUVVJOIDQgdGl0bGUgc3VidGl0bGUgYXV0aG9ycy5bMF0gYXV0aG9ycy5bMV0KYCkpLG1keCgicCIsbnVsbCxgRnV6enkgc2VhcmNoOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgMTI3LjAuMC4xOjYzNzk+IEZULlNFQVJDSCBib29rcy1pZHggIiVzY2FsJSIgUkVUVVJOIDIgdGl0bGUgc3VidGl0bGUKYCkpLG1keCgicCIsbnVsbCxgVW5pb25zOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgMTI3LjAuMC4xOjYzNzk+IEZULlNFQVJDSCBib29rcy1pZHggInJ1c3QgfCAlc2NhbCUiIFJFVFVSTiAzIHRpdGxlIHN1YnRpdGxlIGF1dGhvcnMuWzBdCmApKSxtZHgoInAiLG51bGwsYFlvdSBjYW4gZmluZCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBxdWVyeSBzeW50YXggaW4gdGhlIFJlZGlTZWFyY2ggZG9jdW1lbnRhdGlvbi4KQWRkaW5nIFNlYXJjaCB0byB0aGUgQm9va3MgQ29udHJvbGxlcgpUbyBhZGQgZnVsbC10ZXh0IHNlYXJjaCBjYXBhYmlsaXRpZXMgdG8gdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBCb29rc0NvbnRyb2xsZXJgKSxgLCB3ZSdsbCBmaXJzdCBpbmplY3QgYSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgU3RhdGVmdWxSZWRpU2VhcmNoQ29ubmVjdGlvbmApLGAKYW5kIHNpbXBseSBwYXNzIGEgdGV4dCBxdWVyeSBwYXJhbSB0byB0aGUgc2VhcmNoIG1ldGhvZCBhdmFpbGFibGUgZnJvbSB0aGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYFJlZGlTZWFyY2hDb21tYW5kc2ApLGAgaW50ZXJmYWNlOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmEifSxgQFZhbHVlKCJcJHthcHAuYm9va3NTZWFyY2hJbmRleE5hbWV9IikKcHJpdmF0ZSBTdHJpbmcgc2VhcmNoSW5kZXhOYW1lOwoKQEF1dG93aXJlZApwcml2YXRlIFN0YXRlZnVsUmVkaVNlYXJjaENvbm5lY3Rpb248U3RyaW5nLCBTdHJpbmc+IHNlYXJjaENvbm5lY3Rpb247CgpAR2V0TWFwcGluZygiL3NlYXJjaCIpCnB1YmxpYyBTZWFyY2hSZXN1bHRzPFN0cmluZyxTdHJpbmc+IHNlYXJjaChAUmVxdWVzdFBhcmFtKG5hbWU9InEiKVN0cmluZyBxdWVyeSkgewogIFJlZGlTZWFyY2hDb21tYW5kczxTdHJpbmcsIFN0cmluZz4gY29tbWFuZHMgPSBzZWFyY2hDb25uZWN0aW9uLnN5bmMoKTsKICBTZWFyY2hSZXN1bHRzPFN0cmluZywgU3RyaW5nPiByZXN1bHRzID0gY29tbWFuZHMuc2VhcmNoKHNlYXJjaEluZGV4TmFtZSwgcXVlcnkpOwogIHJldHVybiByZXN1bHRzOwp9CmApKSxtZHgoInAiLG51bGwsYFdpdGggdGhlIGltcG9ydHM6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YSJ9LGBpbXBvcnQgY29tLnJlZGlzbGFicy5sZXR0dXNlYXJjaC5SZWRpU2VhcmNoQ29tbWFuZHM7CmltcG9ydCBjb20ucmVkaXNsYWJzLmxldHR1c2VhcmNoLlNlYXJjaFJlc3VsdHM7CmltcG9ydCBjb20ucmVkaXNsYWJzLmxldHR1c2VhcmNoLlN0YXRlZnVsUmVkaVNlYXJjaENvbm5lY3Rpb247CmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLmJlYW5zLmZhY3RvcnkuYW5ub3RhdGlvbi5WYWx1ZTsKYCkpLG1keCgicCIsbnVsbCxgV2UgY2FuIHVzZSBjdXJsIHRvIGV4ZWN1dGUgc29tZSB0aGUgc2FtcGxlIHF1ZXJpZXMgd2UgcHJldmlvdXNseSB0cmllZDpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1iYXNoIn0sYGN1cmwgLS1sb2NhdGlvbiAtLXJlcXVlc3QgR0VUICdodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL2Jvb2tzL3NlYXJjaC8/cT0lMjVzY2FsJTI1JwpgKSksbWR4KCJwIixudWxsLGBUaGlzIHJldHVybnM6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtanNvbiJ9LGBbCiAgewogICAgImluZm9MaW5rIjogImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2Jvb2tzL2RldGFpbHM/aWQ9eFZVMkFBQUFRQkFKJnNvdXJjZT1nYnNfYXBpIiwKICAgICJ0aHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD14VlUyQUFBQVFCQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTEmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIiwKICAgICJfY2xhc3MiOiAiY29tLnJlZGlzbGFicy5lZHUucmVkaTJyZWFkLm1vZGVscy5Cb29rIiwKICAgICJpZCI6ICIxNDQ5MzQwMzI2IiwKICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAidGl0bGUiOiAiU2NhbGEgQ29va2Jvb2siLAogICAgInByaWNlIjogIjQzLjExIiwKICAgICJjdXJyZW5jeSI6ICJVU0QiLAogICAgImNhdGVnb3JpZXMuWzBdIjogImNvbS5yZWRpc2xhYnMuZWR1LnJlZGkycmVhZC5tb2RlbHMuQ2F0ZWdvcnk6MjNhNDk5MmMtOTczZC00ZjM2LWI0YjEtNjY3OGM1Yzg3YjI4IiwKICAgICJzdWJ0aXRsZSI6ICJSZWNpcGVzIGZvciBPYmplY3QtT3JpZW50ZWQgYW5kIEZ1bmN0aW9uYWwgUHJvZ3JhbW1pbmciLAogICAgImF1dGhvcnMuWzBdIjogIkFsdmluIEFsZXhhbmRlciIsCiAgICAicGFnZUNvdW50IjogIjcyMiIsCiAgICAiZGVzY3JpcHRpb24iOiAiLi4uIgogIH0sCiAgICB7CiAgICAgICJpbmZvTGluayI6ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9ib29rcy9kZXRhaWxzP2lkPWQ1RUlCZ0FBUUJBSiZzb3VyY2U9Z2JzX2FwaSIsCiAgICAgICJ0aHVtYm5haWwiOiAiaHR0cDovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3MvY29udGVudD9pZD1kNUVJQmdBQVFCQUomcHJpbnRzZWM9ZnJvbnRjb3ZlciZpbWc9MSZ6b29tPTEmZWRnZT1jdXJsJnNvdXJjZT1nYnNfYXBpIiwKICAgICAgIl9jbGFzcyI6ICJjb20ucmVkaXNsYWJzLmVkdS5yZWRpMnJlYWQubW9kZWxzLkJvb2siLAogICAgICAiaWQiOiAiMTc4MzU1ODc1WCIsCiAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICJ0aXRsZSI6ICJTY2FsYSBmb3IgTWFjaGluZSBMZWFybmluZyIsCiAgICAgICJwcmljZSI6ICIyMi4zOSIsCiAgICAgICJjdXJyZW5jeSI6ICJVU0QiLAogICAgICAiY2F0ZWdvcmllcy5bMF0iOiAiY29tLnJlZGlzbGFicy5lZHUucmVkaTJyZWFkLm1vZGVscy5DYXRlZ29yeToxNTEyOTI2Ny1iZWU5LTQ4NmQtODhlNy01NGRlNzA5Mjc2ZWYiLAogICAgICAiYXV0aG9ycy5bMF0iOiAiUGF0cmljayBSLiBOaWNvbGFzIiwKICAgICAgInBhZ2VDb3VudCI6ICI1MjAiLAogICAgICAiZGVzY3JpcHRpb24iOiAiLi4uIgogICAgfSwKIC4uLgpdCmApKSxtZHgoImgzIix7ImlkIjoiYWRkaW5nLWFuZC1nZXR0aW5nLWF1dG8tY29tcGxldGUtc3VnZ2VzdGlvbnMifSxgQWRkaW5nIGFuZCBnZXR0aW5nIEF1dG8tY29tcGxldGUgc3VnZ2VzdGlvbnNgKSxtZHgoInAiLG51bGwsYFJlZGlTZWFyY2ggcHJvdmlkZXMgYSBjb21wbGV0aW9uIHN1Z2dlc3RlciB0aGF0IGlzIHR5cGljYWxseSB1c2VkIGZvciBhdXRvLWNvbXBsZXRlL3NlYXJjaC1hcy15b3UtdHlwZSBmdW5jdGlvbmFsaXR5LgpUaGlzIGlzIGEgbmF2aWdhdGlvbmFsIGZlYXR1cmUgdG8gZ3VpZGUgdXNlcnMgdG8gcmVsZXZhbnQgcmVzdWx0cyBhcyB0aGV5IGFyZSB0eXBpbmcsIGltcHJvdmluZyBzZWFyY2ggcHJlY2lzaW9uLgpSZWRpU2VhcmNoIHByb3ZpZGVzIGNvbXBsZXRpb24gc3VnZ2VzdGlvbnMgd2l0aCBmb3VyIGNvbW1hbmRzOmApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEZULlNVR0FERDogQWRkcyBhIHN1Z2dlc3Rpb24gc3RyaW5nIHRvIGFuIGF1dG8tY29tcGxldGUgZGljdGlvbmFyeS5gKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRlQuU1VHR0VUOiBHZXQgYSBsaXN0IG9mIHN1Z2dlc3Rpb25zIGZvciBhIHN0cmluZy5gKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRlQuU1VHREVMOiBEZWxldGVzIGEgc3VnZ2VzdGlvbiBzdHJpbmcgZnJvbSBhbiBhdXRvLWNvbXBsZXRlIGRpY3Rpb25hcnkuYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEZULlNVR0xFTjogUmV0dXJucyB0aGUgc2l6ZSBvZiBhbiBhdXRvLWNvbXBsZXRpb24gZGljdGlvbmFyeWApKSxtZHgoImg0Iix7ImlkIjoiaW1wbGVtZW50LWFuLWF1dG8tY29tcGxldGUtZW5kcG9pbnQtZm9yLWF1dGhvci1uYW1lcyJ9LGBJbXBsZW1lbnQgYW4gYXV0by1jb21wbGV0ZSBlbmRwb2ludCBmb3IgYXV0aG9yIG5hbWVzYCksbWR4KCJwIixudWxsLGBUbyBjcmVhdGUgYW4gYXV0by1jb21wbGV0ZSBzdWdnZXN0aW9uIGRpY3Rpb25hcnkgZm9yIGF1dGhvciBuYW1lcywgd2XigJlsbCBjcmVhdGUgYSBDb21tYW5kTGluZVJ1bm5lciB0aGF0IHdpbGwgbG9vcCBvdmVyIHRoZSBib29rcywgYW5kIGZvciBlYWNoIGF1dGhvciBpbiB0aGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYFNldDxTdHJpbmc+YCksYCBvZiBhdXRob3JzLCBpdCB3aWxsIGFkZCB0aGVtIHRvIHRoZSBkaWN0aW9uYXJ5LgpVbmxpa2Ugc2VhcmNoIGluZGV4ZXMsIHdoaWNoIFJlZGlTZWFyY2ggbWFpbnRhaW5zIGF1dG9tYXRpY2FsbHksIHlvdSBtYWludGFpbiBzdWdnZXN0aW9uIGRpY3Rpb25hcmllcyBtYW51YWxseSB1c2luZyBGVC5TVUdBREQgYW5kIEZULlNVR0RFTC4KQWRkIHRoZSBwcm9wZXJ0eSBmb3IgdGhlIG5hbWUgb2YgdGhlIGF1dG8tY29tcGxldGUgZGljdGlvbmFyeSB0byBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgc3JjL21haW4vcmVzb3VyY2VzL2FwcGxpY2F0aW9uLnByb3BlcnRpZXNgKSxgOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmEifSxgYXBwLmF1dG9Db21wbGV0ZUtleT1hdXRob3ItYXV0b2NvbXBsZXRlCmApKSxtZHgoInAiLG51bGwsYEFkZCB0aGUgZmlsZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgc3JjL21haW4vamF2YS9jb20vcmVkaXNsYWJzL2VkdS9yZWRpMnJlYWQvYm9vdC9DcmVhdGVBdXRob3JOYW1lU3VnZ2VzdGlvbnMuamF2YWApLGAgd2l0aCB0aGUgZm9sbG93aW5nIGNvbnRlbnRzOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWphdmEifSxgcGFja2FnZSBjb20ucmVkaXNsYWJzLmVkdS5yZWRpMnJlYWQuYm9vdDsKCmltcG9ydCBjb20ucmVkaXNsYWJzLmVkdS5yZWRpMnJlYWQucmVwb3NpdG9yaWVzLkJvb2tSZXBvc2l0b3J5OwppbXBvcnQgY29tLnJlZGlzbGFicy5sZXR0dXNlYXJjaC5SZWRpU2VhcmNoQ29tbWFuZHM7CmltcG9ydCBjb20ucmVkaXNsYWJzLmxldHR1c2VhcmNoLlN0YXRlZnVsUmVkaVNlYXJjaENvbm5lY3Rpb247CmltcG9ydCBjb20ucmVkaXNsYWJzLmxldHR1c2VhcmNoLlN1Z2dlc3Rpb247CgppbXBvcnQgb3JnLnNwcmluZ2ZyYW1ld29yay5iZWFucy5mYWN0b3J5LmFubm90YXRpb24uQXV0b3dpcmVkOwppbXBvcnQgb3JnLnNwcmluZ2ZyYW1ld29yay5iZWFucy5mYWN0b3J5LmFubm90YXRpb24uVmFsdWU7CmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLmJvb3QuQ29tbWFuZExpbmVSdW5uZXI7CmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLmNvcmUuYW5ub3RhdGlvbi5PcmRlcjsKaW1wb3J0IG9yZy5zcHJpbmdmcmFtZXdvcmsuZGF0YS5yZWRpcy5jb3JlLlJlZGlzVGVtcGxhdGU7CmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLnN0ZXJlb3R5cGUuQ29tcG9uZW50OwoKaW1wb3J0IGxvbWJvay5leHRlcm4uc2xmNGouU2xmNGo7CgpAQ29tcG9uZW50CkBPcmRlcig3KQpAU2xmNGoKcHVibGljIGNsYXNzIENyZWF0ZUF1dGhvck5hbWVTdWdnZXN0aW9ucyAgaW1wbGVtZW50cyBDb21tYW5kTGluZVJ1bm5lciB7CgogIEBBdXRvd2lyZWQKICBwcml2YXRlIFJlZGlzVGVtcGxhdGU8U3RyaW5nLCBTdHJpbmc+IHJlZGlzVGVtcGxhdGU7CgogIEBBdXRvd2lyZWQKICBwcml2YXRlIEJvb2tSZXBvc2l0b3J5IGJvb2tSZXBvc2l0b3J5OwoKICBAQXV0b3dpcmVkCiAgcHJpdmF0ZSBTdGF0ZWZ1bFJlZGlTZWFyY2hDb25uZWN0aW9uPFN0cmluZywgU3RyaW5nPiBzZWFyY2hDb25uZWN0aW9uOwoKICBAVmFsdWUoIlwke2FwcC5hdXRvQ29tcGxldGVLZXl9IikKICBwcml2YXRlIFN0cmluZyBhdXRvQ29tcGxldGVLZXk7CgogIEBPdmVycmlkZQogIHB1YmxpYyB2b2lkIHJ1bihTdHJpbmcuLi4gYXJncykgdGhyb3dzIEV4Y2VwdGlvbiB7CiAgICBpZiAoIXJlZGlzVGVtcGxhdGUuaGFzS2V5KGF1dG9Db21wbGV0ZUtleSkpIHsKICAgICAgUmVkaVNlYXJjaENvbW1hbmRzPFN0cmluZywgU3RyaW5nPiBjb21tYW5kcyA9IHNlYXJjaENvbm5lY3Rpb24uc3luYygpOwogICAgICBib29rUmVwb3NpdG9yeS5maW5kQWxsKCkuZm9yRWFjaChib29rIC0+IHsKICAgICAgICBpZiAoYm9vay5nZXRBdXRob3JzKCkgIT0gbnVsbCkgewogICAgICAgICAgYm9vay5nZXRBdXRob3JzKCkuZm9yRWFjaChhdXRob3IgLT4gewogICAgICAgICAgICBTdWdnZXN0aW9uPFN0cmluZz4gc3VnZ2VzdGlvbiA9IFN1Z2dlc3Rpb24uYnVpbGRlcihhdXRob3IpLnNjb3JlKDFkKS5idWlsZCgpOwogICAgICAgICAgICBjb21tYW5kcy5zdWdhZGQoYXV0b0NvbXBsZXRlS2V5LCBzdWdnZXN0aW9uKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICBsb2cuaW5mbygiPj4+PiBDcmVhdGVkIEF1dGhvciBOYW1lIFN1Z2dlc3Rpb25zLi4uIik7CiAgICB9CiAgfQp9CmApKSxtZHgoInAiLG51bGwsYExldOKAmXMgYnJlYWsgZG93biB0aGUgbG9naWMgb2YgdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBDcmVhdGVBdXRob3JOYW1lU3VnZ2VzdGlvbnNgKSxgIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBDb21tYW5kTGluZVJ1bm5lcmApLGA6YCksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRmlyc3QsIHdlIGd1YXJhbnRlZSBhIHNpbmdsZSBleGVjdXRpb24gYnkgY2hlY2tpbmcgZm9yIHRoZSBleGlzdGVuY2Ugb2YgdGhlIGtleSBmb3IgdGhlIGF1dG8tY29tcGxldGUgZGljdGlvbmFyeS5gKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgVGhlbiwgdXNpbmcgdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSxgQm9va1JlcG9zaXRvcnlgKSxgIHdlIGxvb3Agb3ZlciBhbGwgYm9va3NgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRm9yIGVhY2ggYXV0aG9yIGluIGEgYm9vayB3ZSBhZGQgYSBzdWdnZXN0aW9uIHRvIHRoZSBkaWN0aW9uYXJ5YCkpLG1keCgicCIsbnVsbCxgVG8gdXNlIHRoZSBhdXRvLXN1Z2dlc3Rpb24gZmVhdHVyZSBpbiB0aGUgY29udHJvbGxlciwgd2UgY2FuIGFkZCBhIG5ldyBtZXRob2Q6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtamF2YSJ9LGBAVmFsdWUoIlwke2FwcC5hdXRvQ29tcGxldGVLZXl9IikKcHJpdmF0ZSBTdHJpbmcgYXV0b0NvbXBsZXRlS2V5OwoKQEdldE1hcHBpbmcoIi9hdXRob3JzIikKcHVibGljIExpc3Q8U3VnZ2VzdGlvbjxTdHJpbmc+PiBhdXRob3JBdXRvQ29tcGxldGUoQFJlcXVlc3RQYXJhbShuYW1lPSJxIilTdHJpbmcgcXVlcnkpIHsKICBSZWRpU2VhcmNoQ29tbWFuZHM8U3RyaW5nLCBTdHJpbmc+IGNvbW1hbmRzID0gc2VhcmNoQ29ubmVjdGlvbi5zeW5jKCk7CiAgU3VnZ2V0T3B0aW9ucyBvcHRpb25zID0gU3VnZ2V0T3B0aW9ucy5idWlsZGVyKCkubWF4KDIwTCkuYnVpbGQoKTsKICByZXR1cm4gY29tbWFuZHMuc3VnZ2V0KGF1dG9Db21wbGV0ZUtleSwgcXVlcnksIG9wdGlvbnMpOwp9CmApKSxtZHgoInAiLG51bGwsYFdpdGggaW1wb3J0czpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUiLCJjbGFzc05hbWUiOiJsYW5ndWFnZS1qYXZhIn0sYGltcG9ydCBjb20ucmVkaXNsYWJzLmxldHR1c2VhcmNoLlN1Z2dlc3Rpb247CmltcG9ydCBjb20ucmVkaXNsYWJzLmxldHR1c2VhcmNoLlN1Z2dldE9wdGlvbnM7CmApKSxtZHgoInAiLG51bGwsYEluIHRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgYXV0aG9yQXV0b0NvbXBsZXRlYCksYCBtZXRob2QsIHdlIHVzZSB0aGUgRlQuU1VHR0VUIGNvbW1hbmQgKHZpYSB0aGUgc3VnZ2V0IG1ldGhvZCBmcm9tIHRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgUmVkaVNlYXJjaENvbW1hbmRzYCksYCBvYmplY3QpIGFuZCBidWlsZCBhIHF1ZXJ5IHVzaW5nIGEgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYFN1Z2dldE9wdGlvbnNgKSxgIGNvbmZpZ3VyYXRpb24uIEluIHRoZSBleGFtcGxlIGFib3ZlLCB3ZSBzZXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gMjAuCldlIGNhbiB1c2UgY3VybCB0byBjcmFmdCBhIHJlcXVlc3QgdG8gb3VyIG5ldyBlbmRwb2ludC4gSW4gdGhpcyBleGFtcGxlLCBJ4oCZbSBwYXNzaW5nIOKAnGJyaWFuIHPigJ0gYXMgdGhlIHF1ZXJ5OmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgY3VybCAtLWxvY2F0aW9uIC0tcmVxdWVzdCBHRVQgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvYm9va3MvYXV0aG9ycy8/cT1icmlhbiUyMHMnCmApKSxtZHgoInAiLG51bGwsYFRoaXMgcmVzdWx0cyBpbiBhIHJlc3BvbnNlIHdpdGggMiBKU09OIG9iamVjdHM6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtanNvbiJ9LGBbCiAgICB7CiAgICAgICAgInN0cmluZyI6ICJCcmlhbiBTdGVlbGUiLAogICAgICAgICJzY29yZSI6IG51bGwsCiAgICAgICAgInBheWxvYWQiOiBudWxsCiAgICB9LAogICAgewogICAgICAgICJzdHJpbmciOiAiQnJpYW4gU2FtLUJvZGRlbiIsCiAgICAgICAgInNjb3JlIjogbnVsbCwKICAgICAgICAicGF5bG9hZCI6IG51bGwKICAgIH0KXQpgKSksbWR4KCJwIixudWxsLGBJZiB3ZSBhZGQgb25lIG1vcmUgbGV0dGVyIHRvIG91ciBxdWVyeSB0byBtYWtlIGl0IOKAnGJyaWFuIHNh4oCdOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSIsImNsYXNzTmFtZSI6Imxhbmd1YWdlLWJhc2gifSxgY3VybCAtLWxvY2F0aW9uIC0tcmVxdWVzdCBHRVQgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvYm9va3MvYXV0aG9ycy8/cT1icmlhbiUyMHNhJwpgKSksbWR4KCJwIixudWxsLGBXZSBnZXQgdGhlIGV4cGVjdGVkIG5hcnJvd2luZyBvZiB0aGUgc3VnZ2VzdGlvbiBzZXQ6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIix7cGFyZW50TmFtZToicHJlIiwiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtanNvbiJ9LGBbCiAgICB7CiAgICAgICAgInN0cmluZyI6ICJCcmlhbiBTYW0tQm9kZGVuIiwKICAgICAgICAic2NvcmUiOiBudWxsLAogICAgICAgICJwYXlsb2FkIjogbnVsbAogICAgfQpdCmApKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}