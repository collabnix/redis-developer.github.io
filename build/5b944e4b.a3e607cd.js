(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{136:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(7),o=(a(0),a(237)),i=["components"],s={id:"index-gettingstarted",title:"Getting Started with RedisJSON",sidebar_label:"Getting Started with RedisJSON",slug:"/howtos/redisjson/getting-started"},l={unversionedId:"howtos/redisjson/getting-started/index-gettingstarted",id:"howtos/redisjson/getting-started/index-gettingstarted",isDocsHomePage:!1,title:"Getting Started with RedisJSON",description:"The RedisJSON module provides in-memory manipulation of JSON documents at high velocity and volume. With RedisJSON, you can natively store document data in a hierarchical, tree-like format to scale and query documents efficiently, significantly improving performance over storing and manipulating JSON with Lua scripts and core Redis data structures.",source:"@site/docs/howtos/redisjson/getting-started/index-gettingstarted.mdx",slug:"/howtos/redisjson/getting-started",permalink:"/howtos/redisjson/getting-started",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/redisjson/getting-started/index-gettingstarted.mdx",version:"current",sidebar_label:"Getting Started with RedisJSON",sidebar:"docs",previous:{title:"RedisJSON Tutorial",permalink:"/howtos/redisjson/"},next:{title:"How to cache JSON data in Redis with Python",permalink:"/howtos/redisjson/using-python"}},c=[{value:"Step 1. Register and subscribe",id:"step-1-register-and-subscribe",children:[]},{value:"Step 2. Create a database with RedisJSON Module",id:"step-2-create-a-database-with-redisjson-module",children:[]},{value:"Step 3. Connect to a database",id:"step-3-connect-to-a-database",children:[]},{value:"Step 4. Getting Started with RedisJSON",id:"step-4-getting-started-with-redisjson",children:[]},{value:"Next Step",id:"next-step",children:[]}],b={toc:c};function d(e){var t=e.components,s=Object(r.a)(e,i);return Object(o.b)("wrapper",Object(n.a)({},b,s,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The RedisJSON module provides in-memory manipulation of JSON documents at high velocity and volume. With RedisJSON, you can natively store document data in a hierarchical, tree-like format to scale and query documents efficiently, significantly improving performance over storing and manipulating JSON with Lua scripts and core Redis data structures."),Object(o.b)("h3",{id:"step-1-register-and-subscribe"},"Step 1. Register and subscribe"),Object(o.b)("p",null,"Follow ",Object(o.b)("a",{parentName:"p",href:"/create/cloud/rediscloud"},"this link to register")," and subscribe to Redis Enterprise Cloud"),Object(o.b)("p",null,Object(o.b)("img",{alt:"RedisJSON",src:a(537).default})),Object(o.b)("h3",{id:"step-2-create-a-database-with-redisjson-module"},"Step 2. Create a database with RedisJSON Module"),Object(o.b)("p",null,Object(o.b)("img",{alt:"RedisJSON",src:a(538).default})),Object(o.b)("h3",{id:"step-3-connect-to-a-database"},"Step 3. Connect to a database"),Object(o.b)("p",null,"Follow ",Object(o.b)("a",{parentName:"p",href:"explore/redisinsight"},"this")," link to know how to connect to a database"),Object(o.b)("h3",{id:"step-4-getting-started-with-redisjson"},"Step 4. Getting Started with RedisJSON"),Object(o.b)("p",null,"The following steps use some basic RedisJSON commands. You can run them from the Redis command-line interface (redis-cli) or use the CLI available in RedisInsight. "),Object(o.b)("p",null,"To interact with RedisJSON, you will most often use the JSON.SET and JSON.GET commands. Before using RedisJSON, you should familiarize yourself with its commands  and syntax as detailed in the documentation: RedisJSON Commands."),Object(o.b)("p",null,"Let\u2019s go ahead and test drive some JSON-specific operations for setting and retrieving a Redis key with a JSON value:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Scalar"),Object(o.b)("li",{parentName:"ul"},"Objects (including nested objects)"),Object(o.b)("li",{parentName:"ul"},"Arrays of JSON objects"),Object(o.b)("li",{parentName:"ul"},"JSON nested objects")),Object(o.b)("h4",{id:"scalar"},"Scalar"),Object(o.b)("p",null,"Under RedisJSON, a key can contain any valid JSON value. It can be scalar, objects or arrays. JSON scalar is basically a string. You will have to use the JSON.SET command to set the JSON value. For new Redis keys the path must be the root, so you will use \u201c.\u201d path in the example below. For existing keys, when the entire path exists, the value that it contains is replaced with the JSON value. Here you will use JSON.SET to set the JSON scalar value to \u201cHello JSON!\u201d Scalar will contain a string that holds \u201cHello JSON!\u201d"),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"JSON.SET greetings .  ' \"Hello JSON!\" '\n")),Object(o.b)("b",null,"Result"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"OK\n")),Object(o.b)("p",null,"Use JSON.GET to return the value at path in JSON serialized form:"),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"JSON.GET greetings\n")),Object(o.b)("b",null,"Result"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"\\"Hello JSON!\\""\n')),Object(o.b)("h4",{id:"objects"},"Objects"),Object(o.b)("p",null,"Let\u2019s look at a JSON object example. A JSON object contains data in the form of a key-value pair. The keys are strings and the values are the JSON types. Keys and values are separated by a colon. Each entry (key-value pair) is separated by a comma. The { (curly brace) represents the JSON object:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{  \n    "employee": {  \n        "name": "alpha",   \n        "age": 40,   \n        "married": true  \n    }  \n}\n')),Object(o.b)("p",null,"Here is the command to insert JSON data into Redis:"),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'JSON.SET employee_profile $ \'{ "employee": { "name": "alpha", "age": 40,"married": true }  } \'\n')),Object(o.b)("div",{className:"admonition admonition-important alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},'Please note that the above command works for 2.0+ release of RedisJSON. If you are using the older version of RedisJSON, you can replace "$" with "."'))),Object(o.b)("b",null,"Result"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"OK"\n')),Object(o.b)("p",null,"The subcommands below change the reply\u2019s format and are all set to the empty string by default: ",Object(o.b)("em",{parentName:"p"}," INDENT sets the indentation string for nested levels "),". NEWLINE sets the string that\u2019s printed at the end of each line. * SPACE sets the string that\u2019s put between a key and a value:"),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"JSON.GET employee_profile\n")),Object(o.b)("b",null,"Result"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"{\\"employee\\":{\\"name\\":\\"alpha\\",\\"age\\":40,\\"married\\":true}}"\n')),Object(o.b)("h4",{id:"retrieving-a-part-of-json-document"},"Retrieving a part of JSON document"),Object(o.b)("p",null,"You can also retrieve a part of the JSON document from Redis. In the example below, \u201c.ans\u201d can be passed in the commandline to retrieve the value 4:"),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'JSON.SET object . \'{"foo":"bar", "ans":"4" }\'\n')),Object(o.b)("b",null,"Result"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"OK"\n')),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"JSON.GET object\n")),Object(o.b)("b",null,"Result"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"{\\"foo\\":\\"bar\\",\\"ans\\":\\"4\\"}"\n')),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"JSON.GET object .ans\n")),Object(o.b)("b",null,"Results"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"\\"4\\""\n')),Object(o.b)("h4",{id:"retrieving-the-type-of-json-data"},"Retrieving the type of JSON data"),Object(o.b)("p",null,"JSON.TYPE reports the type of JSON value at path and path defaults to root if not provided. If the key or path do not exist, null is returned."),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"JSON.TYPE employee_profile\n")),Object(o.b)("b",null,"Result:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"Object"\n')),Object(o.b)("h4",{id:"json-arrays-of-objects"},"JSON arrays of objects"),Object(o.b)("p",null,"The JSON array represents an ordered list of values. A JSON array can store multiple values, including strings, numbers, or objects. In JSON arrays, values must be separated by a comma. The [ (square bracket) represents the JSON array. Let\u2019s look at a simple JSON array example with four objects:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{"employees":[    \n    {"name":"Alpha", "email":"alpha@gmail.com", "age":23},    \n    {"name":"Beta", "email":"beta@gmail.com", "age":28},  \n    {"name":"Gamma", "email":"gamma@gmail.com", "age":33},    \n    {"name":"Theta", "email":"theta@gmail.com", "age":41}   \n]}  \n')),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'JSON.SET testarray .  \'{"employees":[         {"name":"Alpha", "email":"alpha@gmail.com", "age":23},         {"name":"Beta", "email":"beta@gmail.com", "age":28},       {"name":"Gamma", "email":"gamma@gmail.com", "age":33},         {"name":"Theta", "email":"theta@gmail.com", "age":41}    ]}   \'\n')),Object(o.b)("b",null,"Result:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"OK"\n')),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"JSON.GET testarray\n")),Object(o.b)("b",null,"Result:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"{\\"employees\\":[{\\"name\\":\\"Alpha\\",\\"email\\":\\\nalpha@gmail.com\n\n\\",\\"age\\":23},{\\"name\\":\\"Beta\\",\\"email\\":\\"beta@gmail.com....\n')),Object(o.b)("h4",{id:"json-nested-objects"},"JSON nested objects"),Object(o.b)("p",null,"A JSON object can also have another object. Here is a simple example of a JSON object having another object nested in it:"),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'>> JSON.SET employee_info . \' { "firstName": "Alpha",         "lastName": "K", "age": 23,        "address" : {            "streetAddress": "110 Fulbourn Road Cambridge",  "city": "San Francisco", "state": "California", "postalCode": "94016"  } } \'\n')),Object(o.b)("b",null,"Command"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},">> JSON.GET employee_info\n")),Object(o.b)("b",null,"Result"),":",Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"{\\"firstName\\":\\"Alpha\\",\\"lastName\\":\\"K\\",\\"age\\":23,\\"address\\":{\\"streetAddress\\":\\"110 Fulbourn Road Cambridge\\",\\"city\\":\\"San Francisco\\",\\"state\\":\\"California\\",\\"postalCode\\":\\"94016\\"}}"\n')),Object(o.b)("h3",{id:"next-step"},"Next Step"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/howtos/redisjson/using-python"},"RedisJSON and Python")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/howtos/redisjson/storing-complex-json-document"},"How to store and retrieve nested JSON document")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/howtos/redisjson/using-nodejs"},"Importing JSON data into Redis using NodeJS")," "),Object(o.b)("li",{parentName:"ul"},"Learn more about ",Object(o.b)("a",{parentName:"li",href:"https://oss.redislabs.com/redisjson/"},"RedisJSON")," in the Quickstart tutorial."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/howtos/shoppingcart"},"How to build shopping cart app using NodeJS and RedisJSON")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://redislabs.com/blog/index-and-query-json-docs-with-redis/"},"Indexing, Querying, and Full-Text Search of JSON Documents with Redis"))))}d.isMDXComponent=!0},237:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=b(a),m=n,u=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return a?r.a.createElement(u,s(s({ref:t},c),{},{components:a})):r.a.createElement(u,s({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},537:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/redisjson3-b44744e302a6aaf7c455dbcffee3b325.png"},538:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/redisjson1-2798af981892a662584c6167b5b8855c.png"}}]);