(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{227:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return h}));var r=n(3),s=n(7),a=(n(0),n(237)),i=(n(238),["components"]),c={id:"index-checkinswithstreams",title:"Processing Checkins with Redis Streams",sidebar_label:"Checkins with Streams",slug:"/develop/node/nodecrashcourse/checkinswithstreams"},o={unversionedId:"develop/node/node-crash-course/checkinswithstreams/index-checkinswithstreams",id:"develop/node/node-crash-course/checkinswithstreams/index-checkinswithstreams",isDocsHomePage:!1,title:"Processing Checkins with Redis Streams",description:"The most common action that users perform with our system is checking in at a location.  This part of the system needs to quickly capture checkins and scale independently of other components.",source:"@site/docs/develop/node/node-crash-course/checkinswithstreams/index-checkinswithstreams.mdx",slug:"/develop/node/nodecrashcourse/checkinswithstreams",permalink:"/develop/node/nodecrashcourse/checkinswithstreams",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/node/node-crash-course/checkinswithstreams/index-checkinswithstreams.mdx",version:"current",sidebar_label:"Checkins with Streams",sidebar:"docs",previous:{title:"Indexing and Querying with RediSearch",permalink:"/develop/node/nodecrashcourse/redisearch"},next:{title:"Managing Success with Redis",permalink:"/develop/node/nodecrashcourse/managingsuccess"}},l=[{value:"Hands-on exercise",id:"hands-on-exercise",children:[]},{value:"Coding exercise",id:"coding-exercise",children:[]},{value:"External Resources",id:"external-resources",children:[]}],d={toc:l};function h(e){var t=e.components,c=Object(s.a)(e,i);return Object(a.b)("wrapper",Object(r.a)({},d,c,{components:t,mdxType:"MDXLayout"}),Object(a.b)("div",{class:"text--center"},Object(a.b)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/19gPDwmXNWc",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})),Object(a.b)("p",null,"The most common action that users perform with our system is checking in at a location.  This part of the system needs to quickly capture checkins and scale independently of other components."),Object(a.b)("p",null,"We decided to build a separate Express application just to receive checkin POST requests from users.  This allows us to scale it separately from other API endpoints that deal with GET requests.  To make our Checkin Receiver as fast as possible, we decided to do the actual work of processing checkins in a separate service.  The Checkin Processor service reads checkins frmo the stream and updates the user and location Hashes in Redis."),Object(a.b)("p",null,"Checkins are transient data in our system - as long as we process them all, we don't need to keep them around forever.  It also makes sense to store them in the order that they arrive in the system.  "),Object(a.b)("p",null,"Using a Redis Stream to store our checkin data is a natural fit for this use case.  A Stream acts as a buffer between producer and consumer components.  With Redis Streams, each entry in the stream is given a timestamp ID and the Stream is ordered by these IDs."),Object(a.b)("p",null,"In our application, the Checkin Receiver Service is the ",Object(a.b)("em",{parentName:"p"},"producer")," and the Checkin Processor the ",Object(a.b)("em",{parentName:"p"},"consumer"),".  We can represent this in a diagram like so:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Streams Overview",src:n(733).default})),Object(a.b)("p",null,"Using a Stream allows these components to operate at different speeds with no knowledge of each other.  The Checkin Receiver simply adds a new entry to the Stream for each checkin it receives from a user, and the Checkin Processor reads the Stream and updates user and location Hashes at its own pace.  "),Object(a.b)("p",null,"It's also possible to read a Redis Stream to find entries that were added in a specified time period between a start and end IDs.  As our IDs are timestamps, this means that we can request data that was added in a given timeframe.  We use this capability in the API Server component and in this module's coding exercise you'll get to extend this with new functionality."),Object(a.b)("h2",{id:"hands-on-exercise"},"Hands-on exercise"),Object(a.b)("p",null,"Take a moment to run the Checkin Processor component which reads checkins from the stream and updates user and location Hashes."),Object(a.b)("p",null,"The sample data contains 5000 unprocessed checkins which the Checkin Processor will consume.  The Checkin Processor keeps track of how far it has gotten in the stream by storing the ID of the last processed checkin in Redis. This way, when it's stopped and restarted it picks up from where it left off."),Object(a.b)("p",null,"In a terminal window, ",Object(a.b)("inlineCode",{parentName:"p"},"cd")," to the ",Object(a.b)("inlineCode",{parentName:"p"},"node-js-crash-course")," folder that you cloned the GitHub repo to, and start the Checkin Processor:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"$ npm run checkinprocessor delay\n")),Object(a.b)("p",null,"Adding ",Object(a.b)("inlineCode",{parentName:"p"},"delay")," introduces an artificial random processing time for each checkin. This slows the Checkin Processor down so that you can examine its output more easily.  You should see it start up and begin processing checkins from the start of the stream at ID 0, which is the lowest possible stream entry ID:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},'$ npm run checkinprocessor delay\n\n> js-crash-course@0.0.1 checkinprocessor \n> node ./src/checkinprocessor.js -- "delay"\n\ninfo: Reading stream from last ID 0.\ndebug: Updating user ncc:users:789 and location ncc:locations:171.\ninfo: Processed checkin 1609602085397-0.\ndebug: Updating user ncc:users:455 and location ncc:locations:181.\ninfo: Processed checkin 1609603711960-0.\ndebug: Updating user ncc:users:752 and location ncc:locations:100.\ninfo: Processed checkin 1609604227545-0.\ndebug: Updating user ncc:users:102 and location ncc:locations:144.\ninfo: Processed checkin 1609604778689-0.\ndebug: Updating user ncc:users:180 and location ncc:locations:13.\ninfo: Processed checkin 1609605397408-0.\n...\n')),Object(a.b)("p",null,"Stop the Checkin Processor with Ctrl-C after it has processed a few checkins.  Note the ID of the last checkin processed (this is ",Object(a.b)("inlineCode",{parentName:"p"},"1609605397408-0")," in the example above). Also note the user and location ID for the last checkin processed (user 180, location 13 in the example above).  "),Object(a.b)("p",null,"Verify that the Checkin Processor stored this ID in Redis so that it knows where to start from when it's restarted.  Using redis-cli or RedisInsight, take a look at the contents of the key ",Object(a.b)("inlineCode",{parentName:"p"},"ncc:checkinprocessor:lastid"),":"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},'127.0.0.1:6379> get ncc:checkinprocessor:lastid\n"1609605397408-0"\n')),Object(a.b)("p",null,"The value should match the last checkin ID that was processed."),Object(a.b)("p",null,"Finally, let's verify that the Checkin Processor updated the user's Hash with details from that checkin.  Use RedisInsight or the ",Object(a.b)("inlineCode",{parentName:"p"},"HGETALL")," command in redis-cli to look at the hash whose key is ",Object(a.b)("inlineCode",{parentName:"p"},"ncc:users:<user-id>"),", replacing ",Object(a.b)("inlineCode",{parentName:"p"},"<user-id>")," with the ID of the user that you noted earlier.  "),Object(a.b)("p",null,"So for my example, let's look at user 180:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},'127.0.0.1:6379> hgetall ncc:users:180\n 1) "id"\n 2) "180"\n 3) "firstName"\n 4) "Sophia"\n 5) "lastName"\n 6) "Marshall"\n 7) "email"\n 8) "sophia.marshall@example.com"\n 9) "password"\n10) "$2b$05$DPSHjaW44H4fn9sudfz/5.f1WcuZMrA0OZIp0CALQf0MH8zH1SSda"\n11) "numCheckins"\n12) "2332"\n13) "lastCheckin"\n14) "1609605397408"\n15) "lastSeenAt"\n16) "13"\n')),Object(a.b)("p",null,"Verify that the value for ",Object(a.b)("inlineCode",{parentName:"p"},"lastCheckin")," is the timestamp from the last processed checkin's ID (",Object(a.b)("inlineCode",{parentName:"p"},"1609605397408"),") in my case, and that the ",Object(a.b)("inlineCode",{parentName:"p"},"lastSeenAt")," value is the location ID from the last processed checkin (",Object(a.b)("inlineCode",{parentName:"p"},"13")," in my case)."),Object(a.b)("h2",{id:"coding-exercise"},"Coding exercise"),Object(a.b)("p",null,"In this exercise, you'll implement a new route in the API Server component.  This route will return only the most recent checkin from the checkins stream.  You'll use the ",Object(a.b)("a",{parentName:"p",href:"https://redis.io/commands/xrevrange"},"XREVRANGE command")," for this."),Object(a.b)("p",null,"First, make sure the API Server is running:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"$ npm run dev\n")),Object(a.b)("p",null,"(remember that this starts the server with nodemon, so as you modify the code and save your changes it will automatically restart and run the new code)."),Object(a.b)("p",null,"Open the ",Object(a.b)("inlineCode",{parentName:"p"},"node-js-crash-course")," folder with your IDE, and open the file ",Object(a.b)("inlineCode",{parentName:"p"},"src/routes/checkin_routes.js"),".  Locate the function that handles the ",Object(a.b)("inlineCode",{parentName:"p"},"/checkins/latest")," route."),Object(a.b)("p",null,"Using the ",Object(a.b)("a",{parentName:"p",href:"https://redis.io/commands/xrevrange"},"XREVRANGE documentation")," as a guide, modify the following line to invoke ",Object(a.b)("inlineCode",{parentName:"p"},"XREVRANGE")," so that it returns just the most recent checkin:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"const latestCheckin = await redisClient.xrevrange(checkinStreamKey, 'TODO');\n")),Object(a.b)("p",null,"Remember: When using ioredis, each parameter to a Redis command needs to be passed as a separate value."),Object(a.b)("p",null,"Test your code by visiting ",Object(a.b)("inlineCode",{parentName:"p"},"http://localhost:8081/checkins/latest")," - you should see a JSON representation of a checkin."),Object(a.b)("p",null,"To make sure your code returns the latest checkin, you need to POST a checking using Postman. Start the Checkin Receiver component in a new terminal window:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"$ npm run checkinreceiver\n")),Object(a.b)("p",null,"Then use Postman to POST a checkin. In Postman, open a new request, configure it as shown, and press Send:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Checkin Test with Postman",src:n(734).default})),Object(a.b)("p",null,"Now when you refresh ",Object(a.b)("inlineCode",{parentName:"p"},"http://localhost:8081/checkins/latest")," in your browser, the values shown should match those that you supplied in Postman."),Object(a.b)("h2",{id:"external-resources"},"External Resources"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://university.redis.com/courses/ru202/"},"RU202, Redis Streams")," at Redis University provides a deep dive into Redis Streams."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://redis.io/topics/streams-intro"},"Introduction to Redis Streams")," at redis.io.")),Object(a.b)("p",null,"In this video, Justin introduces Redis Streams with an example application that's very similar to the one we're building in this course:"),Object(a.b)("div",{class:"text--center"},Object(a.b)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/7cvyluza00Q",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})),Object(a.b)("p",null,"In our example application, we process stream entries in Node.js using the array representation that ioredis returns by default.  In this video, I look at using advanced features of ioredis to make it return JavaScript objects instead:"),Object(a.b)("div",{class:"text--center"},Object(a.b)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/dukkMLbzPfA",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})))}h.isMDXComponent=!0},237:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return m}));var r=n(0),s=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=s.a.createContext({}),d=function(e){var t=s.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},h=function(e){var t=d(e.components);return s.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},p=s.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),h=d(n),p=r,m=h["".concat(i,".").concat(p)]||h[p]||u[p]||a;return n?s.a.createElement(m,c(c({ref:t},l),{},{components:n})):s.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},238:function(e,t,n){"use strict";n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return i}));var r=n(20),s=n(246);function a(){var e=Object(r.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,a=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,r){var a=void 0===r?{}:r,i=a.forcePrependBaseUrl,c=void 0!==i&&i,o=a.absolute,l=void 0!==o&&o;if(!n)return n;if(n.startsWith("#"))return n;if(Object(s.b)(n))return n;if(c)return t+n;var d=n.startsWith(t)?n:t+n.replace(/^\//,"");return l?e+d:d}(a,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,a().withBaseUrl)(e,t)}},246:function(e,t,n){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function s(e){return void 0!==e&&!r(e)}n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return s}))},733:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/stream_overview-ee1bf9b1581a559b156ff57f50798881.png"},734:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/xrevrange_checkin_test-9fe2bf778325b6206fda2d40c2666daa.png"}}]);