(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{237:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),l=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(n),h=o,b=p["".concat(s,".").concat(h)]||p[h]||u[h]||i;return n?r.a.createElement(b,a(a({ref:t},c),{},{components:n})):r.a.createElement(b,a({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=h;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return d})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var o=n(3),r=n(7),i=(n(0),n(237)),s=["components"],a={id:"index-usingpython",title:"How to cache JSON data in Redis with Python",sidebar_label:"RedisJSON and Python",slug:"/howtos/redisjson/using-python"},d={unversionedId:"howtos/redisjson/using-python/index-usingpython",id:"howtos/redisjson/using-python/index-usingpython",isDocsHomePage:!1,title:"How to cache JSON data in Redis with Python",description:"RedisJSON is a Redis module that lets you store JSON documents in Redis. It is a JSON data type for Redis that lets you to fetch or modify a specific element in the document tree, without retrieving (or internally even parsing) the document. Its Python client even lets you store python dicts and convert them to JSON automatically.",source:"@site/docs/howtos/redisjson/using-python/index-usingpython.mdx",slug:"/howtos/redisjson/using-python",permalink:"/howtos/redisjson/using-python",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/redisjson/using-python/index-usingpython.mdx",version:"current",sidebar_label:"RedisJSON and Python",sidebar:"docs",previous:{title:"Getting Started with RedisJSON",permalink:"/howtos/redisjson/getting-started"},next:{title:"How to cache JSON data in Redis with NodeJS",permalink:"/howtos/redisjson/using-nodejs"}},c=[{value:"RedisJSON Python Client",id:"redisjson-python-client",children:[]},{value:"Step 1. Run RedisJSON Docker container",id:"step-1-run-redisjson-docker-container",children:[]},{value:"Step 2. Verify if RedisJSON module is loaded",id:"step-2-verify-if-redisjson-module-is-loaded",children:[]},{value:"Step 3. Storing the JSON document",id:"step-3-storing-the-json-document",children:[]},{value:"Step 4. Load Redis Module",id:"step-4-load-redis-module",children:[]},{value:"Step 5. Execute the python script",id:"step-5-execute-the-python-script",children:[]},{value:"Step 6. Verify the JSON document added to Redis",id:"step-6-verify-the-json-document-added-to-redis",children:[]},{value:"Step 7. Fetching the specific fields within JSON document",id:"step-7-fetching-the-specific-fields-within-json-document",children:[]},{value:"Step 8. Verifying the results",id:"step-8-verifying-the-results",children:[]},{value:"References",id:"references",children:[]}],l={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,s);return Object(i.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"RedisJSON is a Redis module that lets you store JSON documents in Redis. It is a JSON data type for Redis that lets you to fetch or modify a specific element in the document tree, without retrieving (or internally even parsing) the document. Its Python client even lets you store python dicts and convert them to JSON automatically."),Object(i.b)("h3",{id:"redisjson-python-client"},"RedisJSON Python Client"),Object(i.b)("p",null,"The 'rejson-py' is a package that allows storing, updating and querying objects as JSON documents in a Redis database that is extended with the ReJSON module. The package extends redis-py's interface with ReJSON's API, and performs on-the-fly serialization/deserialization of objects to/from JSON."),Object(i.b)("p",null,"Follow the steps below to get started with RedisJSON with Python:"),Object(i.b)("h3",{id:"step-1-run-redisjson-docker-container"},"Step 1. Run RedisJSON Docker container"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"}," docker run -p 6379:6379 --name redis-redisjson redislabs/rejson:latest\n")),Object(i.b)("h3",{id:"step-2-verify-if-redisjson-module-is-loaded"},"Step 2. Verify if RedisJSON module is loaded"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"}," redis-cli\n 127.0.0.1:6379> info modules\n # Modules\n module:name=ReJSON,ver=10007,api=1,filters=0,usedby=[],using=[],options=[]\n 127.0.0.1:6379> \n")),Object(i.b)("h3",{id:"step-3-storing-the-json-document"},"Step 3. Storing the JSON document"),Object(i.b)("p",null,"Let us consider a simple JSON document structure:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'employee\n {\n  "name": "Paul John",\n  "age": 25,\n  "location: "USA"\n }\n')),Object(i.b)("p",null,"Below is a python code to store the JSON document into Redis:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from rejson import Client, Path\n\n\nrj = Client(host='localhost', port=6379, decode_responses=True)\n\nemployee = {\n\n     'name': \"Paul\", \n     'Age': '25', \n     'Location': \"USA\"\n   }\nrj.jsonset('employee', Path.rootPath(), employee)\n")),Object(i.b)("p",null,'In the code above, we use JSON.GET to extract the JSON elements. Save the above file as "employee.py".'),Object(i.b)("h3",{id:"step-4-load-redis-module"},"Step 4. Load Redis Module"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"}," pip  install rejson\n")),Object(i.b)("h3",{id:"step-5-execute-the-python-script"},"Step 5. Execute the python script"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"}," python3 employee.py\n")),Object(i.b)("h3",{id:"step-6-verify-the-json-document-added-to-redis"},"Step 6. Verify the JSON document added to Redis"),Object(i.b)("b",null,"Command"),":",Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"}," 127.0.0.1:6379> JSON.GET employee\n")),Object(i.b)("b",null,"Result"),":",Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},' "{\\"name\\":\\"Paul\\",\\"Age\\":\\"25\\",\\"Location\\":\\"USA\\"}"\n 127.0.0.1:6379> \n')),Object(i.b)("h3",{id:"step-7-fetching-the-specific-fields-within-json-document"},"Step 7. Fetching the specific fields within JSON document"),Object(i.b)("p",null,'It\'s possible to fetch specific field within JSON element. Let us modify the above code and add "address" field as shown below:'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," from rejson import Client, Path\n\n\nrj = Client(host='localhost', port=6379, decode_responses=True)\n\nemployee = {\n\n     'name': \"Paul\", \n     'Age': '25', \n     'address': {\n        'location': \"USA\"\n   }\n  }\nrj.jsonset('employee', Path.rootPath(), employee)\nrj.jsonget('employee', Path('.address.location'))\n")),Object(i.b)("p",null,"In the above example, the code tries to fetch only the location under the address field."),Object(i.b)("h3",{id:"step-8-verifying-the-results"},"Step 8. Verifying the results"),Object(i.b)("b",null,"Command"),":",Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"}," 127.0.0.1:6379> JSON.GET employee .address.location\n")),Object(i.b)("b",null,"Results"),":",Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},' "\\"USA\\""\n')),Object(i.b)("h3",{id:"references"},"References"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"/howtos/redisjson/storing-complex-json-document"},"How to store and retrieve nested JSON document")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"/howtos/redisjson/using-nodejs"},"Importing JSON data into Redis using NodeJS")),Object(i.b)("li",{parentName:"ul"},"Learn more about ",Object(i.b)("a",{parentName:"li",href:"https://oss.redislabs.com/redisjson/"},"RedisJSON")," in the Quickstart tutorial.")))}p.isMDXComponent=!0}}]);